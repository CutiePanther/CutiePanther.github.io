<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Remain focused</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-15T14:23:50.540Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Grapelet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/05/15/js%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/05/15/js数组排序/</id>
    <published>2018-05-15T14:29:16.927Z</published>
    <updated>2018-05-15T14:23:50.540Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: js数组排序<br>date: 2018-05-13 00:04:52<br>tags: javascript<br>—​​​​</p><h6 id="最近一则微博引发热议，阮的网站被ddos攻击"><a href="#最近一则微博引发热议，阮的网站被ddos攻击" class="headerlink" title="最近一则微博引发热议，阮的网站被ddos攻击"></a>最近一则微博引发热议，阮的网站被ddos攻击</h6><blockquote><p><a href="https://weibo.com/1967949210/GfR1K88HO?filter=hot&amp;root_comment_id=0&amp;type=comment" target="_blank" rel="noopener">微博链接</a></p></blockquote><h6 id="看评论，推测面试的很多前端都是用的这个数组快排版本"><a href="#看评论，推测面试的很多前端都是用的这个数组快排版本" class="headerlink" title="看评论，推测面试的很多前端都是用的这个数组快排版本"></a>看评论，推测面试的很多前端都是用的这个数组快排版本</h6><a id="more"></a><h4 id="先来一个热热身：-数组去重"><a href="#先来一个热热身：-数组去重" class="headerlink" title="先来一个热热身： 数组去重"></a>先来一个热热身： 数组去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=&quot;javascript&quot;&gt;</span><br><span class="line">//从一个给定的数组arr中,随机返回num个不重复项</span><br><span class="line">function getArrayItems(arr, num) &#123;</span><br><span class="line">    //新建一个数组,将传入的数组复制过来,用于运算,而不要直接操作传入的数组;</span><br><span class="line">    var temp_array = new Array();</span><br><span class="line">    for (var index in arr) &#123;</span><br><span class="line">        temp_array.push(arr[index]);</span><br><span class="line">    &#125;</span><br><span class="line">    //取出的数值项,保存在此数组</span><br><span class="line">    var return_array = new Array();</span><br><span class="line">    for (var i = 0; i&lt;num; i++) &#123;</span><br><span class="line">        //判断如果数组还有可以取出的元素,以防下标越界</span><br><span class="line">        if (temp_array.length&gt;0) &#123;</span><br><span class="line">            //在数组中产生一个随机索引</span><br><span class="line">            var arrIndex = Math.floor(Math.random()*temp_array.length);</span><br><span class="line">            //将此随机索引的对应的数组元素值复制出来</span><br><span class="line">            return_array[i] = temp_array[arrIndex];</span><br><span class="line">            //然后删掉此索引的数组元素,这时候temp_array变为新的数组</span><br><span class="line">            temp_array.splice(arrIndex, 1);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //数组中数据项取完后,退出循环,比如数组本来只有10项,但要求取出20项.</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return return_array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//测试</span><br><span class="line">var ArrList=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,</span><br><span class="line">19,20,21,22,23,24,25,26,27,28,29,30,31,32,33];</span><br><span class="line">alert(getArrayItems(ArrList,6));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="使用快速排序的思想并实现一个快排（阮的版本）"><a href="#使用快速排序的思想并实现一个快排（阮的版本）" class="headerlink" title="使用快速排序的思想并实现一个快排（阮的版本）"></a>使用快速排序的思想并实现一个快排（阮的版本）</h4><p>“快速排序”的思想很简单，整个排序过程只需要三步：</p><p>（1）在数据集之中，找一个基准点<br>（2）建立两个数组，分别存储左边和右边的数组<br>（3）利用递归进行下次比较<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function quickSort(arr)&#123;</span><br><span class="line">    if(arr.length&lt;=1)&#123;</span><br><span class="line">        return arr;//如果数组只有一个数，就直接返回；</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var num = Math.floor(arr.length/2);//找到中间数的索引值，如果是浮点数，则向下取整</span><br><span class="line"></span><br><span class="line">    var numValue = arr.splice(num,1);//找到中间数的值</span><br><span class="line">    var left = [];</span><br><span class="line">    var right = [];</span><br><span class="line"></span><br><span class="line">    for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">        if(arr[i]&lt;numValue)&#123;</span><br><span class="line">            left.push(arr[i]);//基准点的左边的数传到左边数组</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">           right.push(arr[i]);//基准点的右边的数传到右边数组</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return quickSort(left).concat([numValue],quickSort(right));//递归不断重复比较</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(quickSort([32,45,37,16,2,87]));//弹出“2,16,32,37,45,87”</span><br></pre></td></tr></table></figure></p><h5 id="相比splice开两个临时数组，增加时间空间复杂度，直接操作数组下标更有效率"><a href="#相比splice开两个临时数组，增加时间空间复杂度，直接操作数组下标更有效率" class="headerlink" title="相比splice开两个临时数组，增加时间空间复杂度，直接操作数组下标更有效率"></a>相比splice开两个临时数组，增加时间空间复杂度，直接操作数组下标更有效率</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function (array) &#123;</span><br><span class="line">    //var array = [8,4,6,2,7,9,3,5,74,5]; </span><br><span class="line">    //var array =[0,1,2,44,4,324,5,65,6,6,34,4,5,6,2,43,5,6,62,43,5,1,4,51,56,76,7,7,2,1,45,4,6,7]; </span><br><span class="line">    var i = 0;</span><br><span class="line">    var j = array.length - 1;</span><br><span class="line">    var Sort = function (i, j) &#123;</span><br><span class="line">        // 结束条件 </span><br><span class="line">        if (i == j) &#123; return &#125;; var key = array[i]; var tempi = i;</span><br><span class="line">        // 记录开始位置 var tempj = j; // 记录结束位置 </span><br><span class="line">        while (j &gt; i) &#123;</span><br><span class="line">            // j &lt;&lt;-------------- 向前查找 </span><br><span class="line">            if (array[j] &gt;= key) &#123; j--; &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                array[i] = array[j] //i++ ------------&gt;&gt;向后查找 </span><br><span class="line">                while (j &gt; ++i) &#123;</span><br><span class="line">                    if (array[i] &gt; key) &#123;</span><br><span class="line">                        array[j] = array[i]; break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; // 如果第一个取出的 key 是最小的数 </span><br><span class="line">        if (tempi == i) &#123;</span><br><span class="line">            Sort(++i, tempj); return;</span><br><span class="line">        &#125;</span><br><span class="line">        // 最后一个空位留给 </span><br><span class="line">        key array[i] = key;</span><br><span class="line">        // 递归 Sort(tempi, i); </span><br><span class="line">        Sort(j, tempj);</span><br><span class="line">    &#125; Sort(i, j);</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.nczonline.net/blog/2012/11/27/computer-science-in-javascript-quicksort/" target="_blank" rel="noopener">详细步骤及原理请参考</a></p><h4 id="想想还是冒泡排序最朴-效-实-率-无-低-华-下"><a href="#想想还是冒泡排序最朴-效-实-率-无-低-华-下" class="headerlink" title="想想还是冒泡排序最朴(效)实(率)无(低)华(下)"></a>想想还是冒泡排序最朴(效)实(率)无(低)华(下)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var array = [1,4,-8,-3,6,12,9,8];</span><br><span class="line">function sort(arr)&#123;</span><br><span class="line">    for(var j=0;j&lt;arr.length-1;j++)&#123;</span><br><span class="line">    //两两比较，如果前一个比后一个大，则交换位置。</span><br><span class="line">       for(var i=0;i&lt;arr.length-1-j;i++)&#123;</span><br><span class="line">            if(arr[i]&gt;arr[i+1])&#123;</span><br><span class="line">                var temp = arr[i];</span><br><span class="line">                arr[i] = arr[i+1];</span><br><span class="line">                arr[i+1] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(array);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: js数组排序&lt;br&gt;date: 2018-05-13 00:04:52&lt;br&gt;tags: javascript&lt;br&gt;—​​​​&lt;/p&gt;
&lt;h6 id=&quot;最近一则微博引发热议，阮的网站被ddos攻击&quot;&gt;&lt;a href=&quot;#最近一则微博引发热议，阮的网站被ddos攻击&quot; class=&quot;headerlink&quot; title=&quot;最近一则微博引发热议，阮的网站被ddos攻击&quot;&gt;&lt;/a&gt;最近一则微博引发热议，阮的网站被ddos攻击&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://weibo.com/1967949210/GfR1K88HO?filter=hot&amp;amp;root_comment_id=0&amp;amp;type=comment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微博链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;看评论，推测面试的很多前端都是用的这个数组快排版本&quot;&gt;&lt;a href=&quot;#看评论，推测面试的很多前端都是用的这个数组快排版本&quot; class=&quot;headerlink&quot; title=&quot;看评论，推测面试的很多前端都是用的这个数组快排版本&quot;&gt;&lt;/a&gt;看评论，推测面试的很多前端都是用的这个数组快排版本&lt;/h6&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>图片格式</title>
    <link href="http://yoursite.com/2018/05/13/%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/05/13/图片格式/</id>
    <published>2018-05-12T16:07:43.000Z</published>
    <updated>2018-05-15T12:16:02.838Z</updated>
    
    <content type="html"><![CDATA[<h6 id="项目中gif-jpg-png-到底用什么图片格式？虽然有ui给图拿来即用，那他们的区别优势都是什么呢，网上搜罗一些资料，简单记录一下"><a href="#项目中gif-jpg-png-到底用什么图片格式？虽然有ui给图拿来即用，那他们的区别优势都是什么呢，网上搜罗一些资料，简单记录一下" class="headerlink" title="项目中gif jpg png 到底用什么图片格式？虽然有ui给图拿来即用，那他们的区别优势都是什么呢，网上搜罗一些资料，简单记录一下"></a>项目中gif jpg png 到底用什么图片格式？虽然有ui给图拿来即用，那他们的区别优势都是什么呢，网上搜罗一些资料，简单记录一下</h6><a id="more"></a><h2 id="Gif格式特点"><a href="#Gif格式特点" class="headerlink" title="Gif格式特点:"></a>Gif格式特点:</h2><pre><code>透明性,Gif是一种布尔透明类型，既它可以是全透明，也可以是全不透明，但是它并没有半透明（alpha透明）。动画,Gif这种格式支持动画。无损耗性,Gif是一种无损耗的图像格式，这也意味着你可以对gif图片做任何操作也不会使得图像质量产生损耗。</code></pre><p>水平扫描,Gif是使用了一种叫作LZW的算法进行压缩的，当压缩gif的过程中，像素是由上到下水平压缩的，这也意味着同等条件下，横向的gif图片比竖向的gif图片更加小。例如500<em>10的图片比10</em>500的图片更加小<br>间隔渐进显示,Gif支持可选择性的间隔渐进显示<br>由以上特点看出只有256种颜色的gif图片不适合照片，但它适合对颜色要求不高的图形（比如说图标，图表等），它并不是最优的选择，我们会在后面中看到png是最优的选择。</p><h2 id="Jpeg（jpg）格式特点"><a href="#Jpeg（jpg）格式特点" class="headerlink" title="Jpeg（jpg）格式特点:"></a>Jpeg（jpg）格式特点:</h2><pre><code>透明性,它并不支持透明。动画,它也不支持动画。</code></pre><p>损耗性,除了一些比如说旋转（仅仅是90、180、270度旋转），裁切，从标准类型到先进类型，编辑图片的原数据之外，所有其它操作对jpeg图像的处理都会使得它的质量损失。所以我们在编辑过程一般用png作为过渡格式。<br>隔行渐进显示,它支持隔行渐进显示（但是ie浏览器并不支持这个属性，但是ie会在整个图像信息完全到达的时候显示）。<br>由上可以看出Jpeg是最适web上面的摄影图片和数字照相机中。</p><h2 id="Png格式特点"><a href="#Png格式特点" class="headerlink" title="Png格式特点:"></a>Png格式特点:</h2><p>类型,Png这种图片格式包括了许多子类，但是在实践中大致可以分为256色的png和全色的png，你完成可以用256色的png代替gif，用全色的png代替jpeg<br>透明性,Png是完全支持alpha透明的（透明，半透明，不透明），尽管有两个怪异的现象在ie6（下面详细讨论）<br>动画,它不支持动画<br>PNG图片格式现在包含三种类型：</p><p>PNG8256色PNG的别名<br>PNG24全色PNG的别名<br>PNG32全色PNG的别名<br>　　基本上PNG32就是PNG24，但是附带了全alpha通道。就是说每个像素上不仅存储了24位真色彩信息还存储了8位的alpha通道信息，就如同GIF能存储透明和不透明信息一样。当我们把图片放到不太搭配的背景上的时候，透明PNG图片的边缘会显示得更加平滑。<br>　　当然，我也知道你的想法，“但是Photoshop也能生成带透明通道的PNG图片！”我也知道，它只是表面上这么说是PNG24，让我也产生困惑了。<br>　　作为一个伤感的Fireworks倡导者，我只使用PNG32支持附带alpha通道的真色彩图片。不管怎样，如果你习惯使用Photoshop，你就应该知道，Photoshop在“存储为WEB格式”中只提供PNG8和PNG24两种PNG格式。<br>　　我敢肯定你经常会勾选“支持透明”选项，以获得带有透明度的PNG图片，但是这样你就获取了一张PNG32图片。——Photoshop只是觉得把PNG32这个名称给隐藏掉了。。。。</p><p>对png8的误解<br>Png8的在ie中的怪异表现：<br>　　半透明的png8在ie6以下的浏览器显示为全透明。<br>Alpha透明的全色PNG（png32）在ie6中会出现背景颜色（通常是灰色）。</p><h2 id="由上面可以总结："><a href="#由上面可以总结：" class="headerlink" title="　　由上面可以总结："></a>　　由上面可以总结：</h2><p>　　（a）全透明的png8可以在任一浏览器正常显示（就像gif一样）。半透明的png8在除了ie6及其以下的浏览器下错误的显示成全透明，其它浏览器都能正常显示半透明。这个bug并不需要特殊对待，因为在不支持半透明的浏览器下只是显示为全透明，对用户体验影响不大，它反而是透明gif的加强版。<br>　　（b）第二个bug没有什么好的方法解决，只能通过影响性能的方法AlphaImageLoader与需要加特殊标签（VML）。<br>　　因此得出结论就是：请使用PNG8。<br>Png8的软件问题：<br>Photoshop只能导出布尔透明的PNG8。<br>Fireworks既能导出布尔透明的PNG8，也能导出alpha透明的PNG8.</p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;项目中gif-jpg-png-到底用什么图片格式？虽然有ui给图拿来即用，那他们的区别优势都是什么呢，网上搜罗一些资料，简单记录一下&quot;&gt;&lt;a href=&quot;#项目中gif-jpg-png-到底用什么图片格式？虽然有ui给图拿来即用，那他们的区别优势都是什么呢，网上搜罗一些资料，简单记录一下&quot; class=&quot;headerlink&quot; title=&quot;项目中gif jpg png 到底用什么图片格式？虽然有ui给图拿来即用，那他们的区别优势都是什么呢，网上搜罗一些资料，简单记录一下&quot;&gt;&lt;/a&gt;项目中gif jpg png 到底用什么图片格式？虽然有ui给图拿来即用，那他们的区别优势都是什么呢，网上搜罗一些资料，简单记录一下&lt;/h6&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>proxyTable解决跨域问题</title>
    <link href="http://yoursite.com/2018/05/13/proxyTable%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/05/13/proxyTable解决跨域问题/</id>
    <published>2018-05-12T16:05:52.000Z</published>
    <updated>2018-05-15T12:14:49.494Z</updated>
    
    <content type="html"><![CDATA[<h6 id="和后端联调时总是会面对恼人的跨域问题，最近基于Vue开发项目时也遇到了这个问题，两边各自想了一堆办法，查了一堆资料，加了一堆参数，最后还得我把自己的localhost映射成上线时将要使用的域名。今天翻看代码时，突然发现vue-cli的config文件里有一个参数叫proxyTable，看这个名字就感觉能解决问题，于是我就去搜了一下，果然。在vuejs-templates，也就是vue-cli的使用的模板插件里，有关于API-proxy的说明，使用的就是这个参数。"><a href="#和后端联调时总是会面对恼人的跨域问题，最近基于Vue开发项目时也遇到了这个问题，两边各自想了一堆办法，查了一堆资料，加了一堆参数，最后还得我把自己的localhost映射成上线时将要使用的域名。今天翻看代码时，突然发现vue-cli的config文件里有一个参数叫proxyTable，看这个名字就感觉能解决问题，于是我就去搜了一下，果然。在vuejs-templates，也就是vue-cli的使用的模板插件里，有关于API-proxy的说明，使用的就是这个参数。" class="headerlink" title="和后端联调时总是会面对恼人的跨域问题，最近基于Vue开发项目时也遇到了这个问题，两边各自想了一堆办法，查了一堆资料，加了一堆参数，最后还得我把自己的localhost映射成上线时将要使用的域名。今天翻看代码时，突然发现vue-cli的config文件里有一个参数叫proxyTable，看这个名字就感觉能解决问题，于是我就去搜了一下，果然。在vuejs-templates，也就是vue-cli的使用的模板插件里，有关于API proxy的说明，使用的就是这个参数。"></a>和后端联调时总是会面对恼人的跨域问题，最近基于Vue开发项目时也遇到了这个问题，两边各自想了一堆办法，查了一堆资料，加了一堆参数，最后还得我把自己的localhost映射成上线时将要使用的域名。今天翻看代码时，突然发现vue-cli的config文件里有一个参数叫proxyTable，看这个名字就感觉能解决问题，于是我就去搜了一下，果然。在vuejs-templates，也就是vue-cli的使用的模板插件里，有关于API proxy的说明，使用的就是这个参数。</h6><a id="more"></a><blockquote><p><a href="https://vuejs-templates.github.io/webpack/proxy.html" target="_blank" rel="noopener">https://vuejs-templates.github.io/webpack/proxy.html</a></p></blockquote><p>这个参数主要是一个地址映射表，你可以通过设置将复杂的url简化，例如我们要请求的地址是</p><p>api.xxxxxxxx.com/list/1 可以按照如下设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">  &apos;/list&apos;: &#123;</span><br><span class="line">    target: &apos;http://api.xxxxxxxx.com&apos;,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      &apos;^/list&apos;: &apos;/list&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们在写url的时候，只用写成/list/1就可以代表api.xxxxxxxx.com/list/1.<br>那么又是如何解决跨域问题的呢？其实在上面的’list’的参数里有一个changeOrigin参数，接收一个布尔值，如果设置为true,那么本地会虚拟一个服务端接收你的请求并代你发送该请求，这样就不会有跨域问题了，当然这只适用于开发环境。增加的代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">  &apos;/list&apos;: &#123;</span><br><span class="line">    target: &apos;http://api.xxxxxxxx.com&apos;,</span><br><span class="line">    changeOrigin: true,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      &apos;^/list&apos;: &apos;/list&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vue-cli的这个设置来自于其使用的插件http-proxy-middleware</p><blockquote><p>github：<a href="https://github.com/chimurai/http-proxy-middleware" target="_blank" rel="noopener">https://github.com/chimurai/http-proxy-middleware</a></p></blockquote><p>深入了解的话可以看该插件配置说明，似乎还支持websocket，很强大的插件。</p><p>API Proxying During Development<br>When integrating this boilerplate with an existing backend, a common need is to access the backend API when using the dev server. To achieve that, we can run the dev server and the API backend side-by-side (or remotely), and let the dev server proxy all API requests to the actual backend.</p><p>To configure the proxy rules, edit dev.proxyTable option in config/index.js. The dev server is using http-proxy-middleware for proxying, so you should refer to its docs for detailed usage. But here’s a simple example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// config/index.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  dev: &#123;</span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">      // proxy all requests starting with /api to jsonplaceholder</span><br><span class="line">      &apos;/api&apos;: &#123;</span><br><span class="line">        target: &apos;http://jsonplaceholder.typicode.com&apos;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          &apos;^/api&apos;: &apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The above example will proxy the request /api/posts/1<br>to <a href="http://jsonplaceholder.typicode.com/posts/1" target="_blank" rel="noopener">http://jsonplaceholder.typicode.com/posts/1</a>.</p></blockquote><blockquote><p>config/index.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// see http://vuejs-templates.github.io/webpack for documentation.</span><br><span class="line">var path = require(&apos;path&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  build: &#123;</span><br><span class="line">    env: require(&apos;./prod.env&apos;),</span><br><span class="line">    index: path.resolve(__dirname, &apos;../dist/index.html&apos;),</span><br><span class="line">    assetsRoot: path.resolve(__dirname, &apos;../dist&apos;),</span><br><span class="line">    assetsSubDirectory: &apos;static&apos;,</span><br><span class="line">    assetsPublicPath: &apos;/&apos;,</span><br><span class="line">    productionSourceMap: true,</span><br><span class="line">    // Gzip off by default as many popular static hosts such as</span><br><span class="line">    // Surge or Netlify already gzip all static assets for you.</span><br><span class="line">    // Before setting to `true`, make sure to:</span><br><span class="line">    // npm install --save-dev compression-webpack-plugin</span><br><span class="line">    productionGzip: false,</span><br><span class="line">    productionGzipExtensions: [&apos;js&apos;, &apos;css&apos;],</span><br><span class="line">    // Run the build command with an extra argument to</span><br><span class="line">    // View the bundle analyzer report after build finishes:</span><br><span class="line">    // `npm run build --report`</span><br><span class="line">    // Set to `true` or `false` to always turn it on or off</span><br><span class="line">    bundleAnalyzerReport: process.env.npm_config_report</span><br><span class="line">  &#125;,</span><br><span class="line">  dev: &#123;</span><br><span class="line">    env: require(&apos;./dev.env&apos;),</span><br><span class="line">    port: 8080,</span><br><span class="line">    autoOpenBrowser: true,</span><br><span class="line">    assetsSubDirectory: &apos;static&apos;,</span><br><span class="line">    assetsPublicPath: &apos;/&apos;,</span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">      &apos;/api/v1&apos;: &#123;</span><br><span class="line">        target: &apos;http://10.88.190.5:9000&apos;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        onProxyReq (proxyReq, req, res) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // CSS Sourcemaps off by default because relative paths are &quot;buggy&quot;</span><br><span class="line">    // with this option, according to the CSS-Loader README</span><br><span class="line">    // (https://github.com/webpack/css-loader#sourcemaps)</span><br><span class="line">    // In our experience, they generally work as expected,</span><br><span class="line">    // just be aware of this issue when enabling this option.</span><br><span class="line">    cssSourceMap: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;和后端联调时总是会面对恼人的跨域问题，最近基于Vue开发项目时也遇到了这个问题，两边各自想了一堆办法，查了一堆资料，加了一堆参数，最后还得我把自己的localhost映射成上线时将要使用的域名。今天翻看代码时，突然发现vue-cli的config文件里有一个参数叫proxyTable，看这个名字就感觉能解决问题，于是我就去搜了一下，果然。在vuejs-templates，也就是vue-cli的使用的模板插件里，有关于API-proxy的说明，使用的就是这个参数。&quot;&gt;&lt;a href=&quot;#和后端联调时总是会面对恼人的跨域问题，最近基于Vue开发项目时也遇到了这个问题，两边各自想了一堆办法，查了一堆资料，加了一堆参数，最后还得我把自己的localhost映射成上线时将要使用的域名。今天翻看代码时，突然发现vue-cli的config文件里有一个参数叫proxyTable，看这个名字就感觉能解决问题，于是我就去搜了一下，果然。在vuejs-templates，也就是vue-cli的使用的模板插件里，有关于API-proxy的说明，使用的就是这个参数。&quot; class=&quot;headerlink&quot; title=&quot;和后端联调时总是会面对恼人的跨域问题，最近基于Vue开发项目时也遇到了这个问题，两边各自想了一堆办法，查了一堆资料，加了一堆参数，最后还得我把自己的localhost映射成上线时将要使用的域名。今天翻看代码时，突然发现vue-cli的config文件里有一个参数叫proxyTable，看这个名字就感觉能解决问题，于是我就去搜了一下，果然。在vuejs-templates，也就是vue-cli的使用的模板插件里，有关于API proxy的说明，使用的就是这个参数。&quot;&gt;&lt;/a&gt;和后端联调时总是会面对恼人的跨域问题，最近基于Vue开发项目时也遇到了这个问题，两边各自想了一堆办法，查了一堆资料，加了一堆参数，最后还得我把自己的localhost映射成上线时将要使用的域名。今天翻看代码时，突然发现vue-cli的config文件里有一个参数叫proxyTable，看这个名字就感觉能解决问题，于是我就去搜了一下，果然。在vuejs-templates，也就是vue-cli的使用的模板插件里，有关于API proxy的说明，使用的就是这个参数。&lt;/h6&gt;
    
    </summary>
    
    
      <category term="javascript vuejs" scheme="http://yoursite.com/tags/javascript-vuejs/"/>
    
  </entry>
  
  <entry>
    <title>git添加ssh密钥</title>
    <link href="http://yoursite.com/2018/05/13/git%E6%B7%BB%E5%8A%A0ssh%E5%AF%86%E9%92%A5/"/>
    <id>http://yoursite.com/2018/05/13/git添加ssh密钥/</id>
    <published>2018-05-12T16:03:27.000Z</published>
    <updated>2018-05-15T14:06:22.789Z</updated>
    
    <content type="html"><![CDATA[<h6 id="秉承能偷懒就偷懒的原则（不想输密码），为你的git仓库添加ssh密钥"><a href="#秉承能偷懒就偷懒的原则（不想输密码），为你的git仓库添加ssh密钥" class="headerlink" title="秉承能偷懒就偷懒的原则（不想输密码），为你的git仓库添加ssh密钥"></a>秉承能偷懒就偷懒的原则（不想输密码），为你的git仓库添加ssh密钥</h6><a id="more"></a><p>1、设置Git的user name和email：(如果是第一次的话)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    $ git config --global user.name &quot;humingx&quot;</span><br><span class="line">$ git config --global user.email &quot;humingx@yeah.net&quot;</span><br></pre></td></tr></table></figure><p>2、生成密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;humingx@yeah.net&quot;</span><br></pre></td></tr></table></figure><p>连续3个回车。如果不需要密码的话。<br>最后得到了两个文件：id_rsa和id_rsa.pub。</p><p>如果不是第一次，就选择overwrite.</p><p>3、添加密钥到ssh-agent<br>确保 ssh-agent 是可用的。ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，其实ssh-agent就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。</p><pre><code># start the ssh-agent in the backgroundeval &quot;$(ssh-agent -s)&quot;Agent pid 59566</code></pre><p>添加生成的 SSH key 到 ssh-agent。</p><pre><code>$ ssh-add ~/.ssh/id_rsa</code></pre><p>4、登陆Github, 添加 ssh 。<br>把id_rsa.pub文件里的内容复制到这里</p><p>5、测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>你将会看到：</p><pre><code>The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?</code></pre><p>选择 yes</p><pre><code>Hi humingx! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p>如果看到Hi后面是你的用户名，就说明成功了。</p><p>6、修改.git文件夹下config中的url。<br>修改前</p><pre><code>[remote &quot;origin&quot;]url = https://github.com/humingx/humingx.github.io.gitfetch = +refs/heads/*:refs/remotes/origin/*</code></pre><p>修改后</p><pre><code>[remote &quot;origin&quot;]url = git@github.com:humingx/humingx.github.io.gitfetch = +refs/heads/*:refs/remotes/origin/*</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;秉承能偷懒就偷懒的原则（不想输密码），为你的git仓库添加ssh密钥&quot;&gt;&lt;a href=&quot;#秉承能偷懒就偷懒的原则（不想输密码），为你的git仓库添加ssh密钥&quot; class=&quot;headerlink&quot; title=&quot;秉承能偷懒就偷懒的原则（不想输密码），为你的git仓库添加ssh密钥&quot;&gt;&lt;/a&gt;秉承能偷懒就偷懒的原则（不想输密码），为你的git仓库添加ssh密钥&lt;/h6&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>sass语法</title>
    <link href="http://yoursite.com/2018/05/13/sass%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/13/sass语法/</id>
    <published>2018-05-12T16:02:19.000Z</published>
    <updated>2018-05-15T12:15:34.398Z</updated>
    
    <content type="html"><![CDATA[<h6 id="用过的都知道，相比css样式表，sass使用更加方便高效（还是因为懒-）"><a href="#用过的都知道，相比css样式表，sass使用更加方便高效（还是因为懒-）" class="headerlink" title="用过的都知道，相比css样式表，sass使用更加方便高效（还是因为懒..）"></a>用过的都知道，相比css样式表，sass使用更加方便高效（还是因为懒..）</h6><a id="more"></a><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>sass中可以定义变量，方便统一修改和维护。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-----------------------------------</span><br><span class="line"></span><br><span class="line">$fontStack:    Helvetica, sans-serif;</span><br><span class="line">$primaryColor: #333;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  font-family: $fontStack;</span><br><span class="line">  color: $primaryColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  font-family: Helvetica, sans-serif;</span><br><span class="line">  color: #333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><p>sass可以进行选择器的嵌套，表示层级关系，看起来很优雅整齐。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-----------------------------------</span><br><span class="line">nav &#123;</span><br><span class="line">  ul &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    list-style: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li &#123; display: inline-block; &#125;</span><br><span class="line"></span><br><span class="line">  a &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    padding: 6px 12px;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line">nav ul &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  list-style: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nav li &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nav a &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 6px 12px;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>sass中如导入其他sass文件，最后编译为一个css文件，优于纯css的@import</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-----------------------------------</span><br><span class="line">// _reset.scss</span><br><span class="line"></span><br><span class="line">html,</span><br><span class="line">body,</span><br><span class="line">ul,</span><br><span class="line">ol &#123;</span><br><span class="line">   margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">//sass style</span><br><span class="line">//-----------------------------------</span><br><span class="line">// base.scss </span><br><span class="line"></span><br><span class="line">@import &apos;reset&apos;;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  font-size: 100% Helvetica, sans-serif;</span><br><span class="line">  background-color: #efefef;</span><br><span class="line">&#125;</span><br><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line">html, body, ul, ol &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  background-color: #efefef;</span><br><span class="line">  font-size: 100% Helvetica, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h4><p>sass中可用mixin定义一些代码片段，且可传参数，方便日后根据需求调用。从此处理css3的前缀兼容轻松便捷。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-----------------------------------</span><br><span class="line">@mixin box-sizing ($sizing) &#123;</span><br><span class="line">    -webkit-box-sizing:$sizing;     </span><br><span class="line">       -moz-box-sizing:$sizing;</span><br><span class="line">            box-sizing:$sizing;</span><br><span class="line">&#125;</span><br><span class="line">.box-border&#123;</span><br><span class="line">    border:1px solid #ccc;</span><br><span class="line">    @include box-sizing(border-box);</span><br><span class="line">&#125;</span><br><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line">.box-border &#123;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  -webkit-box-sizing: border-box;</span><br><span class="line">  -moz-box-sizing: border-box;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩展-继承"><a href="#扩展-继承" class="headerlink" title="扩展/继承"></a>扩展/继承</h4><p>sass可通过@extend来实现代码组合声明，使代码更加优越简洁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-----------------------------------</span><br><span class="line">.message &#123;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  color: #333;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.success &#123;</span><br><span class="line">  @extend .message;</span><br><span class="line">  border-color: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.error &#123;</span><br><span class="line">  @extend .message;</span><br><span class="line">  border-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.warning &#123;</span><br><span class="line">  @extend .message;</span><br><span class="line">  border-color: yellow;</span><br><span class="line">&#125;</span><br><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line">.message, .success, .error, .warning &#123;</span><br><span class="line">  border: 1px solid #cccccc;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  color: #333;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.success &#123;</span><br><span class="line">  border-color: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.error &#123;</span><br><span class="line">  border-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.warning &#123;</span><br><span class="line">  border-color: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><p>sass可进行简单的加减乘除运算等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-----------------------------------</span><br><span class="line">.container &#123; width: 100%; &#125;</span><br><span class="line"></span><br><span class="line">article[role=&quot;main&quot;] &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  width: 600px / 960px * 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aside[role=&quot;complimentary&quot;] &#123;</span><br><span class="line">  float: right;</span><br><span class="line">  width: 300px / 960px * 100%;</span><br><span class="line">&#125;</span><br><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line">.container &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">article[role=&quot;main&quot;] &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  width: 62.5%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aside[role=&quot;complimentary&quot;] &#123;</span><br><span class="line">  float: right;</span><br><span class="line">  width: 31.25%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><p>sass中集成了大量的颜色函数，让变换颜色更加简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-----------------------------------</span><br><span class="line">$linkColor: #08c;</span><br><span class="line">a &#123;</span><br><span class="line">    text-decoration:none;</span><br><span class="line">    color:$linkColor;</span><br><span class="line">    &amp;:hover&#123;</span><br><span class="line">      color:darken($linkColor,10%);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line">a &#123;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  color: #0088cc;</span><br><span class="line">&#125;</span><br><span class="line">a:hover &#123;</span><br><span class="line">  color: #006699;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;用过的都知道，相比css样式表，sass使用更加方便高效（还是因为懒-）&quot;&gt;&lt;a href=&quot;#用过的都知道，相比css样式表，sass使用更加方便高效（还是因为懒-）&quot; class=&quot;headerlink&quot; title=&quot;用过的都知道，相比css样式表，sass使用更加方便高效（还是因为懒..）&quot;&gt;&lt;/a&gt;用过的都知道，相比css样式表，sass使用更加方便高效（还是因为懒..）&lt;/h6&gt;
    
    </summary>
    
    
      <category term="sass css" scheme="http://yoursite.com/tags/sass-css/"/>
    
  </entry>
  
  <entry>
    <title>第一个python程序</title>
    <link href="http://yoursite.com/2018/05/13/%E7%AC%AC%E4%B8%80%E4%B8%AApython%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/05/13/第一个python程序/</id>
    <published>2018-05-12T16:00:13.000Z</published>
    <updated>2018-05-15T12:15:50.014Z</updated>
    
    <content type="html"><![CDATA[<h6 id="Python-是一门简单易学且功能强大的编程语言。-它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。-Python-优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。"><a href="#Python-是一门简单易学且功能强大的编程语言。-它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。-Python-优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。" class="headerlink" title="Python 是一门简单易学且功能强大的编程语言。 它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。 Python 优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。"></a>Python 是一门简单易学且功能强大的编程语言。 它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。 Python 优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。</h6><a id="more"></a><h2 id="Python-快速入门"><a href="#Python-快速入门" class="headerlink" title="Python 快速入门"></a>Python 快速入门</h2><h2 id="一、实验介绍"><a href="#一、实验介绍" class="headerlink" title="一、实验介绍"></a>一、实验介绍</h2><h3 id="1-1-实验内容"><a href="#1-1-实验内容" class="headerlink" title="1.1 实验内容"></a>1.1 实验内容</h3><p>本章介绍Python的基本感概念，Python既可以在交互式解释器中运行也可以在用源代码方式运行，可以用<br><code>help()</code><br> 查看函数或模块的帮助</p><h3 id="1-2-实验知识点"><a href="#1-2-实验知识点" class="headerlink" title="1.2 实验知识点"></a>1.2 实验知识点</h3><ul><li>Python基本概念(数（包含整数、长整数、浮点数和复数），字符串和对象)<h3 id="1-3-实验环境"><a href="#1-3-实验环境" class="headerlink" title="1.3 实验环境"></a>1.3 实验环境</h3></li><li>python2.7</li><li>Xfce终端<h3 id="1-4-适合人群"><a href="#1-4-适合人群" class="headerlink" title="1.4 适合人群"></a>1.4 适合人群</h3>本课程难度为初级，适合没有编程经验的初学者。</li></ul><h2 id="二、实验步骤"><a href="#二、实验步骤" class="headerlink" title="二、实验步骤"></a>二、实验步骤</h2><h3 id="2-1-Python介绍"><a href="#2-1-Python介绍" class="headerlink" title="2.1.Python介绍"></a>2.1.Python介绍</h3><p>Python 是一门简单易学且功能强大的编程语言。 它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。 Python 优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。</p><h3 id="2-2-安装Python"><a href="#2-2-安装Python" class="headerlink" title="2.2 安装Python"></a>2.2 安装Python</h3><p>Linux操作系统已经内置了Python，如果是Windows的话，需要到<a href="https://www.python.org/" target="_blank" rel="noopener">Python官网下载</a>，基本一直点击下一步就可以安装到Win32系统。本实验在Linux下进行，所以无需再安装。现在几乎所有的Linux发行版，都会预装python2.x版本。</p><blockquote><p>请选择python2.7的版本，这个版本是官方在python3.0之前的最后一个版本，用于和最新的3.x过渡的，所以2.7不仅包含了老版本的所有属性，也含有了新版的很多特性，作为入门的话，是非常合适的。</p></blockquote><h3 id="2-3第一个Python程序"><a href="#2-3第一个Python程序" class="headerlink" title="2.3第一个Python程序"></a>2.3第一个Python程序</h3><p>Python编程中由两种方法可以运行你的程序——使用交互式的带提示符的<strong>解释器</strong>或传统的使用<strong>源文件</strong>的方式。</p><p>我们将会使用这两种方式分别输出——“hello, world”</p><h4 id="2-3-1-调用Python交互式解释器"><a href="#2-3-1-调用Python交互式解释器" class="headerlink" title="2.3.1 调用Python交互式解释器"></a>2.3.1 调用Python交互式解释器</h4><p>在Linux命令行的shell提示符下键入python，启动解释器。</p><p>然后输入<code>print ‘hello, world’</code>，然后按Enter键。你应该可以看到输出的单词hello, world。</p><p>Python解释器会在下一行立即给出你输出！你刚才键入的是一句Python 语句 。我们使用print来打印你提供给它的值。这里，我们提供的是字符串’hello, world’，它会被迅速地打印在屏幕上。</p><blockquote><p>如何退出Python提示符</p><p>如果你使用的是Linux，那么按Ctrl+d退出提示符(意思是按住Ctrl键再按d，本课程中出现的组合键都会这样表示)。</p><p>如果是在Windows命令行中，则按Ctrl+z再按Enter。</p><p>有一种更通用的方式，直接输入<code>exit()</code>这个函数，回车之后就会退出。</p></blockquote><p>当输入的程序有错误的时候，解释器将捕获到这个错误，并打印这个错误信息和栈跟踪器。</p><p>以上的错误是因为在print前面多了一个缩进，所以报错提示：<strong>意外出现的缩进</strong></p><p>这里涉及到了Python代码风格的解释，提供一下链接，按需求学习不同的代码风格：</p><p><a href="https://wiki.woodpecker.org.cn/moin/PythonCodingRule" target="_blank" rel="noopener">Python-pep8 官方代码风格指导</a></p><p><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/background/" target="_blank" rel="noopener">Google-python 代码风格指导</a></p><p>如果选择使用pep8风格的话，在linux下有个方便的工具可以对你的python源代码进行格式检查，并提示格式错误在源代码的第几行和错误的原因：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install pep8</span><br></pre></td></tr></table></figure><p>pep8可以直接使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pep8 file.py</span><br></pre></td></tr></table></figure><p>如果<code>file.py</code>有任何违背了pep8格式的地方，都会详细的错误信息都会打印出来，我们可以根据显示的信息去修改我们源代码。</p><h4 id="2-3-2-源文件运行程序"><a href="#2-3-2-源文件运行程序" class="headerlink" title="2.3.2 源文件运行程序"></a>2.3.2 源文件运行程序</h4><p>首先创建一个源文件并用vim打开:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim hello.py</span><br></pre></td></tr></table></figure><p>执行 Python 脚本： BSD 类的 Unix 系统中，Python 脚本可以像 Shell 脚本那样直接执行。只要在脚本文件第一行，指定文件和模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br></pre></td></tr></table></figure><p>源程序编码：默认情况下，Python 源文件是 UTF-8 编码。也可以在 #! 行（首行）后插入至少一行特殊的注释行来定义源文件的编码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#-*- coding: utf-8 -*-</span><br></pre></td></tr></table></figure><p>所以我们最后的源文件是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line"># Filename : hello.py</span><br><span class="line">print &apos;Hello, World&apos;</span><br></pre></td></tr></table></figure><p><code>:wq</code>保存并退出</p><p>运行效果：hello, world</p><p>如果你得到的输出与上面所示的一样，那么恭喜！——你已经成功地运行了你的第一个Python程序。</p><p>万一你得到一个错误，那么请确保你键入的程序准确无误，然后再运行一下程序。注意Python是大小写敏感的，即print与Print不一样——注意前一个是小写p而后一个是大写P。另外，确保在每一行的开始字符前没有空格或者制表符——我们将在后面讨论为什么这点是很重要的。</p><p><strong>它如何工作</strong></p><p>让我们思考一下这个程序的前3行。它们被称作注释——任何在#符号右面的内容都是<strong>注释</strong>。注释主要作为提供给程序读者的笔记。</p><p>Python至少应当有第一行那样的特殊形式的注释。它被称作<strong>组织行</strong>——源文件的头两个字符是#!，后面跟着一个程序。这行告诉你的Linux/Unix系统当你执行你的程序的时候，它应该运行哪个解释器。这会在下一节做详细解释。注意，你总是可以通过在命令行直接指定解释器，从而在任何平台上运行你的程序。就如同命令python hello.py一样。</p><h3 id="2-4-查看帮助"><a href="#2-4-查看帮助" class="headerlink" title="2.4.查看帮助"></a>2.4.查看帮助</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; help(MODULE_NAME)</span><br></pre></td></tr></table></figure><p>将MODULE_NAME替换为需要获得帮助的函数名或模块名即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; help(dir)</span><br></pre></td></tr></table></figure><p>查看dir函数帮助，点击q可以退出</p><h3 id="2-5-可执行的Python程序"><a href="#2-5-可执行的Python程序" class="headerlink" title="2.5 可执行的Python程序"></a>2.5 可执行的Python程序</h3><p>首先我们需要通过chmod命令，给程序可执行的许可，然后运行程序。</p><p>chmod命令用来改变文件的权限，给系统中所有用户对这个源文件的执行许可。然后我们可以直接通过指定源文件的位置来执行程序。我们使用<code>./</code>来指示程序位于当前目录。</p><p>为了更加有趣一些，你可以把你的文件名改成hello（去掉.py后缀），然后运行./hello。这样，这个程序仍然可以工作，因为系统知道它必须用源文件第一行指定的那个解释器来运行程序。</p><p>另外，我们可以直接使用<code>python hello.py</code>运行程序</p><h3 id="2-6-Python基本概念"><a href="#2-6-Python基本概念" class="headerlink" title="2.6 Python基本概念"></a>2.6 Python基本概念</h3><p>仅仅打印”hello, world”是不够的！我们还要做更多的事情——得到一些输入（input），然后做一些操作，再从中得到一些输出（output）。在Python中，我们可以使用常量和变量来完成这些工作。</p><p>我们将用很少的时间，来介绍Python的一些基本概念。</p><h4 id="2-6-1-字面意义上的常量"><a href="#2-6-1-字面意义上的常量" class="headerlink" title="2.6.1 字面意义上的常量"></a>2.6.1 字面意义上的常量</h4><p>一个字面意义上的常量的例子是如同5、1.23、9.25e-3这样的数，或者如同’This is a string’、”It’s a string!”这样的字符串。它们被称作字面意义上的，因为它们具备字面的意义——你按照它们的字面意义使用它们的值。数2总是代表它自己，而不会是别的什么东西——它是一个常量，因为不能改变它的值。因此，所有这些都被称为字面意义上的常量。</p><h4 id="2-6-2-数"><a href="#2-6-2-数" class="headerlink" title="2.6.2 数"></a>2.6.2 数</h4><p>在Python中有4种类型的数 —— 整数、长整数、浮点数和复数。</p><p>一些例子：</p><ol><li>2是一个整数的例子。</li><li>长整数不过是大一些的整数。(10000000000L)</li><li>3.23和52.3E-4是浮点数的例子。E标记表示10的幂。在这里，52.3E-4表示52.3 * 10^-4。(0.00012等价于1.2e-4)</li><li>带有后缀 j 或 J 就被视为虚数。带有非零实部的复数写为 (real+imagj) ，或者可以用 complex(real, imag) 函数创建。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 1j * 1J</span><br><span class="line">(-1+0j)</span><br><span class="line">&gt;&gt;&gt; 1j * complex(0, 1)</span><br><span class="line">(-1+0j)</span><br><span class="line">&gt;&gt;&gt; 3+1j*3</span><br><span class="line">(3+3j)</span><br><span class="line">&gt;&gt;&gt; (3+1j)*3</span><br><span class="line">(9+3j)</span><br><span class="line">&gt;&gt;&gt; (1+2j)/(1+1j)</span><br><span class="line">(1.5+0.5j)</span><br></pre></td></tr></table></figure><h4 id="2-6-3-字符串"><a href="#2-6-3-字符串" class="headerlink" title="2.6.3 字符串"></a>2.6.3 字符串</h4><p>字符串是字符的序列。字符串基本上就是一个个单词组成的语句。</p><p>我几乎可以保证你在每个Python程序中都要用到字符串，所以请特别留心下面这部分的内容。下面告诉你如何在Python中使用字符串。</p><p><strong>使用单引号（’）</strong></p><p>你可以用单引号指示字符串，就如同’Quote me on this’这样。所有的空白，即空格和制表符都照原样保留。</p><p><strong>使用双引号（”）</strong></p><p>在双引号中的字符串与单引号中的字符串的使用完全相同，例如”What’s your name?”。</p><p><strong>使用三引号（’’’或”””, 三个单引号或三个双引号）</strong></p><p>利用三引号，你可以指示一个多行的字符串。你可以在三引号中自由的使用单引号和双引号。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;This is a multi-line string. This is the first line.</span><br><span class="line">This is the second line.</span><br><span class="line">&quot;What&apos;s your name?,&quot; I asked.</span><br><span class="line">He said &quot;Bond, James Bond.&quot;</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><p><strong>转义符</strong></p><p>假设你想要在一个字符串中使用单引号（’），那么你该怎么指示这个字符串？例如，这个字符串是What’s your name?。你肯定不能用<code>‘What’s your name?’</code>来指示它，因为Python会弄不明白这个字符串从何处开始，何处结束。所以，你需要指明单引号而不是字符串的结尾。可以通过转义符来完成这个任务。你用\’来指示单引号——注意这个反斜杠。现在你可以把字符串表示为<code>‘What\‘s your name?’</code>。</p><p>另一个表示这个特别的字符串的方法是<code>‘What’s your name?’</code>，即用双引号。类似地，要在双引号字符串中使用双引号本身的时候，也可以借助于转义符。另外，你可以用转义符<code>\\</code>来指示反斜杠本身。</p><p>值得注意的一件事是，在一个字符串中，行末的单独一个反斜杠表示字符串在下一行继续，而不是开始一个新的行。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;This is the first sentence. \</span><br><span class="line">This is the second sentence.&quot;</span><br><span class="line">等价于&quot;This is the first sentence. This is the second sentence.&quot;</span><br></pre></td></tr></table></figure><p><strong>自然字符串</strong></p><p>如果你想要指示某些不需要如转义符那样的特别处理的字符串，那么你需要指定一个自然字符串。自然字符串通过给字符串加上前缀r或R来指定。例如r”Newlines are indicated by \n”。</p><p>一定要用自然字符串处理正则表达式。否则会需要使用很多的反斜杠。例如，后向引用符可以写成’\1’或r’\1’。</p><p><strong>Unicode字符串</strong></p><p>Unicode是国际文本的标准方法。如果你想要用中文或阿拉伯语等写文本，那么你需要有一个支持Unicode的编辑器。类似地，Python允许你处理Unicode文本——你只需要在字符串前加上前缀u或U。例如，u”This is a Unicode string.”</p><p>记住，在你处理文本文件的时候使用Unicode字符串，特别是当你知道这个文件含有用非英语的语言写的文本。</p><p><strong>按字面意义级联字符串</strong></p><p>如果你把两个字符串按字面意义相邻放着，他们会被Python自动级联。例如，’What\’s’ ‘your name?’会被自动转为”What’s your name?”。</p><p><strong>标识符的命名</strong></p><p>标识符是一个笼统的概念，包括了变量名，函数名，类名，常量名等等。 标识符是用来标识某样东西的名字。在命名标识符的时候，你要遵循这些规则：</p><p>标识符的第一个字符必须是字母表中的字母（大写或小写）或者一个下划线（’ _ ‘）。</p><p>标识符名称的其他部分可以由字母（大写或小写）、下划线（’ _ ‘）或数字（0-9）组成。</p><p>标识符名称是对大小写敏感的。例如，myname和myName不是一个标识符。注意前者中的小写n和后者中的大写N。</p><p>有效标识符名称的例子有i、__my_name、name_23和a1b2_c3。</p><p>无效标识符名称的例子有2things、this is spaced out和my-name。</p><h4 id="2-6-4-对象"><a href="#2-6-4-对象" class="headerlink" title="2.6.4 对象"></a>2.6.4 对象</h4><p>记住，Python把在程序中用到的任何东西都称为对象。这是从广义上说的。因此我们不会说“某某 东西 ”，我们说“某个 对象 ”。</p><p><strong>面向对象编程</strong></p><p>就每一个东西包括数、字符串甚至函数都是对象这一点来说，Python是极其完全地面向对象的。</p><p>我们将看一下如何使用变量和字面意义上的常量。</p><p><strong>如何编写Python程序</strong></p><p>下面是保存和运行Python程序的标准流程。</p><p>打开你最喜欢的编辑器，这里推荐使用vim。<br>输入例子中的程序代码。<br>用注释中给出的文件名把它保存为一个文件，按照惯例把所有的Python程序都以扩展名.py保存，:w var.py。<br>运行解释器命令python var.py或者使用IDLE运行程序。你也可以使用先前介绍的可执行的方法。<br>使用变量和字面意义上的常量</p><p><strong>var.py</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i = 5</span><br><span class="line">print i</span><br><span class="line">i = i + 1</span><br><span class="line">print i</span><br><span class="line"></span><br><span class="line">s = &apos;&apos;&apos;This is a multi-line string.</span><br><span class="line">This is the second line.&apos;&apos;&apos;</span><br><span class="line">print s</span><br></pre></td></tr></table></figure><p>下面来说明一下这个程序如何工作。首先我们使用赋值运算符（=）把一个字面意义上的常数5赋给变量i。这一行称为一个语句。语句声明需要做某件事情，在这个地方我们把变量名i与值5连接在一起。接下来，我们用print语句打印i的值，就是把变量的值打印在屏幕上。</p><p>然后我们对i中存储的值加1，再把它存回i。我们打印它时，得到期望的值6。</p><p>类似地，我们把一个字面意义上的字符串赋给变量s然后打印它。</p><h4 id="2-6-5-缩进"><a href="#2-6-5-缩进" class="headerlink" title="2.6.5 缩进"></a>2.6.5 缩进</h4><p>空白在Python中是重要的。事实上是行首的空白是重要的。它称为缩进。在逻辑行首的空白（空格和制表符）用来决定缩进层次，从而用来决定语句的分组。</p><p>这意味着同一层次的语句必须有相同的缩进。每一组这样的语句称为一个块。我们将在后面的章节中看到有关块的用处的例子。</p><p>你需要记住的一样东西是错误的缩进会引发错误。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = 5</span><br><span class="line"> print &apos;Value is&apos;, i # Error! Notice a single space at the start of the line</span><br><span class="line">print &apos;I repeat, the value is&apos;, i</span><br></pre></td></tr></table></figure><p>当你运行这个程序的时候，你会得到下面的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File &quot;whitespace.py&quot;, line 4</span><br><span class="line">    print &apos;Value is&apos;, i # Error! Notice a single space at the start of the line</span><br><span class="line">    ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>注意，在第二行的行首有一个空格。Python指示的这个错误告诉我们程序的语法是无效的，即程序没有正确地编写。它告诉你，你不能随意地开始新的语句块 （当然除了你一直在使用的主语句块）。何时你能够使用新语句块，将会在后面的章节，如控制流中详细介绍。</p><p>如何缩进</p><p>不要混合使用制表符和空格来缩进，因为这在跨越不同的平台的时候，无法正常工作。强烈建议你在每个缩进层次使用单个制表符或两个或四个空格。选择这三种缩进风格之一。更加重要的是，选择一种风格，然后坚持使用它，即只使用这一种风格。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>Python常用数据类型有字面意义上的常量，数（包含整数、长整数、浮点数和复数），字符串和对象，另外编码过程中要特别注意缩进。</p><p>通过本节实验，了解了python的一些基本用法以及注意事项，希望多加练习，才能更好的掌握python。</p><p>四、参考链接<br>《python官方手册》<a href="http://python.usyiyi.cn/python_278/tutorial/index.html" target="_blank" rel="noopener">http://python.usyiyi.cn/python_278/tutorial/index.html</a></p><p>《简明Python教程》<a href="http://woodpecker.org.cn/abyteofpython_cn/chinese/" target="_blank" rel="noopener">http://woodpecker.org.cn/abyteofpython_cn/chinese/</a></p><p>《Python核心编程(第二版)》</p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;Python-是一门简单易学且功能强大的编程语言。-它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。-Python-优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。&quot;&gt;&lt;a href=&quot;#Python-是一门简单易学且功能强大的编程语言。-它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。-Python-优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。&quot; class=&quot;headerlink&quot; title=&quot;Python 是一门简单易学且功能强大的编程语言。 它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。 Python 优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。&quot;&gt;&lt;/a&gt;Python 是一门简单易学且功能强大的编程语言。 它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。 Python 优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。&lt;/h6&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux操作命令</title>
    <link href="http://yoursite.com/2018/05/12/linux%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/05/12/linux操作命令/</id>
    <published>2018-05-12T15:59:00.000Z</published>
    <updated>2018-05-15T12:15:22.798Z</updated>
    
    <content type="html"><![CDATA[<h6 id="经常需要上传前端代码到服务器，秉承什么都得会一点的原则，Linux能不会吗？没有机器的小伙伴可以到实验楼自行学习…"><a href="#经常需要上传前端代码到服务器，秉承什么都得会一点的原则，Linux能不会吗？没有机器的小伙伴可以到实验楼自行学习…" class="headerlink" title="经常需要上传前端代码到服务器，秉承什么都得会一点的原则，Linux能不会吗？没有机器的小伙伴可以到实验楼自行学习…"></a>经常需要上传前端代码到服务器，秉承什么都得会一点的原则，Linux能不会吗？没有机器的小伙伴可以到实验楼自行学习…</h6><a id="more"></a><h2 id="Linux操作命令（一）"><a href="#Linux操作命令（一）" class="headerlink" title="Linux操作命令（一）"></a>Linux操作命令（一）</h2><h3 id="一、实验介绍"><a href="#一、实验介绍" class="headerlink" title="一、实验介绍"></a>一、实验介绍</h3><h4 id="1-1-实验内容"><a href="#1-1-实验内容" class="headerlink" title="1.1 实验内容"></a>1.1 实验内容</h4><p>本次实验将介绍 Linux 命令中 ls、cd、pwd 命令的用法。</p><h4 id="1-2-实验知识点"><a href="#1-2-实验知识点" class="headerlink" title="1.2 实验知识点"></a>1.2 实验知识点</h4><ul><li>ls 命令</li><li>cd 命令</li><li>pwd 命令<h4 id="1-3-实验环境"><a href="#1-3-实验环境" class="headerlink" title="1.3 实验环境"></a>1.3 实验环境</h4>课程使用的实验环境为 Ubuntu Linux 14.04 64 位版本。实验中会用到程序：</li></ul><p>Xfce终端</p><h3 id="二、实验步骤"><a href="#二、实验步骤" class="headerlink" title="二、实验步骤"></a>二、实验步骤</h3><h4 id="2-1-ls-命令"><a href="#2-1-ls-命令" class="headerlink" title="2.1 ls 命令"></a>2.1 ls 命令</h4><p>ls 命令是 linux 下最常用的命令，ls 命令就是 list 的缩写。</p><p>ls 用来打印出当前目录的清单。如果 ls 指定其他目录，那么就会显示指定目录里的文件及文件夹清单。</p><p>通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。</p><p><strong>（1）命令格式</strong></p><blockquote><p>ls [选项] [目录名]</p></blockquote><p><strong>（2）常用参数</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-a</td><td>–all 列出目录下的所有文件，包括以 . 开头的隐含文件</td></tr><tr><td>-l</td><td>除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</td></tr><tr><td>-d</td><td>–directory 将目录象文件一样显示，而不是显示其下的文件</td></tr><tr><td>-h</td><td>–human-readable 以容易理解的格式列出文件大小 (例如 1K 234M 2G)</td></tr><tr><td>-t</td><td>以文件修改时间排序</td></tr></tbody></table><p><strong>（3）常用范例</strong></p><p><strong>例一</strong>：列出/home 文件夹下的所有文件和目录的详细资料，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -a -l /home </span><br><span class="line">ls -al /home</span><br></pre></td></tr></table></figure><p>上面两个命令执行结果一样，结果如下：</p><p>注意上图，d 表示目录（directory）， - 表示文件，文件和目录显示的颜色也不同。</p><p><strong>例二</strong>：列出当前目录中所有以”i”开头的文件目录的详细内容，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l i*</span><br></pre></td></tr></table></figure><p>例三：以容易理解的格式列出 /home 目录中所有的文件目录的大小，可以使用如下命令：</p><blockquote><p>ls  -alh  /home</p></blockquote><p><strong>（4）思考题</strong></p><p>1.以容易理解的格式列出/home 目录中所有以”i”开头的文件目录的大小。</p><p>2.列出/home 目录中所有以”b”开头的目录。</p><h4 id="2-2-cd-命令"><a href="#2-2-cd-命令" class="headerlink" title="2.2 cd 命令"></a>2.2 cd 命令</h4><p>cd 命令可以说是 Linux 中最基本的命令语句，其他的命令语句要进行操作，都是建立在使用 cd 命令上的。cd 命令是 change directory 的缩写,切换当前目录至指定的目录。</p><p><strong>（1）命令格式</strong></p><blockquote><p>cd [目录名]</p></blockquote><p><strong>（2）常用范例</strong></p><p><strong>例一</strong>：从当前目录进入系统根目录，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd  /</span><br></pre></td></tr></table></figure><p><strong>例二</strong>：从当前目录进入父目录，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>..表示父目录</p><p><strong>例三</strong>：从当前目录进入当前用户主目录，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>~ 表示当前用户主目录，注意与系统根目录不是同一个概念</p><p><strong>例四</strong>：从当前目录进入上次所在目录，可以使用如下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd -</span><br></pre></td></tr></table></figure><p>表示上次进入的目录</p><h4 id="2-3-pwd-命令"><a href="#2-3-pwd-命令" class="headerlink" title="2.3 pwd 命令"></a>2.3 pwd 命令</h4><p>Linux 中用 pwd 命令来查看“当前工作目录”的完整路径。 简单得说，每当你在终端进行操作时，你都会有一个当前工作目录。 在不太确定当前位置时，就会使用 pwd 来判定当前目录在文件系统内的确切位置。</p><p>pwd 命令是 Print Working Directory 的缩写。</p><p><strong>（1）命令格式</strong></p><blockquote><p>pwd [选项]</p></blockquote><p><strong>（2）常用参数</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-P</td><td>显示实际物理路径，而非使用连接（link）路径</td></tr><tr><td>-L</td><td>当目录为连接路径时，显示连接路径</td></tr></tbody></table><p><strong>例一</strong>：显示当前目录所在路径，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><p><strong>例二</strong>：显示当前目录的物理路径，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd -P</span><br></pre></td></tr></table></figure><p><strong>例三</strong>：显示当前目录的连接路径，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd -L</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;经常需要上传前端代码到服务器，秉承什么都得会一点的原则，Linux能不会吗？没有机器的小伙伴可以到实验楼自行学习…&quot;&gt;&lt;a href=&quot;#经常需要上传前端代码到服务器，秉承什么都得会一点的原则，Linux能不会吗？没有机器的小伙伴可以到实验楼自行学习…&quot; class=&quot;headerlink&quot; title=&quot;经常需要上传前端代码到服务器，秉承什么都得会一点的原则，Linux能不会吗？没有机器的小伙伴可以到实验楼自行学习…&quot;&gt;&lt;/a&gt;经常需要上传前端代码到服务器，秉承什么都得会一点的原则，Linux能不会吗？没有机器的小伙伴可以到实验楼自行学习…&lt;/h6&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>快速起步vue-cli</title>
    <link href="http://yoursite.com/2018/05/12/%E5%BF%AB%E9%80%9F%E8%B5%B7%E6%AD%A5vue-cli/"/>
    <id>http://yoursite.com/2018/05/12/快速起步vue-cli/</id>
    <published>2018-05-12T15:57:08.000Z</published>
    <updated>2018-05-15T12:15:55.718Z</updated>
    
    <content type="html"><![CDATA[<h6 id="vue-cli-是一个官方发布-vue-js-项目脚手架，使用-vue-cli-可以快速创建-vue-项目，GitHub地址是："><a href="#vue-cli-是一个官方发布-vue-js-项目脚手架，使用-vue-cli-可以快速创建-vue-项目，GitHub地址是：" class="headerlink" title="vue-cli 是一个官方发布 vue.js 项目脚手架，使用 vue-cli 可以快速创建 vue 项目，GitHub地址是："></a>vue-cli 是一个官方发布 vue.js 项目脚手架，使用 vue-cli 可以快速创建 vue 项目，GitHub地址是：</h6><h5 id="gt-https-github-com-vuejs-vue-cli"><a href="#gt-https-github-com-vuejs-vue-cli" class="headerlink" title="&gt; https://github.com/vuejs/vue-cli"></a>&gt; <a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">https://github.com/vuejs/vue-cli</a></h5><a id="more"></a><h5 id="一、-安装-node-js"><a href="#一、-安装-node-js" class="headerlink" title="一、 安装 node.js"></a>一、 安装 node.js</h5><p>首先需要安装node环境，可以直接到中文官网</p><blockquote><p><a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a></p></blockquote><p>下载安装包。</p><p>只是这样安装的 node 是固定版本的，如果需要多版本的 node，可以使用 nvm 安装</p><blockquote><p><a href="http://blog.csdn.net/s8460049/article/details/52396399" target="_blank" rel="noopener">http://blog.csdn.net/s8460049/article/details/52396399</a></p></blockquote><p>安装完成后，可以命令行工具中输入 node -v 和 npm -v，如果能显示出版本号，就说明安装成功。</p><h5 id="二、安装-vue-cli"><a href="#二、安装-vue-cli" class="headerlink" title="二、安装 vue-cli"></a>二、安装 vue-cli</h5><p>安装好了 node，我们可以直接全局安装 vue-cli：</p><blockquote><p>npm install -g vue-cli</p></blockquote><p>但是这种安装方式比较慢，推荐使用国内镜像来安装，所以我们先设置 cnpm：</p><blockquote><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></blockquote><p>如果安装失败，可以使用 npm cache clean 清理缓存，然后再重新安装。后面的安装过程中，如有安装失败的情况，也需要先清理缓存</p><p>同样可以使用 cnpm -v 查看是否安装成功</p><p>然后使用 cnpm 安装 vue-cli 和 webpack</p><blockquote><p>cnpm install -g vue-cli</p></blockquote><p>最新的 vue 项目模板中，都带有 webpack 插件，所以这里可以不安装 webpack</p><p>安装完成后，可以使用 vue -V （注意 V 大写）查看是否安装成功。</p><blockquote><p>如果提示“无法识别 ‘vue’ ” ，有可能是 npm 版本过低，可以使用 npm install -g npm 来更新版本</p></blockquote><h5 id="三、生成项目"><a href="#三、生成项目" class="headerlink" title="三、生成项目"></a>三、生成项目</h5><p>首先需要在命令行中进入到项目目录，然后输入：</p><blockquote><p>vue init webpack Vue-Project</p></blockquote><p>其中 webpack 是模板名称，可以到 vue.js 的 GitHub 上查看更多的模板</p><blockquote><p><a href="https://github.com/vuejs-templates" target="_blank" rel="noopener">https://github.com/vuejs-templates</a></p></blockquote><p>Vue-Project 是自定义的项目名称，命令执行之后，会在当前目录生成一个以该名称命名的项目文件夹</p><p><img src="http://images2015.cnblogs.com/blog/1059788/201701/1059788-20170106133950378-145408144.png" alt="image"></p><p>配置完成后，可以看到目录下多出了一个项目文件夹，里面就是 vue-cli 创建的一个基于 webpack 的 vue.js 项目</p><p>然后进入项目目录（cd Vue-Project），使用 cnpm 安装依赖</p><blockquote><p>cnpm install</p></blockquote><p>然后启动项目</p><blockquote><p>npm run dev</p></blockquote><p>如果浏览器打开之后，没有加载出页面，有可能是本地的 8080 端口被占用，需要修改一下配置文件</p><blockquote><p>config&gt;index.js</p></blockquote><p> <img src="http://images2015.cnblogs.com/blog/1059788/201701/1059788-20170106135204409-1735535107.png" alt="image"></p><p>建议将端口号改为不常用的端口。另外我还将 build 的路径前缀修改为 ‘ ./ ‘（原本为 ‘ / ‘），是因为打包之后，外部引入 js 和 css 文件时，如果路径以 ‘ / ‘ 开头，在本地是无法找到对应文件的（服务器上没问题）。所以如果需要在本地打开打包后的文件，就得修改文件路径。</p><p>四、打包上线</p><p>自己的项目文件都需要放到 src 文件夹下</p><p>项目开发完成之后，可以输入</p><blockquote><p>npm run build</p></blockquote><p>来进行打包工作</p><p>npm run build<br>打包完成后，会生成 dist 文件夹，如果已经修改了文件路径，可以直接打开本地文件查看</p><p>项目上线时，只需要将 dist 文件夹放到服务器就行了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;vue-cli-是一个官方发布-vue-js-项目脚手架，使用-vue-cli-可以快速创建-vue-项目，GitHub地址是：&quot;&gt;&lt;a href=&quot;#vue-cli-是一个官方发布-vue-js-项目脚手架，使用-vue-cli-可以快速创建-vue-项目，GitHub地址是：&quot; class=&quot;headerlink&quot; title=&quot;vue-cli 是一个官方发布 vue.js 项目脚手架，使用 vue-cli 可以快速创建 vue 项目，GitHub地址是：&quot;&gt;&lt;/a&gt;vue-cli 是一个官方发布 vue.js 项目脚手架，使用 vue-cli 可以快速创建 vue 项目，GitHub地址是：&lt;/h6&gt;&lt;h5 id=&quot;gt-https-github-com-vuejs-vue-cli&quot;&gt;&lt;a href=&quot;#gt-https-github-com-vuejs-vue-cli&quot; class=&quot;headerlink&quot; title=&quot;&amp;gt; https://github.com/vuejs/vue-cli&quot;&gt;&lt;/a&gt;&amp;gt; &lt;a href=&quot;https://github.com/vuejs/vue-cli&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/vuejs/vue-cli&lt;/a&gt;&lt;/h5&gt;
    
    </summary>
    
    
      <category term="javascript vuejs vuecli" scheme="http://yoursite.com/tags/javascript-vuejs-vuecli/"/>
    
  </entry>
  
  <entry>
    <title>vuex</title>
    <link href="http://yoursite.com/2018/05/12/vuex/"/>
    <id>http://yoursite.com/2018/05/12/vuex/</id>
    <published>2018-05-12T15:55:05.000Z</published>
    <updated>2018-05-15T12:14:51.766Z</updated>
    
    <content type="html"><![CDATA[<h6 id="项目组件越做越多，还在为组件间传值烦恼吗-用户信息好多页面都需要绑定数据，怎么操作？用vuex实现组件间的状态管理吧。"><a href="#项目组件越做越多，还在为组件间传值烦恼吗-用户信息好多页面都需要绑定数据，怎么操作？用vuex实现组件间的状态管理吧。" class="headerlink" title="项目组件越做越多，还在为组件间传值烦恼吗? 用户信息好多页面都需要绑定数据，怎么操作？用vuex实现组件间的状态管理吧。"></a>项目组件越做越多，还在为组件间传值烦恼吗? 用户信息好多页面都需要绑定数据，怎么操作？用vuex实现组件间的状态管理吧。</h6><a id="more"></a><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><blockquote><p>Vuex 使用单一状态树——是的，用一个对象就包含了全部的应用层级状态。</p></blockquote><blockquote><p>由于 Vuex 的状态存储是响应式的，从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态</p></blockquote><p>通过在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到。让我们更新下 Counter 的实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Counter = &#123;</span><br><span class="line">  template: `&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      return this.$store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h4><p>有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; id: 1, text: &apos;...&apos;, done: true &#125;,</span><br><span class="line">      &#123; id: 2, text: &apos;...&apos;, done: false &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos: state =&gt; &#123;</span><br><span class="line">      return state.todos.filter(todo =&gt; todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们可以很容易地在任何组件中使用它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  doneTodosCount () &#123;</span><br><span class="line">    return this.$store.getters.doneTodosCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      // 变更状态</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.commit(&apos;increment&apos;)</span><br></pre></td></tr></table></figure><h5 id="对象风格的提交方式"><a href="#对象风格的提交方式" class="headerlink" title="对象风格的提交方式"></a>对象风格的提交方式</h5><p>提交 mutation 的另一种方式是直接使用包含 type 属性的对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">store.commit(&#123;</span><br><span class="line">  type: &apos;increment&apos;,</span><br><span class="line">  amount: 10</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当使用对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 handler 保持不变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>Action 类似于 mutation，不同在于：</p><ol><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ol><p>让我们来注册一个简单的 action：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit(&apos;increment&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="分发-Action"><a href="#分发-Action" class="headerlink" title="分发 Action"></a>分发 Action</h5><p>Action 通过 store.dispatch 方法触发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(&apos;increment&apos;)</span><br></pre></td></tr></table></figure><p>参考api ：<a href="https://vuex.vuejs.org/zh-cn/api.html" target="_blank" rel="noopener">https://vuex.vuejs.org/zh-cn/api.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;项目组件越做越多，还在为组件间传值烦恼吗-用户信息好多页面都需要绑定数据，怎么操作？用vuex实现组件间的状态管理吧。&quot;&gt;&lt;a href=&quot;#项目组件越做越多，还在为组件间传值烦恼吗-用户信息好多页面都需要绑定数据，怎么操作？用vuex实现组件间的状态管理吧。&quot; class=&quot;headerlink&quot; title=&quot;项目组件越做越多，还在为组件间传值烦恼吗? 用户信息好多页面都需要绑定数据，怎么操作？用vuex实现组件间的状态管理吧。&quot;&gt;&lt;/a&gt;项目组件越做越多，还在为组件间传值烦恼吗? 用户信息好多页面都需要绑定数据，怎么操作？用vuex实现组件间的状态管理吧。&lt;/h6&gt;
    
    </summary>
    
    
      <category term="javascript vuejs" scheme="http://yoursite.com/tags/javascript-vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Android控件实现透明度</title>
    <link href="http://yoursite.com/2018/05/12/Android%E6%8E%A7%E4%BB%B6%E5%AE%9E%E7%8E%B0%E9%80%8F%E6%98%8E%E5%BA%A6/"/>
    <id>http://yoursite.com/2018/05/12/Android控件实现透明度/</id>
    <published>2018-05-12T15:53:46.000Z</published>
    <updated>2018-05-15T12:14:33.015Z</updated>
    
    <content type="html"><![CDATA[<h6 id="CSS3可以通过OPCITY实现元素透明度从-0-0（完全透明）到-1-0（完全不透明），那么ANDROID控件如何实现透明效果呢？"><a href="#CSS3可以通过OPCITY实现元素透明度从-0-0（完全透明）到-1-0（完全不透明），那么ANDROID控件如何实现透明效果呢？" class="headerlink" title="CSS3可以通过OPCITY实现元素透明度从 0.0（完全透明）到 1.0（完全不透明），那么ANDROID控件如何实现透明效果呢？"></a>CSS3可以通过OPCITY实现元素透明度从 0.0（完全透明）到 1.0（完全不透明），那么ANDROID控件如何实现透明效果呢？</h6><a id="more"></a><p>（1）java代码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text = (TextView) findViewById(R.id.text);</span><br><span class="line">text.getBackground().setAlpha(12);</span><br></pre></td></tr></table></figure><h6 id="setAlpha-的括号中可以填0–255之间的数字。数字越大，越不透明。"><a href="#setAlpha-的括号中可以填0–255之间的数字。数字越大，越不透明。" class="headerlink" title="setAlpha()的括号中可以填0–255之间的数字。数字越大，越不透明。"></a>setAlpha()的括号中可以填0–255之间的数字。数字越大，越不透明。</h6><blockquote><p>注意点：在5.0以上系统时，有些机型会出现莫名其妙的颜色值不起作用，变成透明了，也就是用此方法会导致其他共用一个资源的布局（例如：@color/white）透明度也跟着改变。<br>比如text用上述方法设置成透明后，项目中，其他用到text颜色值的控件，都变成透明了。 </p></blockquote><hr><blockquote><p>原因：在布局中多个控件同时使用一个资源的时候，这些控件会共用一个状态，例如ColorState，如果你改变了一个控件的状态，其他的控件都会接收到相同的通知。这时我们可以使用mutate()方法使该控件状态不定，这样不定状态的控件就不会共享自己的状态了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text.getBackground().mutate().setAlpha(12);</span><br></pre></td></tr></table></figure><p>( 2 ) 在xml布局中进行设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:id=&quot;@+id/text&quot;</span><br><span class="line">    android:text=&quot;Hello World!&quot;</span><br><span class="line">    android:background=&quot;#987654&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:alpha=&quot;0.5&quot;</span><br><span class="line">    android:layout_height=&quot;100dp&quot; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:alpha的值为0~1之间的数。数字越大，越不透明。1表示完全不透明，0表示完全透明。</span><br></pre></td></tr></table></figure><p>(3)在xml布局中通过android:background设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">        android:id=&quot;@+id/text&quot;</span><br><span class="line">        android:text=&quot;Hello World!&quot;</span><br><span class="line">        android:background=&quot;#80987654&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;100dp&quot; /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>颜色和不透明度 (alpha) 值以十六进制表示法表示。任何一种颜色的值范围都是 0 到 255(00 到 ff)。对于 alpha，00 表示完全透明，ff 表示完全不透明。android:background的值的格式为”#AARRGGBB”。AA即透明度，R、G、B是红绿蓝三色。每一位均为0–F的十六位数。其中透明度的数值越大，越不透明。因此这里如果想设置透明度为50%的白色的话，可以如上设置。（1）java代码实现：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text = (TextView) findViewById(R.id.text);</span><br><span class="line">text.getBackground().setAlpha(12);</span><br></pre></td></tr></table></figure><h6 id="setAlpha-的括号中可以填0–255之间的数字。数字越大，越不透明。-1"><a href="#setAlpha-的括号中可以填0–255之间的数字。数字越大，越不透明。-1" class="headerlink" title="setAlpha()的括号中可以填0–255之间的数字。数字越大，越不透明。"></a>setAlpha()的括号中可以填0–255之间的数字。数字越大，越不透明。</h6><blockquote><p>注意点：在5.0以上系统时，有些机型会出现莫名其妙的颜色值不起作用，变成透明了，也就是用此方法会导致其他共用一个资源的布局（例如：@color/white）透明度也跟着改变。<br>比如text用上述方法设置成透明后，项目中，其他用到text颜色值的控件，都变成透明了。 </p></blockquote><hr><blockquote><p>原因：在布局中多个控件同时使用一个资源的时候，这些控件会共用一个状态，例如ColorState，如果你改变了一个控件的状态，其他的控件都会接收到相同的通知。这时我们可以使用mutate()方法使该控件状态不定，这样不定状态的控件就不会共享自己的状态了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text.getBackground().mutate().setAlpha(12);</span><br></pre></td></tr></table></figure><p>( 2 ) 在xml布局中进行设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:id=&quot;@+id/text&quot;</span><br><span class="line">    android:text=&quot;Hello World!&quot;</span><br><span class="line">    android:background=&quot;#987654&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:alpha=&quot;0.5&quot;</span><br><span class="line">    android:layout_height=&quot;100dp&quot; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:alpha的值为0~1之间的数。数字越大，越不透明。1表示完全不透明，0表示完全透明。</span><br></pre></td></tr></table></figure><p>(3)在xml布局中通过android:background设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">        android:id=&quot;@+id/text&quot;</span><br><span class="line">        android:text=&quot;Hello World!&quot;</span><br><span class="line">        android:background=&quot;#80987654&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;100dp&quot; /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>颜色和不透明度 (alpha) 值以十六进制表示法表示。任何一种颜色的值范围都是 0 到 255(00 到 ff)。对于 alpha，00 表示完全透明，ff 表示完全不透明。android:background的值的格式为”#AARRGGBB”。AA即透明度，R、G、B是红绿蓝三色。每一位均为0–F的十六位数。其中透明度的数值越大，越不透明。因此这里如果想设置透明度为50%的白色的话，可以如上设置。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;CSS3可以通过OPCITY实现元素透明度从-0-0（完全透明）到-1-0（完全不透明），那么ANDROID控件如何实现透明效果呢？&quot;&gt;&lt;a href=&quot;#CSS3可以通过OPCITY实现元素透明度从-0-0（完全透明）到-1-0（完全不透明），那么ANDROID控件如何实现透明效果呢？&quot; class=&quot;headerlink&quot; title=&quot;CSS3可以通过OPCITY实现元素透明度从 0.0（完全透明）到 1.0（完全不透明），那么ANDROID控件如何实现透明效果呢？&quot;&gt;&lt;/a&gt;CSS3可以通过OPCITY实现元素透明度从 0.0（完全透明）到 1.0（完全不透明），那么ANDROID控件如何实现透明效果呢？&lt;/h6&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android中的px dpi sp</title>
    <link href="http://yoursite.com/2018/05/12/Start-a-new-day/"/>
    <id>http://yoursite.com/2018/05/12/Start-a-new-day/</id>
    <published>2018-05-12T02:44:55.000Z</published>
    <updated>2018-05-15T12:14:54.566Z</updated>
    
    <content type="html"><![CDATA[<h6 id="Android系统中，默认的单位是像素-px-。也就是说，在没有明确说明的情况下，所有的大小设置都是以像素为单位。"><a href="#Android系统中，默认的单位是像素-px-。也就是说，在没有明确说明的情况下，所有的大小设置都是以像素为单位。" class="headerlink" title="Android系统中，默认的单位是像素(px)。也就是说，在没有明确说明的情况下，所有的大小设置都是以像素为单位。"></a>Android系统中，默认的单位是像素(px)。也就是说，在没有明确说明的情况下，所有的大小设置都是以像素为单位。</h6><h5 id="如果以像素设置大小，会导致不同分辨率下出现不同的效果。那么，如何将应用中所有大小的单位都设置为’dp’呢？"><a href="#如果以像素设置大小，会导致不同分辨率下出现不同的效果。那么，如何将应用中所有大小的单位都设置为’dp’呢？" class="headerlink" title="如果以像素设置大小，会导致不同分辨率下出现不同的效果。那么，如何将应用中所有大小的单位都设置为’dp’呢？"></a>如果以像素设置大小，会导致不同分辨率下出现不同的效果。那么，如何将应用中所有大小的单位都设置为’dp’呢？</h5><h5 id="实际上TextView-setTextSize-重载了根据单位设置大小的方法。"><a href="#实际上TextView-setTextSize-重载了根据单位设置大小的方法。" class="headerlink" title="实际上TextView.setTextSize()重载了根据单位设置大小的方法。"></a>实际上TextView.setTextSize()重载了根据单位设置大小的方法。</h5><a id="more"></a><p>实现方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line"> * 获取当前分辨率下指定单位对应的像素大小（根据设备信息） </span><br><span class="line"> * px,dip,sp -&gt; px </span><br><span class="line"> *  </span><br><span class="line"> * Paint.setTextSize()单位为px </span><br><span class="line"> *  </span><br><span class="line"> * 代码摘自：TextView.setTextSize() </span><br><span class="line"> *  </span><br><span class="line"> * @param unit  TypedValue.COMPLEX_UNIT_* </span><br><span class="line"> * @param size </span><br><span class="line"> * @return </span><br><span class="line"> */  </span><br><span class="line">public float getRawSize(int unit, float size) &#123;  </span><br><span class="line">       Context c = getContext();  </span><br><span class="line">       Resources r;  </span><br><span class="line">  </span><br><span class="line">       if (c == null)  </span><br><span class="line">           r = Resources.getSystem();  </span><br><span class="line">       else  </span><br><span class="line">           r = c.getResources();  </span><br><span class="line">          </span><br><span class="line">       return TypedValue.applyDimension(unit, size, r.getDisplayMetrics());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是网友提供的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line">* 根据手机的分辨率从 dp 的单位 转成为 px(像素) </span><br><span class="line">*/  </span><br><span class="line">public static int dip2px(Context context, float dpValue) &#123;  </span><br><span class="line">  final float scale = context.getResources().getDisplayMetrics().density;  </span><br><span class="line">  return (int) (dpValue * scale + 0.5f);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">/** </span><br><span class="line">* 根据手机的分辨率从 px(像素) 的单位 转成为 dp </span><br><span class="line">*/  </span><br><span class="line">public static int px2dip(Context context, float pxValue) &#123;  </span><br><span class="line">  final float scale = context.getResources().getDisplayMetrics().density;  </span><br><span class="line">  return (int) (pxValue / scale + 0.5f);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Android使用BitmapFactory.Options获取图片文件类型（mime）</p><p>Android系统中在读取图片时可通过BitmapFactory.Options的outMimeType来直接读取其图片类型。如果要知道一个文件的类型，最好方式是直接读取文件头信息，可查看Android中Java根据文件头获取文件类型。</p><p>参考代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BitmapFactory.Options opts = new BitmapFactory.Options();  </span><br><span class="line">opts.inJustDecodeBounds = true; //确保图片不加载到内存  </span><br><span class="line">BitmapFactory.decodeResource(getResources(), R.drawable.a, opts);  </span><br><span class="line">System.out.println(opts.outMimeType);</span><br></pre></td></tr></table></figure><p>Android系统的“程序异常退出”，给应用的用户体验造成不良影响。为了捕获应用运行时异常并给出友好提示，便可继承UncaughtExceptionHandler类来处理。通过Thread.setDefaultUncaughtExceptionHandler()方法将异常处理类设置到线程上即可。</p><p>1、异常处理类，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public class CrashHandler implements UncaughtExceptionHandler &#123;  </span><br><span class="line">    public static final String TAG = &quot;CrashHandler&quot;;  </span><br><span class="line">    private static CrashHandler INSTANCE = new CrashHandler();  </span><br><span class="line">    private Context mContext;  </span><br><span class="line">    private Thread.UncaughtExceptionHandler mDefaultHandler;  </span><br><span class="line">  </span><br><span class="line">    private CrashHandler() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public static CrashHandler getInstance() &#123;  </span><br><span class="line">        return INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void init(Context ctx) &#123;  </span><br><span class="line">        mContext = ctx;  </span><br><span class="line">        mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();  </span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(this);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public void uncaughtException(Thread thread, Throwable ex) &#123;  </span><br><span class="line">        // if (!handleException(ex) &amp;&amp; mDefaultHandler != null) &#123;  </span><br><span class="line">        // mDefaultHandler.uncaughtException(thread, ex);  </span><br><span class="line">        // &#125; else &#123;  </span><br><span class="line">        // android.os.Process.killProcess(android.os.Process.myPid());  </span><br><span class="line">        // System.exit(10);  </span><br><span class="line">        // &#125;  </span><br><span class="line">        System.out.println(&quot;uncaughtException&quot;);  </span><br><span class="line">  </span><br><span class="line">        new Thread() &#123;  </span><br><span class="line">            @Override  </span><br><span class="line">            public void run() &#123;  </span><br><span class="line">                Looper.prepare();  </span><br><span class="line">                new AlertDialog.Builder(mContext).setTitle(&quot;提示&quot;).setCancelable(false)  </span><br><span class="line">                        .setMessage(&quot;程序崩溃了...&quot;).setNeutralButton(&quot;我知道了&quot;, new OnClickListener() &#123;  </span><br><span class="line">                            @Override  </span><br><span class="line">                            public void onClick(DialogInterface dialog, int which) &#123;  </span><br><span class="line">                                System.exit(0);  </span><br><span class="line">                            &#125;  </span><br><span class="line">                        &#125;)  </span><br><span class="line">                        .create().show();  </span><br><span class="line">                Looper.loop();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;.start();  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line">     * 自定义错误处理,收集错误信息 发送错误报告等操作均在此完成. 开发者可以根据自己的情况来自定义异常处理逻辑 </span><br><span class="line">     *  </span><br><span class="line">     * @param ex </span><br><span class="line">     * @return true:如果处理了该异常信息;否则返回false </span><br><span class="line">     */  </span><br><span class="line">    private boolean handleException(Throwable ex) &#123;  </span><br><span class="line">        if (ex == null) &#123;  </span><br><span class="line">            return true;  </span><br><span class="line">        &#125;  </span><br><span class="line">        // new Handler(Looper.getMainLooper()).post(new Runnable() &#123;  </span><br><span class="line">        // @Override  </span><br><span class="line">        // public void run() &#123;  </span><br><span class="line">        // new AlertDialog.Builder(mContext).setTitle(&quot;提示&quot;)  </span><br><span class="line">        // .setMessage(&quot;程序崩溃了...&quot;).setNeutralButton(&quot;我知道了&quot;, null)  </span><br><span class="line">        // .create().show();  </span><br><span class="line">        // &#125;  </span><br><span class="line">        // &#125;);  </span><br><span class="line">  </span><br><span class="line">        return true;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、线程绑定异常处理类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class CrashHandlerActivity extends Activity &#123;  </span><br><span class="line">    /** Called when the activity is first created. */  </span><br><span class="line">    @Override  </span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">        super.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.main);  </span><br><span class="line">        CrashHandler crashHandler = CrashHandler.getInstance();    </span><br><span class="line">        crashHandler.init(this);  //传入参数必须为Activity，否则AlertDialog将不显示。  </span><br><span class="line">        // 创建错误  </span><br><span class="line">        throw new NullPointerException();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TextView属性android:ellipsize实现跑马灯效果<br>Android系统中TextView实现跑马灯效果，必须具备以下几个条件：</p><ol><li>android:ellipsize=”marquee”</li><li>TextView必须单行显示，即内容必须超出TextView大小</li><li>TextView要获得焦点才能滚动</li></ol><p>XML代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android:ellipsize=&quot;marquee&quot;, android:singleLine=&quot;true&quot;   </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">mTVText.setText(&quot;哼唱接撒砥砺风节雷锋精神http://orgcent.com/，很长很长很长很长很长很长的数据&quot;);  </span><br><span class="line">mTVText.setSingleLine(true);  </span><br><span class="line">mTVText.setEllipsize(TruncateAt.MARQUEE);   </span><br><span class="line"> </span><br><span class="line">mTVText.setText(&quot;哼唱接撒砥砺风节雷锋精神http://orgcent.com/，很长很长很长很长很长很长的数据&quot;);</span><br><span class="line">mTVText.setSingleLine(true);</span><br><span class="line">mTVText.setEllipsize(TruncateAt.MARQUEE);</span><br><span class="line">PS: TextView.setHorizontallyScrolling(true); //让文字可以水平滑动</span><br></pre></td></tr></table></figure><p>TextView还可以设置跑马灯效果的滚动次数，如下：<br>XML代码设置：</p><p>android:marqueerepeatlimit=”1”。1代表1次，-1代表无限循环。   </p><p>mTVText.setMarqueeRepeatLimit(-1);   </p><p>Android闹钟程序周期循环提醒源码(AlarmManager)</p><p>Android系统提供了AlarmManager类来管理闹钟定时提醒任务。通过AlarmManager实现定时提醒及定时循环提醒。那么，AlarmManager类可以应用到以下场景：</p><ol><li>定时循环启动组件（Component，如Activity、BroadcastReceiver），这样能替代在后台启动Service进行定时提醒任务</li><li>实现闹钟的按小时、天、周等形式的定时循环提醒功能。</li></ol><p>定时启动组件很简单，下面贴出闹钟按天、周形式的定时循环提醒功能的核心代码。此功能核心的是计算出下一次闹钟提醒时间，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line"> * 闹钟三种设置模式（dateMode）： </span><br><span class="line"> * 1、DATE_MODE_FIX：指定日期，如20120301   , 参数dateValue格式：2012-03-01 </span><br><span class="line"> * 2、DATE_MODE_WEEK：按星期提醒，如星期一、星期三 ,  参数dateValue格式：1,3 </span><br><span class="line"> * 3、DATE_MODE_MONTH：按月提醒，如3月2、3号，4月2、3号,  参数dateValue格式：3,4|2,3 </span><br><span class="line"> *   </span><br><span class="line"> * startTime:为当天开始时间，如上午9点, 参数格式为09:00 </span><br><span class="line"> */  </span><br><span class="line">public static long getNextAlarmTime(int dateMode, String dateValue,  </span><br><span class="line">        String startTime) &#123;  </span><br><span class="line">    final SimpleDateFormat fmt = new SimpleDateFormat();  </span><br><span class="line">    final Calendar c = Calendar.getInstance();  </span><br><span class="line">    final long now = System.currentTimeMillis();  </span><br><span class="line">  </span><br><span class="line">    // 设置开始时间  </span><br><span class="line">    try &#123;  </span><br><span class="line">        if(Task.DATE_MODE_FIX == dateMode) &#123;  </span><br><span class="line">            fmt.applyPattern(&quot;yyyy-MM-dd&quot;);  </span><br><span class="line">            Date d = fmt.parse(dateValue);  </span><br><span class="line">            c.setTimeInMillis(d.getTime());  </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        fmt.applyPattern(&quot;HH:mm&quot;);  </span><br><span class="line">        Date d = fmt.parse(startTime);  </span><br><span class="line">        c.set(Calendar.HOUR_OF_DAY, d.getHours());  </span><br><span class="line">        c.set(Calendar.MINUTE, d.getMinutes());  </span><br><span class="line">        c.set(Calendar.SECOND, 0);  </span><br><span class="line">        c.set(Calendar.MILLISECOND, 0);  </span><br><span class="line">    &#125; catch (Exception e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    long nextTime = 0;  </span><br><span class="line">    if (Task.DATE_MODE_FIX == dateMode) &#123; // 按指定日期  </span><br><span class="line">        nextTime = c.getTimeInMillis();  </span><br><span class="line">        // 指定日期已过  </span><br><span class="line">        if (now &gt;= nextTime) nextTime = 0;  </span><br><span class="line">    &#125; else if (Task.DATE_MODE_WEEK == dateMode) &#123; // 按周  </span><br><span class="line">        final long[] checkedWeeks = parseDateWeeks(dateValue);  </span><br><span class="line">        if (null != checkedWeeks) &#123;  </span><br><span class="line">            for (long week : checkedWeeks) &#123;  </span><br><span class="line">                c.set(Calendar.DAY_OF_WEEK, (int) (week + 1));  </span><br><span class="line">  </span><br><span class="line">                long triggerAtTime = c.getTimeInMillis();  </span><br><span class="line">                if (triggerAtTime &lt;= now) &#123; // 下周  </span><br><span class="line">                    triggerAtTime += AlarmManager.INTERVAL_DAY * 7;  </span><br><span class="line">                &#125;  </span><br><span class="line">                // 保存最近闹钟时间  </span><br><span class="line">                if (0 == nextTime) &#123;  </span><br><span class="line">                    nextTime = triggerAtTime;  </span><br><span class="line">                &#125; else &#123;  </span><br><span class="line">                    nextTime = Math.min(triggerAtTime, nextTime);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; else if (Task.DATE_MODE_MONTH == dateMode) &#123; // 按月  </span><br><span class="line">        final long[][] items = parseDateMonthsAndDays(dateValue);  </span><br><span class="line">        final long[] checkedMonths = items[0];  </span><br><span class="line">        final long[] checkedDays = items[1];  </span><br><span class="line">  </span><br><span class="line">        if (null != checkedDays &amp;&amp; null != checkedMonths) &#123;  </span><br><span class="line">            boolean isAdd = false;  </span><br><span class="line">            for (long month : checkedMonths) &#123;  </span><br><span class="line">                c.set(Calendar.MONTH, (int) (month - 1));  </span><br><span class="line">                for (long day : checkedDays) &#123;  </span><br><span class="line">                    c.set(Calendar.DAY_OF_MONTH, (int) day);  </span><br><span class="line">  </span><br><span class="line">                    long triggerAtTime = c.getTimeInMillis();  </span><br><span class="line">                    if (triggerAtTime &lt;= now) &#123; // 下一年  </span><br><span class="line">                        c.add(Calendar.YEAR, 1);  </span><br><span class="line">                        triggerAtTime = c.getTimeInMillis();  </span><br><span class="line">                        isAdd = true;  </span><br><span class="line">                    &#125; else &#123;  </span><br><span class="line">                        isAdd = false;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    if (isAdd) &#123;  </span><br><span class="line">                        c.add(Calendar.YEAR, -1);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    // 保存最近闹钟时间  </span><br><span class="line">                    if (0 == nextTime) &#123;  </span><br><span class="line">                        nextTime = triggerAtTime;  </span><br><span class="line">                    &#125; else &#123;  </span><br><span class="line">                        nextTime = Math.min(triggerAtTime, nextTime);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return nextTime;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">public static long[] parseDateWeeks(String value) &#123;  </span><br><span class="line">    long[] weeks = null;  </span><br><span class="line">    try &#123;  </span><br><span class="line">        final String[] items = value.split(&quot;,&quot;);  </span><br><span class="line">        weeks = new long[items.length];  </span><br><span class="line">        int i = 0;  </span><br><span class="line">        for (String s : items) &#123;  </span><br><span class="line">            weeks[i++] = Long.valueOf(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; catch (Exception e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">    return weeks;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">public static long[][] parseDateMonthsAndDays(String value) &#123;  </span><br><span class="line">    long[][] values = new long[2][];  </span><br><span class="line">    try &#123;  </span><br><span class="line">        final String[] items = value.split(&quot;\\|&quot;);  </span><br><span class="line">        final String[] monthStrs = items[0].split(&quot;,&quot;);  </span><br><span class="line">        final String[] dayStrs = items[1].split(&quot;,&quot;);  </span><br><span class="line">        values[0] = new long[monthStrs.length];  </span><br><span class="line">        values[1] = new long[dayStrs.length];  </span><br><span class="line">  </span><br><span class="line">        int i = 0;  </span><br><span class="line">        for (String s : monthStrs) &#123;  </span><br><span class="line">            values[0][i++] = Long.valueOf(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">        i = 0;  </span><br><span class="line">        for (String s : dayStrs) &#123;  </span><br><span class="line">            values[1][i++] = Long.valueOf(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; catch (Exception e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">    return values;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、异常处理类，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BitmapFactory.Options opts = new BitmapFactory.Options();</span><br><span class="line">opts.inJustDecodeBounds = true; //确保图片不加载到内存</span><br><span class="line">BitmapFactory.decodeResource(getResources(), R.drawable.a, opts);</span><br><span class="line">System.out.println(opts.outMimeType);</span><br></pre></td></tr></table></figure><p>Android系统中，默认的单位是像素(px)。也就是说，在没有明确说明的情况下，所有的大小设置都是以像素为单位。</p><p>如果以像素设置大小，会导致不同分辨率下出现不同的效果。那么，如何将应用中所有大小的单位都设置为’dp’呢？<br>实际上TextView.setTextSize()重载了根据单位设置大小的方法。</p><p>实现方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line"> * 获取当前分辨率下指定单位对应的像素大小（根据设备信息） </span><br><span class="line"> * px,dip,sp -&gt; px </span><br><span class="line"> *  </span><br><span class="line"> * Paint.setTextSize()单位为px </span><br><span class="line"> *  </span><br><span class="line"> * 代码摘自：TextView.setTextSize() </span><br><span class="line"> *  </span><br><span class="line"> * @param unit  TypedValue.COMPLEX_UNIT_* </span><br><span class="line"> * @param size </span><br><span class="line"> * @return </span><br><span class="line"> */  </span><br><span class="line">public float getRawSize(int unit, float size) &#123;  </span><br><span class="line">       Context c = getContext();  </span><br><span class="line">       Resources r;  </span><br><span class="line">  </span><br><span class="line">       if (c == null)  </span><br><span class="line">           r = Resources.getSystem();  </span><br><span class="line">       else  </span><br><span class="line">           r = c.getResources();  </span><br><span class="line">          </span><br><span class="line">       return TypedValue.applyDimension(unit, size, r.getDisplayMetrics());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是网友提供的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line">* 根据手机的分辨率从 dp 的单位 转成为 px(像素) </span><br><span class="line">*/  </span><br><span class="line">public static int dip2px(Context context, float dpValue) &#123;  </span><br><span class="line">  final float scale = context.getResources().getDisplayMetrics().density;  </span><br><span class="line">  return (int) (dpValue * scale + 0.5f);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">/** </span><br><span class="line">* 根据手机的分辨率从 px(像素) 的单位 转成为 dp </span><br><span class="line">*/  </span><br><span class="line">public static int px2dip(Context context, float pxValue) &#123;  </span><br><span class="line">  final float scale = context.getResources().getDisplayMetrics().density;  </span><br><span class="line">  return (int) (pxValue / scale + 0.5f);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Android使用BitmapFactory.Options获取图片文件类型（mime）</p><p>Android系统中在读取图片时可通过BitmapFactory.Options的outMimeType来直接读取其图片类型。如果要知道一个文件的类型，最好方式是直接读取文件头信息，可查看Android中Java根据文件头获取文件类型。</p><p>参考代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BitmapFactory.Options opts = new BitmapFactory.Options();  </span><br><span class="line">opts.inJustDecodeBounds = true; //确保图片不加载到内存  </span><br><span class="line">BitmapFactory.decodeResource(getResources(), R.drawable.a, opts);  </span><br><span class="line">System.out.println(opts.outMimeType);</span><br></pre></td></tr></table></figure><p>Android系统的“程序异常退出”，给应用的用户体验造成不良影响。为了捕获应用运行时异常并给出友好提示，便可继承UncaughtExceptionHandler类来处理。通过Thread.setDefaultUncaughtExceptionHandler()方法将异常处理类设置到线程上即可。</p><p>1、异常处理类，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public class CrashHandler implements UncaughtExceptionHandler &#123;  </span><br><span class="line">    public static final String TAG = &quot;CrashHandler&quot;;  </span><br><span class="line">    private static CrashHandler INSTANCE = new CrashHandler();  </span><br><span class="line">    private Context mContext;  </span><br><span class="line">    private Thread.UncaughtExceptionHandler mDefaultHandler;  </span><br><span class="line">  </span><br><span class="line">    private CrashHandler() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public static CrashHandler getInstance() &#123;  </span><br><span class="line">        return INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void init(Context ctx) &#123;  </span><br><span class="line">        mContext = ctx;  </span><br><span class="line">        mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();  </span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(this);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public void uncaughtException(Thread thread, Throwable ex) &#123;  </span><br><span class="line">        // if (!handleException(ex) &amp;&amp; mDefaultHandler != null) &#123;  </span><br><span class="line">        // mDefaultHandler.uncaughtException(thread, ex);  </span><br><span class="line">        // &#125; else &#123;  </span><br><span class="line">        // android.os.Process.killProcess(android.os.Process.myPid());  </span><br><span class="line">        // System.exit(10);  </span><br><span class="line">        // &#125;  </span><br><span class="line">        System.out.println(&quot;uncaughtException&quot;);  </span><br><span class="line">  </span><br><span class="line">        new Thread() &#123;  </span><br><span class="line">            @Override  </span><br><span class="line">            public void run() &#123;  </span><br><span class="line">                Looper.prepare();  </span><br><span class="line">                new AlertDialog.Builder(mContext).setTitle(&quot;提示&quot;).setCancelable(false)  </span><br><span class="line">                        .setMessage(&quot;程序崩溃了...&quot;).setNeutralButton(&quot;我知道了&quot;, new OnClickListener() &#123;  </span><br><span class="line">                            @Override  </span><br><span class="line">                            public void onClick(DialogInterface dialog, int which) &#123;  </span><br><span class="line">                                System.exit(0);  </span><br><span class="line">                            &#125;  </span><br><span class="line">                        &#125;)  </span><br><span class="line">                        .create().show();  </span><br><span class="line">                Looper.loop();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;.start();  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line">     * 自定义错误处理,收集错误信息 发送错误报告等操作均在此完成. 开发者可以根据自己的情况来自定义异常处理逻辑 </span><br><span class="line">     *  </span><br><span class="line">     * @param ex </span><br><span class="line">     * @return true:如果处理了该异常信息;否则返回false </span><br><span class="line">     */  </span><br><span class="line">    private boolean handleException(Throwable ex) &#123;  </span><br><span class="line">        if (ex == null) &#123;  </span><br><span class="line">            return true;  </span><br><span class="line">        &#125;  </span><br><span class="line">        // new Handler(Looper.getMainLooper()).post(new Runnable() &#123;  </span><br><span class="line">        // @Override  </span><br><span class="line">        // public void run() &#123;  </span><br><span class="line">        // new AlertDialog.Builder(mContext).setTitle(&quot;提示&quot;)  </span><br><span class="line">        // .setMessage(&quot;程序崩溃了...&quot;).setNeutralButton(&quot;我知道了&quot;, null)  </span><br><span class="line">        // .create().show();  </span><br><span class="line">        // &#125;  </span><br><span class="line">        // &#125;);  </span><br><span class="line">  </span><br><span class="line">        return true;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、线程绑定异常处理类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class CrashHandlerActivity extends Activity &#123;  </span><br><span class="line">    /** Called when the activity is first created. */  </span><br><span class="line">    @Override  </span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">        super.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.main);  </span><br><span class="line">        CrashHandler crashHandler = CrashHandler.getInstance();    </span><br><span class="line">        crashHandler.init(this);  //传入参数必须为Activity，否则AlertDialog将不显示。  </span><br><span class="line">        // 创建错误  </span><br><span class="line">        throw new NullPointerException();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TextView属性android:ellipsize实现跑马灯效果<br>Android系统中TextView实现跑马灯效果，必须具备以下几个条件：</p><ol><li>android:ellipsize=”marquee”</li><li>TextView必须单行显示，即内容必须超出TextView大小</li><li>TextView要获得焦点才能滚动</li></ol><p>XML代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android:ellipsize=&quot;marquee&quot;, android:singleLine=&quot;true&quot;   </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">mTVText.setText(&quot;哼唱接撒砥砺风节雷锋精神http://orgcent.com/，很长很长很长很长很长很长的数据&quot;);  </span><br><span class="line">mTVText.setSingleLine(true);  </span><br><span class="line">mTVText.setEllipsize(TruncateAt.MARQUEE);   </span><br><span class="line"> </span><br><span class="line">mTVText.setText(&quot;哼唱接撒砥砺风节雷锋精神http://orgcent.com/，很长很长很长很长很长很长的数据&quot;);</span><br><span class="line">mTVText.setSingleLine(true);</span><br><span class="line">mTVText.setEllipsize(TruncateAt.MARQUEE);</span><br><span class="line">PS: TextView.setHorizontallyScrolling(true); //让文字可以水平滑动</span><br></pre></td></tr></table></figure><p>TextView还可以设置跑马灯效果的滚动次数，如下：<br>XML代码设置：</p><p>android:marqueerepeatlimit=”1”。1代表1次，-1代表无限循环。   </p><p>mTVText.setMarqueeRepeatLimit(-1);   </p><p>Android闹钟程序周期循环提醒源码(AlarmManager)</p><p>Android系统提供了AlarmManager类来管理闹钟定时提醒任务。通过AlarmManager实现定时提醒及定时循环提醒。那么，AlarmManager类可以应用到以下场景：</p><ol><li>定时循环启动组件（Component，如Activity、BroadcastReceiver），这样能替代在后台启动Service进行定时提醒任务</li><li>实现闹钟的按小时、天、周等形式的定时循环提醒功能。</li></ol><p>定时启动组件很简单，下面贴出闹钟按天、周形式的定时循环提醒功能的核心代码。此功能核心的是计算出下一次闹钟提醒时间，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line"> * 闹钟三种设置模式（dateMode）： </span><br><span class="line"> * 1、DATE_MODE_FIX：指定日期，如20120301   , 参数dateValue格式：2012-03-01 </span><br><span class="line"> * 2、DATE_MODE_WEEK：按星期提醒，如星期一、星期三 ,  参数dateValue格式：1,3 </span><br><span class="line"> * 3、DATE_MODE_MONTH：按月提醒，如3月2、3号，4月2、3号,  参数dateValue格式：3,4|2,3 </span><br><span class="line"> *   </span><br><span class="line"> * startTime:为当天开始时间，如上午9点, 参数格式为09:00 </span><br><span class="line"> */  </span><br><span class="line">public static long getNextAlarmTime(int dateMode, String dateValue,  </span><br><span class="line">        String startTime) &#123;  </span><br><span class="line">    final SimpleDateFormat fmt = new SimpleDateFormat();  </span><br><span class="line">    final Calendar c = Calendar.getInstance();  </span><br><span class="line">    final long now = System.currentTimeMillis();  </span><br><span class="line">  </span><br><span class="line">    // 设置开始时间  </span><br><span class="line">    try &#123;  </span><br><span class="line">        if(Task.DATE_MODE_FIX == dateMode) &#123;  </span><br><span class="line">            fmt.applyPattern(&quot;yyyy-MM-dd&quot;);  </span><br><span class="line">            Date d = fmt.parse(dateValue);  </span><br><span class="line">            c.setTimeInMillis(d.getTime());  </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        fmt.applyPattern(&quot;HH:mm&quot;);  </span><br><span class="line">        Date d = fmt.parse(startTime);  </span><br><span class="line">        c.set(Calendar.HOUR_OF_DAY, d.getHours());  </span><br><span class="line">        c.set(Calendar.MINUTE, d.getMinutes());  </span><br><span class="line">        c.set(Calendar.SECOND, 0);  </span><br><span class="line">        c.set(Calendar.MILLISECOND, 0);  </span><br><span class="line">    &#125; catch (Exception e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    long nextTime = 0;  </span><br><span class="line">    if (Task.DATE_MODE_FIX == dateMode) &#123; // 按指定日期  </span><br><span class="line">        nextTime = c.getTimeInMillis();  </span><br><span class="line">        // 指定日期已过  </span><br><span class="line">        if (now &gt;= nextTime) nextTime = 0;  </span><br><span class="line">    &#125; else if (Task.DATE_MODE_WEEK == dateMode) &#123; // 按周  </span><br><span class="line">        final long[] checkedWeeks = parseDateWeeks(dateValue);  </span><br><span class="line">        if (null != checkedWeeks) &#123;  </span><br><span class="line">            for (long week : checkedWeeks) &#123;  </span><br><span class="line">                c.set(Calendar.DAY_OF_WEEK, (int) (week + 1));  </span><br><span class="line">  </span><br><span class="line">                long triggerAtTime = c.getTimeInMillis();  </span><br><span class="line">                if (triggerAtTime &lt;= now) &#123; // 下周  </span><br><span class="line">                    triggerAtTime += AlarmManager.INTERVAL_DAY * 7;  </span><br><span class="line">                &#125;  </span><br><span class="line">                // 保存最近闹钟时间  </span><br><span class="line">                if (0 == nextTime) &#123;  </span><br><span class="line">                    nextTime = triggerAtTime;  </span><br><span class="line">                &#125; else &#123;  </span><br><span class="line">                    nextTime = Math.min(triggerAtTime, nextTime);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; else if (Task.DATE_MODE_MONTH == dateMode) &#123; // 按月  </span><br><span class="line">        final long[][] items = parseDateMonthsAndDays(dateValue);  </span><br><span class="line">        final long[] checkedMonths = items[0];  </span><br><span class="line">        final long[] checkedDays = items[1];  </span><br><span class="line">  </span><br><span class="line">        if (null != checkedDays &amp;&amp; null != checkedMonths) &#123;  </span><br><span class="line">            boolean isAdd = false;  </span><br><span class="line">            for (long month : checkedMonths) &#123;  </span><br><span class="line">                c.set(Calendar.MONTH, (int) (month - 1));  </span><br><span class="line">                for (long day : checkedDays) &#123;  </span><br><span class="line">                    c.set(Calendar.DAY_OF_MONTH, (int) day);  </span><br><span class="line">  </span><br><span class="line">                    long triggerAtTime = c.getTimeInMillis();  </span><br><span class="line">                    if (triggerAtTime &lt;= now) &#123; // 下一年  </span><br><span class="line">                        c.add(Calendar.YEAR, 1);  </span><br><span class="line">                        triggerAtTime = c.getTimeInMillis();  </span><br><span class="line">                        isAdd = true;  </span><br><span class="line">                    &#125; else &#123;  </span><br><span class="line">                        isAdd = false;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    if (isAdd) &#123;  </span><br><span class="line">                        c.add(Calendar.YEAR, -1);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    // 保存最近闹钟时间  </span><br><span class="line">                    if (0 == nextTime) &#123;  </span><br><span class="line">                        nextTime = triggerAtTime;  </span><br><span class="line">                    &#125; else &#123;  </span><br><span class="line">                        nextTime = Math.min(triggerAtTime, nextTime);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return nextTime;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">public static long[] parseDateWeeks(String value) &#123;  </span><br><span class="line">    long[] weeks = null;  </span><br><span class="line">    try &#123;  </span><br><span class="line">        final String[] items = value.split(&quot;,&quot;);  </span><br><span class="line">        weeks = new long[items.length];  </span><br><span class="line">        int i = 0;  </span><br><span class="line">        for (String s : items) &#123;  </span><br><span class="line">            weeks[i++] = Long.valueOf(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; catch (Exception e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">    return weeks;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">public static long[][] parseDateMonthsAndDays(String value) &#123;  </span><br><span class="line">    long[][] values = new long[2][];  </span><br><span class="line">    try &#123;  </span><br><span class="line">        final String[] items = value.split(&quot;\\|&quot;);  </span><br><span class="line">        final String[] monthStrs = items[0].split(&quot;,&quot;);  </span><br><span class="line">        final String[] dayStrs = items[1].split(&quot;,&quot;);  </span><br><span class="line">        values[0] = new long[monthStrs.length];  </span><br><span class="line">        values[1] = new long[dayStrs.length];  </span><br><span class="line">  </span><br><span class="line">        int i = 0;  </span><br><span class="line">        for (String s : monthStrs) &#123;  </span><br><span class="line">            values[0][i++] = Long.valueOf(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">        i = 0;  </span><br><span class="line">        for (String s : dayStrs) &#123;  </span><br><span class="line">            values[1][i++] = Long.valueOf(s);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; catch (Exception e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">    return values;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、异常处理类，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BitmapFactory.Options opts = new BitmapFactory.Options();</span><br><span class="line">opts.inJustDecodeBounds = true; //确保图片不加载到内存</span><br><span class="line">BitmapFactory.decodeResource(getResources(), R.drawable.a, opts);</span><br><span class="line">System.out.println(opts.outMimeType);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;Android系统中，默认的单位是像素-px-。也就是说，在没有明确说明的情况下，所有的大小设置都是以像素为单位。&quot;&gt;&lt;a href=&quot;#Android系统中，默认的单位是像素-px-。也就是说，在没有明确说明的情况下，所有的大小设置都是以像素为单位。&quot; class=&quot;headerlink&quot; title=&quot;Android系统中，默认的单位是像素(px)。也就是说，在没有明确说明的情况下，所有的大小设置都是以像素为单位。&quot;&gt;&lt;/a&gt;Android系统中，默认的单位是像素(px)。也就是说，在没有明确说明的情况下，所有的大小设置都是以像素为单位。&lt;/h6&gt;&lt;h5 id=&quot;如果以像素设置大小，会导致不同分辨率下出现不同的效果。那么，如何将应用中所有大小的单位都设置为’dp’呢？&quot;&gt;&lt;a href=&quot;#如果以像素设置大小，会导致不同分辨率下出现不同的效果。那么，如何将应用中所有大小的单位都设置为’dp’呢？&quot; class=&quot;headerlink&quot; title=&quot;如果以像素设置大小，会导致不同分辨率下出现不同的效果。那么，如何将应用中所有大小的单位都设置为’dp’呢？&quot;&gt;&lt;/a&gt;如果以像素设置大小，会导致不同分辨率下出现不同的效果。那么，如何将应用中所有大小的单位都设置为’dp’呢？&lt;/h5&gt;&lt;h5 id=&quot;实际上TextView-setTextSize-重载了根据单位设置大小的方法。&quot;&gt;&lt;a href=&quot;#实际上TextView-setTextSize-重载了根据单位设置大小的方法。&quot; class=&quot;headerlink&quot; title=&quot;实际上TextView.setTextSize()重载了根据单位设置大小的方法。&quot;&gt;&lt;/a&gt;实际上TextView.setTextSize()重载了根据单位设置大小的方法。&lt;/h5&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
