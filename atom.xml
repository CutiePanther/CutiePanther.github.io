<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Remain focused</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-27T09:07:55.746Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Grapelet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue中使用echarts</title>
    <link href="http://yoursite.com/2018/08/27/vue%E4%B8%AD%E4%BD%BF%E7%94%A8echarts/"/>
    <id>http://yoursite.com/2018/08/27/vue中使用echarts/</id>
    <published>2018-08-27T07:51:27.000Z</published>
    <updated>2018-08-27T09:07:55.746Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前端数据可视化基础：vue中使用echart制表"><a href="#前端数据可视化基础：vue中使用echart制表" class="headerlink" title="前端数据可视化基础：vue中使用echart制表"></a>前端数据可视化基础：vue中使用echart制表</h4><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1535370692958&amp;di=72307e1b01a749bb43dfe3771d79c358&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.ycu.com.cn%2Fxxcm%2FUpload%2F151537813651.jpg" alt=""><br><a id="more"></a></p><h1 id="vue-cli中直接使用echarts-绘制地图等复杂图表"><a href="#vue-cli中直接使用echarts-绘制地图等复杂图表" class="headerlink" title="vue-cli中直接使用echarts(绘制地图等复杂图表)"></a>vue-cli中直接使用echarts(绘制地图等复杂图表)</h1><h2 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h2><blockquote><p>main.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 引入echarts 然后修改原型链</span><br><span class="line">import echarts from &apos;echarts&apos;</span><br><span class="line"></span><br><span class="line">Vue.prototype.$echarts = echarts</span><br></pre></td></tr></table></figure><blockquote><p>创建容器<br>需要注意图表的容器必须指定宽高，也就是说 width，height 不能使用百分比，只能用 px<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;myChart&quot; style=&quot;width=300px;height=300px;&quot;&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>全局使用,在 mounted 中创建图表</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let myChart = this.$echarts.init(document.getElementById(&apos;myChart&apos;))</span><br><span class="line">myChart.setOption(options)</span><br></pre></td></tr></table></figure><blockquote><p>注意： 这里echarts初始化应在钩子函数mounted()中，这个钩子函数是在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用</p></blockquote><blockquote><p>地图绘制需要加载json文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    initMap () &#123;</span><br><span class="line">      // 缓存this指代data</span><br><span class="line">      let that = this</span><br><span class="line">      let mapCharts = that.$echarts.init(</span><br><span class="line">        document.getElementById(&apos;provinceMap&apos;)</span><br><span class="line">      )</span><br><span class="line">      $.getJSON(that.positionJsonLink, function (geoJson) &#123;</span><br><span class="line">        that.$echarts.registerMap(that.position, geoJson)</span><br><span class="line">        mapCharts.setOption(options)</span><br><span class="line">      &#125;)</span><br><span class="line">      // 地图点击事件</span><br><span class="line">      mapCharts.on(&apos;click&apos;, function (params) &#123;</span><br><span class="line">        for (var i = 0; i &lt; data.length; i++) &#123;&#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>同理初始化在mounted()中</p></blockquote><blockquote><p>jquery引入</p></blockquote><blockquote><p>修改build/webpack.base.conf.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const webpack = require(&apos;webpack&apos;)</span><br><span class="line"></span><br><span class="line">// 在module.exports 添加属性</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  new webpack.ProvidePlugin(&#123;</span><br><span class="line">    jQuery: &quot;jquery&quot;,</span><br><span class="line">    $: &quot;jquery&quot;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>适应容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;myChart&quot; :height=&quot;chartHeight + &apos;px&apos;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  chartHeight () &#123;</span><br><span class="line">    let screen = document.documentElement.offsetWidth</span><br><span class="line">    return screen &gt;= 1920 ? 310 : screen &gt;= 1366 ? 300 : 280</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用-v-charts-基础表格推荐使用此方法"><a href="#使用-v-charts-基础表格推荐使用此方法" class="headerlink" title="使用 v-charts(基础表格推荐使用此方法)"></a>使用 v-charts(基础表格推荐使用此方法)</h1><h2 id="基于vue封装的echarts开源项目v-charts"><a href="#基于vue封装的echarts开源项目v-charts" class="headerlink" title="基于vue封装的echarts开源项目v-charts"></a>基于vue封装的echarts开源项目<a href="https://v-charts.js.org/#/" target="_blank" rel="noopener">v-charts</a></h2><blockquote><p>全局引入</p></blockquote><blockquote><p>可以按照文档使用，也可以直接绑定series</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ve-pie :height=&quot;chartHeight + &apos;px&apos;&quot; :legend-visible=&quot;false&quot; :series=&quot;series&quot;&gt;&lt;/ve-pie&gt;</span><br><span class="line"></span><br><span class="line">// 在series的data中注册series</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><a href="https://v-charts.js.org/#/" target="_blank" rel="noopener">vue封装</a> </p><p><a href="http://echarts.baidu.com/option.html" target="_blank" rel="noopener">echarts文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前端数据可视化基础：vue中使用echart制表&quot;&gt;&lt;a href=&quot;#前端数据可视化基础：vue中使用echart制表&quot; class=&quot;headerlink&quot; title=&quot;前端数据可视化基础：vue中使用echart制表&quot;&gt;&lt;/a&gt;前端数据可视化基础：vue中使用echart制表&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1535370692958&amp;amp;di=72307e1b01a749bb43dfe3771d79c358&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fwww.ycu.com.cn%2Fxxcm%2FUpload%2F151537813651.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="vue echarts" scheme="http://yoursite.com/tags/vue-echarts/"/>
    
  </entry>
  
  <entry>
    <title>plugin libs</title>
    <link href="http://yoursite.com/2018/08/15/plugin-libs/"/>
    <id>http://yoursite.com/2018/08/15/plugin-libs/</id>
    <published>2018-08-15T06:25:30.000Z</published>
    <updated>2018-08-27T07:50:34.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="经常使用的小插件，归类记录-持续跟新"><a href="#经常使用的小插件，归类记录-持续跟新" class="headerlink" title="经常使用的小插件，归类记录, 持续跟新"></a>经常使用的小插件，归类记录, 持续跟新</h3><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1534324827572&amp;di=607874fe95b73dbe7266100d02dd9e97&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.edu-hb.com%2FUpload%2FNewsImg%2F201601%2F29%2F160129230834jdegh.png" alt=""><br><a id="more"></a></p><h1 id="1-为适配屏幕尺寸，将css下的px转为rem"><a href="#1-为适配屏幕尺寸，将css下的px转为rem" class="headerlink" title="1.为适配屏幕尺寸，将css下的px转为rem"></a>1.为适配屏幕尺寸，将css下的px转为rem</h1><h2 id="安装插件-postcss-px2rem"><a href="#安装插件-postcss-px2rem" class="headerlink" title="安装插件 postcss-px2rem"></a>安装插件 postcss-px2rem</h2><p><code>npm install postcss-px2rem --save-dev</code></p><h2 id="配置rem-js"><a href="#配置rem-js" class="headerlink" title="配置rem.js"></a>配置rem.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// rem 适配</span><br><span class="line">const baseSize = 75</span><br><span class="line">function refreshRem () &#123;</span><br><span class="line">  // 当前页面宽度相对于 1920 宽的缩放比例，可根据自己需要修改。</span><br><span class="line">  let wid = document.documentElement.clientWidth || window.innerWidth</span><br><span class="line">  const scale = wid / 1920</span><br><span class="line">  // 设置页面根节点字体大小</span><br><span class="line">  document.documentElement.style.fontSize = (baseSize * Math.min(scale, 2)) + &apos;px&apos;</span><br><span class="line">&#125;</span><br><span class="line">refreshRem()</span><br><span class="line">window.addEventListener(&apos;resize&apos;, function () &#123;</span><br><span class="line">  setTimeout(refreshRem, 300)</span><br><span class="line">&#125;, false)</span><br><span class="line">window.addEventListener(&apos;pageshow&apos;, function (e) &#123;</span><br><span class="line">  if (e.persisted) &#123;</span><br><span class="line">    setTimeout(refreshRem, 300)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, false)</span><br></pre></td></tr></table></figure><h2 id="main-js-引入"><a href="#main-js-引入" class="headerlink" title="main.js 引入"></a>main.js 引入</h2><p><code>import &#39;./libs/rem&#39;</code></p><h2 id="vue-loader-conf-js-配置px2rem"><a href="#vue-loader-conf-js-配置px2rem" class="headerlink" title="vue-loader.conf.js 配置px2rem"></a>vue-loader.conf.js 配置px2rem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const utils = require(&apos;./utils&apos;)</span><br><span class="line">const config = require(&apos;../config&apos;)</span><br><span class="line">const isProduction = process.env.NODE_ENV === &apos;production&apos;</span><br><span class="line">const sourceMapEnabled = isProduction</span><br><span class="line">  ? config.build.productionSourceMap</span><br><span class="line">  : config.dev.cssSourceMap</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  loaders: utils.cssLoaders(&#123;</span><br><span class="line">    sourceMap: sourceMapEnabled,</span><br><span class="line">    extract: isProduction</span><br><span class="line">  &#125;),</span><br><span class="line">  postcss: [</span><br><span class="line">    require(&apos;postcss-px2rem&apos;)(&#123;</span><br><span class="line">      remUnit:75</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  cssSourceMap: sourceMapEnabled,</span><br><span class="line">  cacheBusting: config.dev.cacheBusting,</span><br><span class="line">  transformToRequire: &#123;</span><br><span class="line">    video: [&apos;src&apos;, &apos;poster&apos;],</span><br><span class="line">    source: &apos;src&apos;,</span><br><span class="line">    img: &apos;src&apos;,</span><br><span class="line">    image: &apos;xlink:href&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-判断移动端"><a href="#2-判断移动端" class="headerlink" title="2.判断移动端"></a>2.判断移动端</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &apos;app&apos;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      check () &#123;</span><br><span class="line">        var isMobile = navigator.userAgent.toLowerCase().match(/(ipod|iphone|android|coolpad|mmp|smartphone|midp|wap|xoom|symbian|j2me|blackberry|wince)/i) != null</span><br><span class="line">        if (isMobile) &#123;</span><br><span class="line">          window.location.href = &apos;http://10.88.190.5:3000/#/&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      this.check()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="3-百度统计"><a href="#3-百度统计" class="headerlink" title="3.百度统计"></a>3.百度统计</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  var _hmt = _hmt || [];</span><br><span class="line">  (function() &#123;</span><br><span class="line">    var hm = document.createElement(&quot;script&quot;);</span><br><span class="line">    hm.src = &quot;https://hm.baidu.com/hm.js?2834afb8ffce3f0093179a8cce534df9&quot;;</span><br><span class="line">    var s = document.getElementsByTagName(&quot;script&quot;)[0];</span><br><span class="line">    s.parentNode.insertBefore(hm, s);</span><br><span class="line">  &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// 添加路由拦截统计每一次路由跳转</span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  // this route requires auth, check if logged in</span><br><span class="line">  // if not, redirect to login page.</span><br><span class="line">  // 统计代码</span><br><span class="line">  if (to.path) &#123;</span><br><span class="line">    _hmt.push([&apos;_trackPageview&apos;, &apos;/#&apos; + to.fullPath])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;经常使用的小插件，归类记录-持续跟新&quot;&gt;&lt;a href=&quot;#经常使用的小插件，归类记录-持续跟新&quot; class=&quot;headerlink&quot; title=&quot;经常使用的小插件，归类记录, 持续跟新&quot;&gt;&lt;/a&gt;经常使用的小插件，归类记录, 持续跟新&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1534324827572&amp;amp;di=607874fe95b73dbe7266100d02dd9e97&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fwww.edu-hb.com%2FUpload%2FNewsImg%2F201601%2F29%2F160129230834jdegh.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="plugin" scheme="http://yoursite.com/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>this 解读</title>
    <link href="http://yoursite.com/2018/08/13/this-%E8%A7%A3%E8%AF%BB/"/>
    <id>http://yoursite.com/2018/08/13/this-解读/</id>
    <published>2018-08-13T02:27:25.000Z</published>
    <updated>2018-08-15T02:14:17.741Z</updated>
    
    <content type="html"><![CDATA[<h6 id="you-don’t-know-javascript-理解this指代语法"><a href="#you-don’t-know-javascript-理解this指代语法" class="headerlink" title="you don’t know javascript, 理解this指代语法"></a>you don’t know javascript, 理解this指代语法</h6><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1534309158165&amp;di=f174357c9ef5ec2ff596ad6e12cda42d&amp;imgtype=0&amp;src=http%3A%2F%2Fstatic.open-open.com%2Fnews%2FuploadImg%2F20151112%2F20151112222201_785.jpg" alt=""><br><a id="more"></a></p><h1 id="判定-this"><a href="#判定-this" class="headerlink" title="判定 this"></a>判定 this</h1><p>现在，我们可以按照优先顺序来总结一下从函数调用的调用点来判定 this 的规则了。按照这个顺序来问问题，然后在第一个规则适用的地方停下。</p><ol><li>函数是通过 new 被调用的吗（new 绑定）？如果是，this 就是新构建的对象。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var bar = new foo()</span><br><span class="line">function foo () &#123;</span><br><span class="line">    console.log (this.a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>函数是通过 call 或 apply 被调用（明确绑定），甚至是隐藏在 bind 硬绑定 之中吗？如果是，this 就是那个被明确指定的对象。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var bar = foo.call( obj2 )</span><br></pre></td></tr></table></figure><ol start="3"><li>函数是通过环境对象（也称为拥有者或容器对象）被调用的吗（隐含绑定）？如果是，this 就是那个环境对象。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var bar = obj1.foo()</span><br></pre></td></tr></table></figure><ol start="4"><li>否则，使用默认的 this（默认绑定）。如果在 strict mode 下，就是 undefined，否则是 global 对象。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var bar = foo()</span><br></pre></td></tr></table></figure><h1 id="向-this-绑定故意传递像-null-这样的值"><a href="#向-this-绑定故意传递像-null-这样的值" class="headerlink" title="向 this 绑定故意传递像 null 这样的值"></a>向 this 绑定故意传递像 null 这样的值</h1><p>一个很常见的做法是，使用 apply(..) 来将一个数组散开，从而作为函数调用的参数。相似地，bind(..) 可以柯里化参数（预设值），也可能非常有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function foo(a,b) &#123;</span><br><span class="line">console.log( &quot;a:&quot; + a + &quot;, b:&quot; + b );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 将数组散开作为参数</span><br><span class="line">foo.apply( null, [2, 3] ); // a:2, b:3</span><br><span class="line"></span><br><span class="line">// 用 `bind(..)` 进行柯里化</span><br><span class="line">var bar = foo.bind( null, 2 );</span><br><span class="line">bar( 3 ); // a:2, b:3</span><br></pre></td></tr></table></figure><p>这两种工具都要求第一个参数是 this 绑定。如果目标函数不关心 this，你就需要一个占位值，而且正如这个代码段中展示的，null 看起来是一个合理的选择。</p><blockquote><p> ES6 中有一个扩散操作符：…，它让你无需使用 apply(..) 而在语法上将一个数组“散开”作为参数，比如 foo(…[1,2]) 表示 foo(1,2) —— 如果 this 绑定没有必要，可以在语法上回避它</p></blockquote><p><code>Object.create(null)</code>和 <code>{}</code> 很相似，但是没有指向 <code>Object.prototype</code> 的委托，所以它比 <code>{}</code> “空得更彻底”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function foo(a,b) &#123;</span><br><span class="line">console.log( &quot;a:&quot; + a + &quot;, b:&quot; + b );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 我们的 DMZ 空对象</span><br><span class="line">var ø = Object.create( null );</span><br><span class="line"></span><br><span class="line">// 将数组散开作为参数</span><br><span class="line">foo.apply( ø, [2, 3] ); // a:2, b:3</span><br><span class="line"></span><br><span class="line">// 用 `bind(..)` 进行 currying</span><br><span class="line">var bar = foo.bind( ø, 2 );</span><br><span class="line">bar( 3 ); // a:2, b:3</span><br></pre></td></tr></table></figure><p>不仅在功能上更“安全”，ø 还会在代码风格上产生些好处，它在语义上可能会比 null 更清晰的表达“我想让 this 为空”。</p><h1 id="词法-this"><a href="#词法-this" class="headerlink" title="词法 this"></a>词法 this</h1><p>我们刚刚涵盖了一般函数遵守的四种规则。但是 ES6 引入了一种不适用于这些规则特殊的函数：箭头函数（arrow-function）。</p><p>箭头函数不是通过 function 关键字声明的，而是通过所谓的“大箭头”操作符：<code>=&gt;</code>。与使用四种标准的 this 规则不同的是，箭头函数从封闭它的（函数或全局）作用域采用 this 绑定。</p><p>我们来展示一下箭头函数的词法作用域：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">  // 返回一个箭头函数</span><br><span class="line">return (a) =&gt; &#123;</span><br><span class="line">    // 这里的 `this` 是词法上从 `foo()` 采用的</span><br><span class="line">console.log( this.a );</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj1 = &#123;</span><br><span class="line">a: 2</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var obj2 = &#123;</span><br><span class="line">a: 3</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var bar = foo.call( obj1 );</span><br><span class="line">bar.call( obj2 ); // 2, 不是3!</span><br></pre></td></tr></table></figure><p>在 foo() 中创建的箭头函数在词法上捕获 foo() 被调用时的 this，不管它是什么。因为 foo() 被 this 绑定到 obj1，bar（被返回的箭头函数的一个引用）也将会被 this 绑定到 obj1。一个箭头函数的词法绑定是不能被覆盖的（就连 new 也不行！）。</p><p>最常见的用法是用于回调，比如事件处理器或计时器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">// 这里的 `this` 是词法上从 `foo()` 采用</span><br><span class="line">console.log( this.a );</span><br><span class="line">&#125;,100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">a: 2</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo.call( obj ); // 2词法 this</span><br></pre></td></tr></table></figure><p>虽然箭头函数提供除了使用 <code>bind(..)</code> 外，另外一种在函数上来确保 this 的方式，这看起来很吸引人，但重要的是要注意它们本质是使用广为人知的词法作用域来禁止了传统的 this 机制。在 ES6 之前，为此我们已经有了相当常用的模式，这些模式几乎和 ES6 的箭头函数的精神没有区别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">var self = this; // 词法上捕获 `this`</span><br><span class="line">setTimeout( function()&#123;</span><br><span class="line">console.log( self.a );</span><br><span class="line">&#125;, 100 );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">a: 2</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo.call( obj ); // 2</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>为执行中的函数判定 this 绑定需要找到这个函数的直接调用点。找到之后，四种规则将会以这种优先顺序施用于调用点：</p><ol><li><p>通过 new 调用？使用新构建的对象。</p></li><li><p>通过 call 或 apply（或 bind）调用？使用指定的对象。</p></li><li><p>通过持有调用的环境对象调用？使用那个环境对象。</p></li><li><p>默认：strict mode 下是 undefined，否则就是全局对象。</p></li></ol><p>小心偶然或不经意的 默认绑定 规则调用。如果你想“安全”地忽略 this 绑定，一个像 <code>ø = Object.create(null)</code> 这样的“DMZ”对象是一个很好的占位值，以保护 global 对象不受意外的副作用影响。</p><p>与这四种绑定规则不同，ES6 的箭头方法使用词法作用域来决定 this 绑定，这意味着它们采用封闭他们的函数调用作为 this 绑定（无论它是什么）。它们实质上是 ES6 之前的 <code>self = this</code> 代码的语法替代品。</p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;you-don’t-know-javascript-理解this指代语法&quot;&gt;&lt;a href=&quot;#you-don’t-know-javascript-理解this指代语法&quot; class=&quot;headerlink&quot; title=&quot;you don’t know javascript, 理解this指代语法&quot;&gt;&lt;/a&gt;you don’t know javascript, 理解this指代语法&lt;/h6&gt;&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1534309158165&amp;amp;di=f174357c9ef5ec2ff596ad6e12cda42d&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fstatic.open-open.com%2Fnews%2FuploadImg%2F20151112%2F20151112222201_785.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>css special 2</title>
    <link href="http://yoursite.com/2018/08/13/css-special-2/"/>
    <id>http://yoursite.com/2018/08/13/css-special-2/</id>
    <published>2018-08-13T02:12:42.000Z</published>
    <updated>2018-08-15T06:21:45.867Z</updated>
    
    <content type="html"><![CDATA[<h6 id="css常用属性"><a href="#css常用属性" class="headerlink" title="css常用属性"></a>css常用属性</h6><p><img src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3225363744,4220361311&amp;fm=27&amp;gp=0.jpg" alt=""><br><a id="more"></a></p><h3 id="对于现代浏览器，例如webkit内核的浏览器，或者移动端，是可以实现多行文本内容超出点点点…最后一行显示的，典型的CSS组合如下："><a href="#对于现代浏览器，例如webkit内核的浏览器，或者移动端，是可以实现多行文本内容超出点点点…最后一行显示的，典型的CSS组合如下：" class="headerlink" title="对于现代浏览器，例如webkit内核的浏览器，或者移动端，是可以实现多行文本内容超出点点点…最后一行显示的，典型的CSS组合如下："></a>对于现代浏览器，例如webkit内核的浏览器，或者移动端，是可以实现多行文本内容超出点点点…最后一行显示的，典型的CSS组合如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    display: -webkit-box;</span><br><span class="line">    -webkit-line-clamp: 3;</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中-webkit-line-clamp就是控制行数的，是3就是显示3行，3行结束点点点，如果是2则最多2行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.zxx_text_overflow&#123;</span><br><span class="line">width:27em; </span><br><span class="line">white-space:nowrap; </span><br><span class="line">text-overflow:ellipsis;</span><br><span class="line"> -o-text-overflow:ellipsis; </span><br><span class="line">overflow:hidden;</span><br><span class="line">&#125;</span><br><span class="line"> text-overflow:ellipsis;</span><br><span class="line">``` </span><br><span class="line"> </span><br><span class="line">### outline 移除当选中input元素的时候会出现状态线</span><br><span class="line">&gt; An outline is a line that is drawn around elements (outside the borders) to make the element &quot;stand out&quot;.</span><br><span class="line">包裹elements 的一个线，一般设置成none 。</span><br></pre></td></tr></table></figure><p>div {<br>    outline: none; //一般情况下移除它<br>    // outline: 5px dotted red; 也可以设置样式<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### contenteditable 设置element是否可编辑</span><br><span class="line">`&lt;p contenteditable=&quot;true&quot;&gt;可编辑&lt;/p&gt;`</span><br><span class="line">可以通过input, blur事件来监听element的输入和输入完后鼠标离开。</span><br><span class="line"></span><br><span class="line">### `webkit-playsinline`</span><br><span class="line">手机video 都可以在页面中播放，而不是全屏播放了。</span><br></pre></td></tr></table></figure></p><p><video src="test.mp4" webkit-playsinline="true"></video><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### `position: absolute`</span><br><span class="line">设置left:0, right:0 margin: 0 auto; 就可以。原因是2边都是0不存在边距，element就可以得出距离，并居中。</span><br></pre></td></tr></table></figure></p><p>div {<br>    position: absolute;<br>    left: 0;<br>    right: 0;<br>    margin: 0 auto;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 在浮动元素的父云素上添加class=”clearfix”</span><br><span class="line">使用clearfix 清除浮动，解决父类高度崩塌。</span><br></pre></td></tr></table></figure></p><p>.clearfix {<br>    zoom: 1;<br>}<br>.clearfix:after {<br>     visibility: hidden;<br>     display: block;<br>     font-size: 0;<br>     content: “ “;<br>     clear: both;<br>     height: 0;<br> }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### user-select 禁止用户选中文本</span><br></pre></td></tr></table></figure></p><p>div {<br>    user-select: none; /<em> Standard syntax </em>/<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 清除手机tap事件后element 时候出现的一个高亮</span><br></pre></td></tr></table></figure></p><ul><li>{<br>  -webkit-tap-highlight-color: rgba(0,0,0,0);<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>::-webkit-scrollbar-thumb<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">可以修改浏览器的滚动条样式。IE火狐可能不支持。</span><br><span class="line"></span><br><span class="line">### `-webkit-appearance:none`</span><br><span class="line">To apply platform specific styling to an element that doesn&apos;t have it by default</span><br><span class="line">To remove platform specific styling to an element that does have it by default</span><br><span class="line">移除浏览器默认的样式，比如chrome的input默认样式，然后就可以定义需要的样式。</span><br></pre></td></tr></table></figure></p><p>input, button, textarea, select {<br>    *font-size: 100%;<br>    -webkit-appearance:none;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### CSS开启硬件加速</span><br></pre></td></tr></table></figure></p><p>/<strong>原理上还是使用3d效果来开启硬件加速</strong>/<br>.speed-up{<br>   -webkit-transform: translateZ(0);<br>   -moz-transform: translateZ(0);<br>   -ms-transform: translateZ(0);<br>   -o-transform: translateZ(0);<br>   transform: translateZ(0);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; https://www.jianshu.com/p/601298f97664</span><br><span class="line"></span><br><span class="line">`-webkit-transform: translateZ(0);`</span><br><span class="line"></span><br><span class="line">### 使用CSS transforms 或者 animations时可能会有页面闪烁的bug</span><br></pre></td></tr></table></figure></p><p>-webkit-backface-visibility: hidden;<br>-webkit-touch-callout 禁止长按链接与图片弹出菜单<br>-webkit-touch-callout: none;<br>transform-style: preserve-3d 让元素支持3d<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>div {<br>    transform: rotateY(60deg);<br>    transform-style: preserve-3d;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## perspective 透视</span><br><span class="line">这个属性的存在决定你看到的元素是2d还是3d。一般设置在包裹元素的父类上。</span><br></pre></td></tr></table></figure></p><p>.div-box {<br>    perspective: 400px;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## css实现不换行、自动换行、强制换行</span><br></pre></td></tr></table></figure></p><p>//不换行<br>white-space:nowrap;</p><p>//自动换行<br>word-wrap: break-word;<br>word-break: normal; </p><p>//强制换行<br>word-break:break-all;<br>box-sizing 让元素的宽度、高度包含border和padding<br>{<br>    box-sizing: border-box;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## css3 linear-gradient 线性渐变</span><br><span class="line">默认开始在top, 也可以自定义方向。</span><br></pre></td></tr></table></figure></p><p>div {<br>    linear-gradient(red, yellow)<br>}</p><p>background: linear-gradient(direction, color-stop1, color-stop2, …);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 常用的选择器 :nth-child() Selector</span><br><span class="line">选择父类下第一个子节点，p元素</span><br></pre></td></tr></table></figure></p><p>p:nth-child(1) {<br>    …<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## -webkit-font-smoothing 字体抗锯齿</span><br><span class="line">使用该属性能让页面上的字体变得清晰，但是也会造成font-weight: bold 加粗变得异常。不信你试试...</span><br></pre></td></tr></table></figure></p><p>div {<br>    -webkit-font-smoothing: antialiased;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## CSS3 filter Property 图片过滤</span><br></pre></td></tr></table></figure></p><p>img {<br>    filter: grayscale(100%); //灰度<br>    filter: blur(5px); //模糊<br>    filter:brightness(200%); //高亮<br>    filter:saturate(8); //饱和<br>    filter:sepia(100%); //怀旧<br>    …<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 使用css创建三角形</span><br></pre></td></tr></table></figure></p><p>div {<br>    border-bottom: 10px solid white;<br>    border-right: 10px solid transparent;<br>    border-left: 10px solid transparent;<br>    height: 0px;<br>    width: 0px;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## clip属性，截取你想要显示的图片</span><br></pre></td></tr></table></figure></p><p>img {<br>    position: absolute;<br>    clip: rect(0px,60px,200px,0px);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## 设置文字，字母间距，很实用 letter-spacing</span><br></pre></td></tr></table></figure></p><p>h1 {<br>    letter-spacing: *px; //也可以是负数<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 图片运动过程中，图片模糊问题</span><br><span class="line">在animation过程中，图片会出现模糊的情况，可以设置如下在图片上面。</span><br><span class="line"></span><br><span class="line">`transform: translate3d(0, 0, 0);`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 使用margin auto</span><br></pre></td></tr></table></figure></p><p>div {<br>  width: 100px;<br>  position: absolute;<br>  right: 0;<br>}</p><p>// 使用margin-left: auto 自动算出做左边宽度，实现内容贴右边<br>div {<br>  width: 100px;<br>  margin-left: auto;<br>}<br><code>`</code></p><h2 id="解决外边距合并"><a href="#解决外边距合并" class="headerlink" title="解决外边距合并"></a>解决外边距合并</h2><p>当不想让元素之间产生重叠，那么可以用一下方法</p><ol><li>外层元素padding代替</li><li>内层元素透明边框 border: 1ox soild transparent</li><li>内层元素绝对定位 position: absolute</li><li>外层元素 overflow: hidden</li><li>内层元素加 float:left 或 display:inline-block</li><li>内层元素padding:1px</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;css常用属性&quot;&gt;&lt;a href=&quot;#css常用属性&quot; class=&quot;headerlink&quot; title=&quot;css常用属性&quot;&gt;&lt;/a&gt;css常用属性&lt;/h6&gt;&lt;p&gt;&lt;img src=&quot;https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3225363744,4220361311&amp;amp;fm=27&amp;amp;gp=0.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css special</title>
    <link href="http://yoursite.com/2018/08/11/css-special/"/>
    <id>http://yoursite.com/2018/08/11/css-special/</id>
    <published>2018-08-11T09:13:07.000Z</published>
    <updated>2018-08-15T02:10:55.268Z</updated>
    
    <content type="html"><![CDATA[<h6 id="一些css效果汇总，持续更新"><a href="#一些css效果汇总，持续更新" class="headerlink" title="一些css效果汇总，持续更新"></a>一些css效果汇总，持续更新</h6><p><img src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3225363744,4220361311&amp;fm=27&amp;gp=0.jpg" alt=""><br><a id="more"></a></p><h1 id="css书写顺序"><a href="#css书写顺序" class="headerlink" title="css书写顺序"></a>css书写顺序</h1><ol><li>位置属性 (position, top, right, z-index, display, float等)　　</li><li>大小 (width, height, padding, margin)　　</li><li>文字系列 (font, line-height, letter-spacing, color- text-align等)　　</li><li>背景 (background, border等)</li><li>其他 (animation, transition等)</li><li>全部小写 或以-分割</li></ol><h1 id="CSS实现曲面阴影效果"><a href="#CSS实现曲面阴影效果" class="headerlink" title="CSS实现曲面阴影效果"></a>CSS实现曲面阴影效果</h1><blockquote><p><a href="https://www.cnblogs.com/youyuekeji/p/5567386.html" target="_blank" rel="noopener">https://www.cnblogs.com/youyuekeji/p/5567386.html</a></p></blockquote><h2 id="曲面"><a href="#曲面" class="headerlink" title="曲面"></a>曲面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.yy&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    box-shadow: 0 1px 4px rgba(0,0,0,0.3), 0 0 40px rgba(0,0,0,0.1) inset;</span><br><span class="line">    -webkit-box-shadow:0 1px 4px rgba(0,0,0,0.3), 0 0 40px rgba(0,0,0,0.1) inset;</span><br><span class="line">    -moz-box-shadow:0 1px 4px rgba(0,0,0,0.3), 0 0 40px rgba(0,0,0,0.1) inset;</span><br><span class="line">    -o-box-shadow: 0 1px 4px rgba(0,0,0,0.3), 0 0 40px rgba(0,0,0,0.1) inset;</span><br><span class="line">&#125;</span><br><span class="line">.yy:after , .yy:before&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    content: &apos;&apos;;</span><br><span class="line">    top: 50%;</span><br><span class="line">    bottom: -1px;</span><br><span class="line">    left: 10px;</span><br><span class="line">   right: 10px;</span><br><span class="line">    background:#fff;</span><br><span class="line">    z-index: -1;</span><br><span class="line">    /* 圆角水平为100px 垂直为10px 必须用‘/’分开 ，不可以为空格 */</span><br><span class="line">    border-radius: 100px/10px;</span><br><span class="line">    box-shadow: 0 0 20px rgba(0,0,0,0.3);</span><br><span class="line">   -webkit-box-shadow: 0 0 20px rgba(0,0,0,0.3);</span><br><span class="line">   -moz-box-shadow: 0 0 20px rgba(0,0,0,0.3);</span><br><span class="line">   -o-box-shadow: 0 0 20px rgba(0,0,0,0.3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="翘边"><a href="#翘边" class="headerlink" title="翘边"></a>翘边</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">.box li&#123;</span><br><span class="line">   position: relative;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 290px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background: #FFFFFF;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    margin-right: 25px;</span><br><span class="line">    box-shadow: 0 0px 4px rgba(0,0,0,0.3) , 0 0 60px rgba(0,0,0,0.1) inset;</span><br><span class="line">    -moz-box-shadow: 0 0px 4px rgba(0,0,0,0.3) , 0 0 60px rgba(0,0,0,0.1) inset;</span><br><span class="line">    -webkit-box-shadow: 0 0px 4px rgba(0,0,0,0.3) , 0 0 60px rgba(0,0,0,0.1) inset;</span><br><span class="line">    -o-box-shadow: 0 0px 4px rgba(0,0,0,0.3) , 0 0 60px rgba(0,0,0,0.1) inset; </span><br><span class="line">&#125;</span><br><span class="line">.box li:before&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    content: &apos;&apos;;</span><br><span class="line">    width: 90%;</span><br><span class="line">    height: 80%;</span><br><span class="line">    left: 18px;</span><br><span class="line">    bottom: 11px;</span><br><span class="line">    z-index: -2;</span><br><span class="line">    background: transparent;</span><br><span class="line">    box-shadow: 0 8px 20px rgba(0,0,0,0.6);</span><br><span class="line">    -moz-box-shadow: 0 8px 20px rgba(0,0,0,0.6);</span><br><span class="line">    -webkit-box-shadow: 0 8px 20px rgba(0,0,0,0.6);</span><br><span class="line">    -o-box-shadow: 0 8px 20px rgba(0,0,0,0.6);</span><br><span class="line">    transform: skew(-12deg) rotate(-5deg);</span><br><span class="line">    -moz-transform: skew(-12deg) rotate(-5deg);</span><br><span class="line">    -webkit-transform: skew(-12deg) rotate(-5deg);</span><br><span class="line">    -o-transform: skew(-12deg) rotate(-5deg); </span><br><span class="line">&#125;</span><br><span class="line">.box li:after&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    content: &apos;&apos;;</span><br><span class="line">    width: 90%;</span><br><span class="line">    height: 80%;</span><br><span class="line">    right: 18px;</span><br><span class="line">    bottom: 11px;</span><br><span class="line">    z-index: -2;</span><br><span class="line">    background: transparent;</span><br><span class="line">    box-shadow: 0 8px 20px rgba(0,0,0,0.6);</span><br><span class="line">    -moz-box-shadow: 0 8px 20px rgba(0,0,0,0.6);</span><br><span class="line">    -webkit-box-shadow: 0 8px 20px rgba(0,0,0,0.6);</span><br><span class="line">    -o-box-shadow: 0 8px 20px rgba(0,0,0,0.6);</span><br><span class="line">    transform: skew(12deg) rotate(5deg);</span><br><span class="line">    -moz-transform: skew(12deg) rotate(5deg);</span><br><span class="line">    -webkit-transform: skew(12deg) rotate(5deg);</span><br><span class="line">    -o-transform: skew(12deg) rotate(5deg); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSS3实现3D转换效果"><a href="#CSS3实现3D转换效果" class="headerlink" title="CSS3实现3D转换效果"></a>CSS3实现3D转换效果</h1><blockquote><p><a href="https://www.cnblogs.com/zheshiyigemanong/p/6793634.html" target="_blank" rel="noopener">https://www.cnblogs.com/zheshiyigemanong/p/6793634.html</a></p></blockquote><p>在父元素上添加透视属性：transform:perspective（500px）;值为透视点到元素的距离</p><h2 id="参考3d魔方"><a href="#参考3d魔方" class="headerlink" title="参考3d魔方"></a>参考3d魔方</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// father element</span><br><span class="line">transform: perspective(800px);</span><br><span class="line">transform-style: preserve-3d;</span><br><span class="line">// child elemnent</span><br><span class="line">transform: rotateY(-30deg);</span><br><span class="line"></span><br><span class="line">-webkit-transform: rotateX(0deg) translateZ(165px);</span><br></pre></td></tr></table></figure><h1 id="text-shadow-文字阴影"><a href="#text-shadow-文字阴影" class="headerlink" title="text-shadow 文字阴影"></a>text-shadow 文字阴影</h1><p><code>text-shadow:3px 6px 13px rgba(7,4,80,0.76);</code><br>四个参数分别为x偏移 y偏移 大小 颜色</p><h2 id="方法一：在box中添加span空元素"><a href="#方法一：在box中添加span空元素" class="headerlink" title="方法一：在box中添加span空元素"></a>方法一：在box中添加span空元素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;img&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;span&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">#box&#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background:black;</span><br><span class="line">  margin:0 auto;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.img&#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background:white;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line">#box span&#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width:0;</span><br><span class="line">  height:100%;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法二：使用定位法："><a href="#方法二：使用定位法：" class="headerlink" title="方法二：使用定位法："></a>方法二：使用定位法：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;img&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">#box&#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background:black;</span><br><span class="line">  margin:0 auto;</span><br><span class="line">  text-align: center;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.img&#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  position: absolute;</span><br><span class="line">  background: white;</span><br><span class="line">  left:50%;</span><br><span class="line">  top:50%;</span><br><span class="line">  margin-top:-50px;</span><br><span class="line">  margin-left:-50px;</span><br><span class="line">  // 无固定高宽时使用 translate方法</span><br><span class="line">  -webkit-transform: translate(-50%,-50%);</span><br><span class="line">  -moz-transform:translate(-50%,-50%);</span><br><span class="line">  -ms-transform: translate(-50%,-50%);</span><br><span class="line">  -o-transform: translate(-50%,-50%);</span><br><span class="line">  transform: translate(-50%,-50%);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法三：设置父div为table-cell属性"><a href="#方法三：设置父div为table-cell属性" class="headerlink" title="方法三：设置父div为table-cell属性"></a>方法三：设置父div为table-cell属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;img&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">#box&#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background:black;</span><br><span class="line">  display: table-cell;</span><br><span class="line">  text-align: center;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line">.img&#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height:100px;</span><br><span class="line">  background: white;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法四：使用flex布局"><a href="#方法四：使用flex布局" class="headerlink" title="方法四：使用flex布局"></a>方法四：使用flex布局</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;img&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">#box&#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background:black;</span><br><span class="line">  text-align: center;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">  margin:0 auto;</span><br><span class="line">&#125;</span><br><span class="line">.img&#123;</span><br><span class="line">      width: 100px;</span><br><span class="line">      height:100px;</span><br><span class="line">      background: white;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;一些css效果汇总，持续更新&quot;&gt;&lt;a href=&quot;#一些css效果汇总，持续更新&quot; class=&quot;headerlink&quot; title=&quot;一些css效果汇总，持续更新&quot;&gt;&lt;/a&gt;一些css效果汇总，持续更新&lt;/h6&gt;&lt;p&gt;&lt;img src=&quot;https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3225363744,4220361311&amp;amp;fm=27&amp;amp;gp=0.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>vue-router守卫</title>
    <link href="http://yoursite.com/2018/06/12/vue-router%E5%AE%88%E5%8D%AB/"/>
    <id>http://yoursite.com/2018/06/12/vue-router守卫/</id>
    <published>2018-06-11T16:49:48.000Z</published>
    <updated>2018-06-11T16:54:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.mp.itc.cn/upload/20170113/539d5ba608774c0f99693f2d8c031d3a_th.jpg" alt=""></p><h6 id="vue-router提供了导航钩子beforeEach和afterEach。可以通过meta参数来改变标题，afterEach滚动条返回顶端，做登录权限控制。"><a href="#vue-router提供了导航钩子beforeEach和afterEach。可以通过meta参数来改变标题，afterEach滚动条返回顶端，做登录权限控制。" class="headerlink" title="vue-router提供了导航钩子beforeEach和afterEach。可以通过meta参数来改变标题，afterEach滚动条返回顶端，做登录权限控制。"></a>vue-router提供了导航钩子beforeEach和afterEach。可以通过meta参数来改变标题，afterEach滚动条返回顶端，做登录权限控制。</h6><a id="more"></a><h1 id="vue-router属性配置回顾"><a href="#vue-router属性配置回顾" class="headerlink" title="vue-router属性配置回顾"></a>vue-router属性配置回顾</h1><h2 id="vue-link"><a href="#vue-link" class="headerlink" title="vue-link"></a>vue-link</h2><p><code>router-link</code>是一个组件，它默认会被渲染成一个带有链接的<code>a</code>标签，通过<code>to</code>属性指定链接地址。</p><h3 id="to"><a href="#to" class="headerlink" title="to"></a>to</h3><p>这是一个必须设置的属性，否则路由无法生效。它表示路由的链接，可以是一个字符串也可以是一个描述目标位置的对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;home&quot;&gt;&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&quot;&#123;path=&apos;home&apos;&#125;&quot;&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></p><p>也可以在js中用router实例方法响应点击事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$router.replace(&apos;/home&apos;)</span><br></pre></td></tr></table></figure></p><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>一个布尔类型，默认为false。如果<code>replace</code>设置为true，那么导航不会留下history记录，点击浏览器回退按钮不会再回到这个路由。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;home&quot; replace&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></p><p>也可以在js中用router实例方法响应点击事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$router.replace(&apos;/home&apos;)</span><br></pre></td></tr></table></figure></p><h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><p>router-link默认渲染成a标签，也有方法让它渲染成其他标签，tag属性就用来设置router-link渲染成什么标签的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 渲染成li标签 --&gt;</span><br><span class="line">&lt;router-link to=&quot;home&quot; tag=&quot;li&quot;&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h3 id="go"><a href="#go" class="headerlink" title="go"></a>go</h3><p>类似<code>window.history.go()</code>,在history记录中前进后退</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$router.go(-1)</span><br></pre></td></tr></table></figure><h2 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h2><p>这个组件十分关键，它就是用来渲染匹配到的路由的。<br>可以给<code>router-view</code>组件设置<code>transition</code>过渡。<br>还可以配合<code>&lt;keep-alive&gt;</code>使用，keep-alive可以缓存数据，这样不至于重新渲染路由组件的时候，之前那个路由组件的数据被清除了。如果你的应用里有一个购物车组件，就需要用到keep-alive。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition&gt;</span><br><span class="line">  &lt;keep-alive&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/keep-alive&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure><h1 id="路由拦截的应用"><a href="#路由拦截的应用" class="headerlink" title="路由拦截的应用"></a>路由拦截的应用</h1><h2 id="给每一个页面都设置一个不同的标题"><a href="#给每一个页面都设置一个不同的标题" class="headerlink" title="给每一个页面都设置一个不同的标题"></a>给每一个页面都设置一个不同的标题</h2><h3 id="router配置"><a href="#router配置" class="headerlink" title="router配置"></a>router配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line">Vue.use(Router)</span><br><span class="line">const Index = resolve =&gt; &#123;</span><br><span class="line">  require.ensure([&apos;../views/index.vue&apos;], () =&gt; &#123;</span><br><span class="line">    resolve(require(&apos;../views/index.vue&apos;))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">const Login = resolve =&gt; &#123;</span><br><span class="line">  require.ensure([&apos;../views/login.vue&apos;], () =&gt; &#123;</span><br><span class="line">    resolve(require(&apos;../views/login.vue&apos;))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">const Home = resolve =&gt; &#123;</span><br><span class="line">  require.ensure([&apos;../views/home.vue&apos;], () =&gt; &#123;</span><br><span class="line">    resolve(require(&apos;../views/home.vue&apos;))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: &apos;login&apos;,</span><br><span class="line">    path: &apos;/login&apos;,</span><br><span class="line">    component: Login</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &apos;/&apos;,</span><br><span class="line">    component: Index,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &apos;&apos;,</span><br><span class="line">        component: Home</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  mode: &apos;hash&apos;,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="添加路由拦截"><a href="#添加路由拦截" class="headerlink" title="添加路由拦截"></a>添加路由拦截</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// main.js 设置afterEach钩子函数</span><br><span class="line">router.afterEach((to, from, next) =&gt; &#123;</span><br><span class="line">  document.title = to.name</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="跳转后滚动条返回顶端"><a href="#跳转后滚动条返回顶端" class="headerlink" title="跳转后滚动条返回顶端"></a>跳转后滚动条返回顶端</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// main.js 设置afterEach钩子函数</span><br><span class="line">router.afterEach((to, from, next) =&gt; &#123;</span><br><span class="line">  window.scrollTo(0, 0)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="登录权限控制"><a href="#登录权限控制" class="headerlink" title="登录权限控制"></a>登录权限控制</h2><p>某些页面需要校验登录，否则就给跳转到登录页<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  // this route requires auth, check if logged in</span><br><span class="line">  // if not, redirect to login page.</span><br><span class="line">  const uid = localStorage.getItem(&apos;uid&apos;)</span><br><span class="line">  console.log(&apos;uid&apos;, uid)</span><br><span class="line">  // 此处过滤登录页，否则会无限循环</span><br><span class="line">  if (to.name === &apos;login&apos;) &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    if (!uid) &#123;</span><br><span class="line">      next(&#123;</span><br><span class="line">        path: &apos;/login&apos;,</span><br><span class="line">        query: &#123;</span><br><span class="line">          redirect: to.fullPath</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      // 此处会重新调用router.beforeEach</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="to-1"><a href="#to-1" class="headerlink" title="to:"></a>to:</h3><p>Route: 即将要进入的目标 路由对象</p><h3 id="from"><a href="#from" class="headerlink" title="from:"></a>from:</h3><p>Route: 当前导航正要离开的路由</p><h3 id="next"><a href="#next" class="headerlink" title="next:"></a>next:</h3><p>Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。</p><h4 id="next-1"><a href="#next-1" class="headerlink" title="next():"></a>next():</h4><p>进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。</p><h4 id="next-false"><a href="#next-false" class="headerlink" title="next(false):"></a>next(false):</h4><p>中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</p><h4 id="next-‘-‘-或者-next-path-‘-‘"><a href="#next-‘-‘-或者-next-path-‘-‘" class="headerlink" title="next(‘/‘) 或者 next({ path: ‘/‘ }):"></a>next(‘/‘) 或者 next({ path: ‘/‘ }):</h4><p>跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 <code>replace: true</code>、<code>name: &#39;home&#39;</code> 之类的选项以及任何用在<code>router-link</code> 的 <code>to</code> <code>prop</code> 或 <code>router.push</code> 中的选项。</p><h4 id="next-error"><a href="#next-error" class="headerlink" title="next(error):"></a>next(error):</h4><p>(2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给 <code>router.onError()</code> 注册过的回调。</p><h4 id="确保要调用-next-方法，否则钩子就不会被-resolved。"><a href="#确保要调用-next-方法，否则钩子就不会被-resolved。" class="headerlink" title="确保要调用 next 方法，否则钩子就不会被 resolved。"></a>确保要调用 <code>next</code> 方法，否则钩子就不会被 <code>resolved</code>。</h4><h2 id="请求拦截"><a href="#请求拦截" class="headerlink" title="请求拦截"></a>请求拦截</h2><p>异步请求时做一些事情，添加<code>loading</code>，验证登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// http request 拦截器</span><br><span class="line">var loadinginstace</span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    console.log(&apos;请求拦截器&apos;)</span><br><span class="line">    loadinginstace = Loading.service(&#123;</span><br><span class="line">      fullscreen: true,</span><br><span class="line">      background: &apos;rgba(0,0,0,0.8)&apos;,</span><br><span class="line">      text: &apos;拼命加载中....&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">    return config</span><br><span class="line">  &#125;,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    loadinginstace.close()</span><br><span class="line">    console.log(&apos;请求error&apos;)</span><br><span class="line">    return Promise.reject(err)</span><br><span class="line">  &#125;)</span><br><span class="line">// http response 拦截器</span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    console.log(&apos;axios&apos;)</span><br><span class="line">    if (response.data.code === 5) &#123;</span><br><span class="line">      console.log(&apos;axios拦截&apos;)</span><br><span class="line">      localStorage.clear()</span><br><span class="line">      router.replace(&#123;</span><br><span class="line">        path: &apos;/login&apos;,</span><br><span class="line">        query: &#123;</span><br><span class="line">          redirect: router.currentRoute.fullPath</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    loadinginstace.close()</span><br><span class="line">    return response</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    console.log(&apos;网络错误，请稍后再试&apos;)</span><br><span class="line">    Message.error(&#123;</span><br><span class="line"></span><br><span class="line">      message: &apos;网络出错，请稍后再试&apos;,</span><br><span class="line">      showClose: true</span><br><span class="line">    &#125;)</span><br><span class="line">    loadinginstace.close()</span><br><span class="line">    if (error.response) &#123;</span><br><span class="line">      // todo</span><br><span class="line">      switch (error.response.status) &#123;</span><br><span class="line">        case 401:</span><br><span class="line">          router.replace(&#123;</span><br><span class="line">            path: &apos;login&apos;,</span><br><span class="line">            query: &#123;</span><br><span class="line">              redirect: router.currentRoute.fullPath</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /* loadinginstace.close() */</span><br><span class="line">    return Promise.reject(error.response.data) // 返回接口返回的错误信息</span><br><span class="line">  &#125;)</span><br><span class="line">// 拦截器处理end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.mp.itc.cn/upload/20170113/539d5ba608774c0f99693f2d8c031d3a_th.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h6 id=&quot;vue-router提供了导航钩子beforeEach和afterEach。可以通过meta参数来改变标题，afterEach滚动条返回顶端，做登录权限控制。&quot;&gt;&lt;a href=&quot;#vue-router提供了导航钩子beforeEach和afterEach。可以通过meta参数来改变标题，afterEach滚动条返回顶端，做登录权限控制。&quot; class=&quot;headerlink&quot; title=&quot;vue-router提供了导航钩子beforeEach和afterEach。可以通过meta参数来改变标题，afterEach滚动条返回顶端，做登录权限控制。&quot;&gt;&lt;/a&gt;vue-router提供了导航钩子beforeEach和afterEach。可以通过meta参数来改变标题，afterEach滚动条返回顶端，做登录权限控制。&lt;/h6&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="进阶" scheme="http://yoursite.com/tags/%E8%BF%9B%E9%98%B6/"/>
    
      <category term="vue-router" scheme="http://yoursite.com/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>promise封装微信小程序wx.request</title>
    <link href="http://yoursite.com/2018/05/25/promise%E5%B0%81%E8%A3%85%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fwx-request/"/>
    <id>http://yoursite.com/2018/05/25/promise封装微信小程序wx-request/</id>
    <published>2018-05-24T16:33:44.000Z</published>
    <updated>2018-05-26T16:48:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p954oc3tt.bkt.clouddn.com/wechat.jpg" alt=""></p><p>最近在写微信小程序的接口调用并绑定处理数据，<br>发现微信小程序的原生的request，请求和业务代码写在一起，且不支持并发请求(最多10个)。<br>想写一个api工厂，统一管理请求函数，业务代码只关系返回数据的处理。修改一个url也不用到处去找调用的地方，代码优雅且方便维护。<br>说做就做：<br>小程序支持ES6的语法,可以使用<code>promise(anything).then((res)=&gt;{anything}).catch()</code>的方法解决小程序函数并发的问题.<br>想来可以使用promise封装一下wx.request，以达到axios的使用效果<br><a id="more"></a></p><h1 id="Promise-的含义"><a href="#Promise-的含义" class="headerlink" title="Promise 的含义"></a>Promise 的含义</h1><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。</p><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p><p>Promise对象有以下两个特点。</p><p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p><p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p><p>注意，为了行文方便，本章后面的resolved统一只指fulfilled状态，不包含rejected状态。</p><p>有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。</p><p>Promise也有一些缺点。首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><p>如果某些事件不断地反复发生，一般来说，使用 Stream 模式是比部署Promise更好的选择。</p><h1 id="使用-Promise-封装-wx-request"><a href="#使用-Promise-封装-wx-request" class="headerlink" title="使用 Promise 封装 wx.request"></a>使用 Promise 封装 wx.request</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// utils/wxrequest.js</span><br><span class="line">const getRequest = function(url,resolve,reject)&#123;</span><br><span class="line">  wx.request(&#123;</span><br><span class="line">    url: url, //仅为示例，并非真实的接口地址</span><br><span class="line">    method: &apos;GET&apos;, // 默认为get请求</span><br><span class="line">    dataType:&quot;json&quot;,</span><br><span class="line">    header: &#123;</span><br><span class="line">      &apos;content-type&apos;: &apos;application/json&apos; // 默认值</span><br><span class="line">    &#125;,</span><br><span class="line">    success: (data) =&gt; resolve(data),,</span><br><span class="line">    fail:(err) =&gt; reject(data),</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">const postRequest = function(url,data,resolve,reject)&#123;</span><br><span class="line">  wx.request(&#123;</span><br><span class="line">    url: url, //仅为示例，并非真实的接口地址</span><br><span class="line">    method: &apos;POST&apos;, </span><br><span class="line">data：data,</span><br><span class="line">    dataType:&quot;json&quot;,</span><br><span class="line">    header: &#123;</span><br><span class="line">      &apos;content-type&apos;: &apos;application/json&apos; // 默认值</span><br><span class="line">    &#125;,</span><br><span class="line">    success: (data) =&gt; resolve(data),,</span><br><span class="line">    fail:(err) =&gt; reject(data),</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  getRequest: getRequest,</span><br><span class="line">  postRequest: postRequest</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="全局挂载api工厂"><a href="#全局挂载api工厂" class="headerlink" title="全局挂载api工厂"></a>全局挂载api工厂</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// app.js</span><br><span class="line">// 引入封装号的wxRequest</span><br><span class="line">import wxRequest from &apos;./utils/wxrequest.js&apos;</span><br><span class="line">const HOST = &quot;https://server_address:port&quot;</span><br><span class="line">App(&#123;</span><br><span class="line">  onLaunch: function () &#123;</span><br><span class="line">    // 展示本地存储能力</span><br><span class="line">    var logs = wx.getStorageSync(&apos;logs&apos;) || []</span><br><span class="line">    logs.unshift(Date.now())</span><br><span class="line">    wx.setStorageSync(&apos;logs&apos;, logs)</span><br><span class="line">    wx.login(&#123;</span><br><span class="line">      success: res =&gt; &#123;</span><br><span class="line">        // 发送 res.code 到后台换取 openId, sessionKey, unionId</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    wx.getSetting(&#123;</span><br><span class="line">      success: res =&gt; &#123;</span><br><span class="line">        // 获取用户信息</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // 统一api工厂，方便维护</span><br><span class="line">  dataFactory: &#123;</span><br><span class="line">    // 获取班级圈信息</span><br><span class="line">    getDemo: function (id) &#123;</span><br><span class="line">      const url = &apos;/api/demo/getlist?id=&apos; + id</span><br><span class="line">      return wxRequest.get(HOST + url)</span><br><span class="line">    &#125;,</span><br><span class="line">    postDemo: function (data) &#123;</span><br><span class="line">      const url = &apos;/api/demo/postinfo&apos;</span><br><span class="line">      return wxRequest.get(HOST + url, data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="业务代码调用"><a href="#业务代码调用" class="headerlink" title="业务代码调用"></a>业务代码调用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// home/index.js</span><br><span class="line">const app = getApp();</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    // model data</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: function () &#123;</span><br><span class="line">    this.getDemo()</span><br><span class="line">  &#125;,</span><br><span class="line">  getDemo: function () &#123;</span><br><span class="line">    app.dataFactory.getDemo().then((res)=&gt;&#123;</span><br><span class="line">      console.info(&apos;res&apos;,res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="更加全面的封装"><a href="#更加全面的封装" class="headerlink" title="更加全面的封装"></a>更加全面的封装</h1><p>git上大佬的(参照axios封装http请求)小程序请求封装</p><blockquote><p><a href="https://github.com/hatedMe/wechat-request" target="_blank" rel="noopener">https://github.com/hatedMe/wechat-request</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">export const dispatchRequest = function (config) &#123;</span><br><span class="line"></span><br><span class="line">    if (config.baseURL &amp;&amp; !util.isAbsoluteURL(config.url)) &#123;</span><br><span class="line">        config.url = util.combineURLs(config.baseURL, config.url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    config.headers = util.merge(</span><br><span class="line">        config.headers.common || &#123;&#125;,</span><br><span class="line">        config.headers || &#123;&#125;,</span><br><span class="line">        config.headers[config.method] || &#123;&#125;,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    let methods = [&apos;delete&apos;, &apos;get&apos;, &apos;head&apos;, &apos;post&apos;, &apos;put&apos;, &apos;patch&apos;, &apos;common&apos;]</span><br><span class="line">    methods.forEach(method =&gt; &#123;</span><br><span class="line">        delete config.headers[method];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    let promise = Promise.resolve( config );</span><br><span class="line">    promise = promise.then( config =&gt; &#123;</span><br><span class="line">       return new Promise(function(resolve, reject) &#123;</span><br><span class="line">            let requestTask =  wx.request(&#123;</span><br><span class="line">                url : config.url ,</span><br><span class="line">                data : config.data || &#123;&#125;,</span><br><span class="line">                header : config.headers,</span><br><span class="line">                method : config.method,</span><br><span class="line">                dataType : config.dataType,</span><br><span class="line">                success : function (res) &#123;</span><br><span class="line">                    resolve(&#123;</span><br><span class="line">                        data : res.data ,</span><br><span class="line">                        headers : res.header,</span><br><span class="line">                        status : res.statusCode,</span><br><span class="line">                        statusText : &apos;ok&apos;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;,</span><br><span class="line">                fail : function (err) &#123;</span><br><span class="line">                    reject(err)</span><br><span class="line">                &#125;,</span><br><span class="line">                complete :  function () &#123;</span><br><span class="line">                    config.complete &amp;&amp; config.complete()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            if( config.timeout &amp;&amp; typeof config.timeout === &apos;number&apos; &amp;&amp; config.timeout &gt; 1000 )&#123;</span><br><span class="line">                setTimeout(() =&gt;&#123;</span><br><span class="line">                    requestTask.abort();</span><br><span class="line">                    resolve(&#123;</span><br><span class="line">                        status : &apos;canceled&apos;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;,config.timeout)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意的坑"><a href="#注意的坑" class="headerlink" title="注意的坑"></a>注意的坑</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wxRequest.defaults.baseURL = &apos;https://api.example.com&apos;;</span><br><span class="line">wxRequest.defaults.headers.common[&apos;Authorization&apos;] = AUTH_TOKEN;</span><br><span class="line">wxRequest.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded&apos;;</span><br></pre></td></tr></table></figure><ol><li><code>&#39;Content-Type&#39;: &#39;application/json&#39;</code>用在<code>get</code>请求中没问题.<br><code>POST</code>请求就不好使了.需要改成: <code>&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</code>。<br>我是将 <code>content-type</code> 修改为小写后 <code>post</code>请求成功</li><li>有时后端需要string类型，使用<code>JSON.stringify</code>转码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let data = JSON.stringify(&#123;</span><br><span class="line">      id: &apos;1&apos;,</span><br><span class="line">      content: this.data.content,</span><br><span class="line">      image: this.data.image</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>理解原理，方能进退自如。闲时还需多研究axios源码，加深理解</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p954oc3tt.bkt.clouddn.com/wechat.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在写微信小程序的接口调用并绑定处理数据，&lt;br&gt;发现微信小程序的原生的request，请求和业务代码写在一起，且不支持并发请求(最多10个)。&lt;br&gt;想写一个api工厂，统一管理请求函数，业务代码只关系返回数据的处理。修改一个url也不用到处去找调用的地方，代码优雅且方便维护。&lt;br&gt;说做就做：&lt;br&gt;小程序支持ES6的语法,可以使用&lt;code&gt;promise(anything).then((res)=&amp;gt;{anything}).catch()&lt;/code&gt;的方法解决小程序函数并发的问题.&lt;br&gt;想来可以使用promise封装一下wx.request，以达到axios的使用效果&lt;br&gt;
    
    </summary>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>vue Markdown编辑器</title>
    <link href="http://yoursite.com/2018/05/23/vue-Markdown%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://yoursite.com/2018/05/23/vue-Markdown编辑器/</id>
    <published>2018-05-22T17:16:17.000Z</published>
    <updated>2018-05-22T17:37:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p954oc3tt.bkt.clouddn.com/8.png" alt=""></p><p>Markdown 是一种轻量级的「标记语言」，写博客非常好用。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，使用编辑器可以写出排版优美，结构突出的文章。本文介绍前端引入基于vue的markdown编辑器组件mavonEditor。</p><a id="more"></a><h3 id="Install-mavon-editor-安装"><a href="#Install-mavon-editor-安装" class="headerlink" title="Install mavon-editor (安装)"></a>Install mavon-editor (安装)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install mavon-editor --save</span><br></pre></td></tr></table></figure><h3 id="单页引用"><a href="#单页引用" class="headerlink" title="单页引用"></a>单页引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mavonEditor&#125; from &apos;mavon-editor&apos;</span><br><span class="line">// 可以通过 mavonEditor.markdownIt 获取解析器markdown-it对象</span><br><span class="line">import &apos;mavon-editor/dist/css/index.css&apos;</span><br><span class="line"></span><br><span class="line">components: &#123;</span><br><span class="line">  mavonEditor</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><h5 id="单独展示，default-open-”preview”"><a href="#单独展示，default-open-”preview”" class="headerlink" title="单独展示，default_open=”preview”"></a>单独展示，default_open=”preview”</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mavon-editor style=&quot;min-height: 100%&quot; ref=&quot;document&quot;</span><br><span class="line">    :toolbarsFlag=&quot;false&quot; //隐藏toolbar</span><br><span class="line">    :subfield=&quot;false&quot; //true： 双栏(编辑预览同屏)， false： 单栏(编辑预览分屏)</span><br><span class="line">    :value=&quot;defaultMd&quot; // 双向绑定</span><br><span class="line">    class=&quot;first_part&quot; default_open=&quot;preview&quot;&gt;</span><br><span class="line">    &lt;/mavon-editor&gt;</span><br></pre></td></tr></table></figure><h5 id="包含编辑和预览"><a href="#包含编辑和预览" class="headerlink" title="包含编辑和预览"></a>包含编辑和预览</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;nav&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;navIt&quot; :class=&quot;&#123; active: isEdit &#125;&quot; @click=&quot;toggleEdit()&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;itLi&quot;&gt;编辑&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;navIt&quot; :class=&quot;&#123; active: isPreview &#125;&quot; @click=&quot;toggleEdit()&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;itLi&quot;&gt;预览&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;editor&quot;&gt;</span><br><span class="line">    &lt;mavon-editor style=&quot;height: 100%&quot; ref=&quot;mdEdit&quot;</span><br><span class="line">    :toolbars=&quot;toolbars&quot; :subfield=&quot;false&quot;</span><br><span class="line">    v-model=&quot;form.value&quot; @imgAdd=&quot;$imgAdd&quot; @imgDel=&quot;$imgDel&quot;&gt;</span><br><span class="line">    &lt;/mavon-editor&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">      toggleEdit () &#123;</span><br><span class="line">        if (this.isPreview) &#123;</span><br><span class="line">          this.$refs.mdEdit.default_open = &apos;edit&apos;</span><br><span class="line">          this.$refs.mdEdit.toolbarsFlag = true</span><br><span class="line">          this.isEdit = true</span><br><span class="line">          this.isPreview = false</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.$refs.mdEdit.default_open = &apos;preview&apos;</span><br><span class="line">          this.$refs.mdEdit.toolbarsFlag = false</span><br><span class="line">          this.isEdit = false</span><br><span class="line">          this.isPreview = true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 绑定@imgAdd event</span><br><span class="line">      $imgAdd(pos, $file)&#123;</span><br><span class="line">        // 第一步.将图片上传到服务器.</span><br><span class="line">        let formdata = new FormData();</span><br><span class="line">        formdata.append(&apos;file_name&apos;, $file);</span><br><span class="line">        global.dataFactory.fileUpload(formdata).then((res)=&gt;&#123;</span><br><span class="line">          if(res.data.code === 0) &#123;</span><br><span class="line">            // 第二步.将返回的url替换到文本原位置![...](./0) -&gt; ![...](url)</span><br><span class="line">            this.$refs.mdEdit.$img2Url(pos, res.data.data.file_addr);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="toolbar设置"><a href="#toolbar设置" class="headerlink" title="toolbar设置"></a>toolbar设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">toolbars: &#123;</span><br><span class="line">      bold: true, // 粗体</span><br><span class="line">      italic: true, // 斜体</span><br><span class="line">      header: true, // 标题</span><br><span class="line">      underline: true, // 下划线</span><br><span class="line">      strikethrough: true, // 中划线</span><br><span class="line">      mark: true, // 标记</span><br><span class="line">      superscript: false, // 上角标</span><br><span class="line">      subscript: false, // 下角标</span><br><span class="line">      quote: true, // 引用</span><br><span class="line">      ol: true, // 有序列表</span><br><span class="line">      ul: true, // 无序列表</span><br><span class="line">      link: true, // 链接</span><br><span class="line">      imagelink: true, // 图片链接</span><br><span class="line">      code: true, // code</span><br><span class="line">      table: true, // 表格</span><br><span class="line">      fullscreen: false, // 全屏编辑</span><br><span class="line">      readmodel: true, // 沉浸式阅读</span><br><span class="line">      htmlcode: true, // 展示html源码</span><br><span class="line">      help: true, // 帮助</span><br><span class="line">      /* 1.3.5 */</span><br><span class="line">      undo: false, // 上一步</span><br><span class="line">      redo: false, // 下一步</span><br><span class="line">      trash: true, // 清空</span><br><span class="line">      save: true, // 保存（触发events中的save事件）</span><br><span class="line">      /* 1.4.2 */</span><br><span class="line">      navigation: false, // 导航目录</span><br><span class="line">      /* 2.1.8 */</span><br><span class="line">      alignleft: false, // 左对齐</span><br><span class="line">      aligncenter: false, // 居中</span><br><span class="line">      alignright: false, // 右对齐</span><br><span class="line">      /* 2.2.1 */</span><br><span class="line">      subfield: false, // 单双栏模式</span><br><span class="line">      preview: false, // 预览</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>git地址: <a href="https://github.com/hinesboy/mavonEditor" target="_blank" rel="noopener">https://github.com/hinesboy/mavonEditor</a><br><br>演示地址: <a href="https://hinesboy.github.io/mavonEditor/dist/" target="_blank" rel="noopener">https://hinesboy.github.io/mavonEditor/dist/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p954oc3tt.bkt.clouddn.com/8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Markdown 是一种轻量级的「标记语言」，写博客非常好用。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，使用编辑器可以写出排版优美，结构突出的文章。本文介绍前端引入基于vue的markdown编辑器组件mavonEditor。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="进阶" scheme="http://yoursite.com/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>vue富文本编辑器ueditor</title>
    <link href="http://yoursite.com/2018/05/23/vue%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8ueditor/"/>
    <id>http://yoursite.com/2018/05/23/vue富文本编辑器ueditor/</id>
    <published>2018-05-22T17:14:51.000Z</published>
    <updated>2018-05-26T16:55:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p954oc3tt.bkt.clouddn.com/8.png" alt=""></p><p></p><p> 在现代网站中，对于简单发帖框和回复框，通常添加富文本编辑器来提高用户体验。基于vue开发的前端项目，也可以集成百度编辑器 UEditor 来实现。</p><p></p><p></p><p>UEditor 对 vue 并不友好，最好的方法是写一个组件，方便项目调用。</p><br><a id="more"></a><p></p><h2 id="vue实现富文本编辑器"><a href="#vue实现富文本编辑器" class="headerlink" title="vue实现富文本编辑器"></a>vue实现富文本编辑器</h2><h3 id="UEditor简介"><a href="#UEditor简介" class="headerlink" title="UEditor简介"></a>UEditor简介</h3><p></p><p>UEditor是由百度web前端研发部开发所见即所得富文本web编辑器，具有轻量，可定制，注重用户体验等特点，开源基于MIT协议，允许自由使用和修改代码。</p><p></p><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><p><a href="http://ueditor.baidu.com/website/index.html" target="_blank" rel="noopener">ueditor官方首页</a><br><a href="http://fex.baidu.com/ueditor/#start-config1.4" target="_blank" rel="noopener">ueditor官方文档</a><br><a href="https://github.com/fex-team/ueditor" target="_blank" rel="noopener">github仓库</a></p><h3 id="下载一份完整的-UEditor-代码包放到项目中"><a href="#下载一份完整的-UEditor-代码包放到项目中" class="headerlink" title="下载一份完整的 UEditor 代码包放到项目中"></a>下载一份完整的 UEditor 代码包放到项目中</h3><ol><li>到<a href="https://github.com/fex-team/ueditor" target="_blank" rel="noopener">github仓库</a>clone或下载zip包</li><li>npm install 安装依赖（如果没有安装 grunt , 请先在全局安装 grunt）</li><li>在终端执行 grunt default</li><li>将 ueditor\dist\utf8-php 下部分源码 copy 到项目 static 目录的’UE’文件夹下，项目截图：<br><img src="https://note.youdao.com/favicon.ico" alt=""></li></ol><hr><h3 id="修改入口main-js，引入依赖"><a href="#修改入口main-js，引入依赖" class="headerlink" title="修改入口main.js，引入依赖"></a>修改入口main.js，引入依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// import ueditor dependence</span><br><span class="line">import &apos;../static/UE/ueditor.config.js&apos;</span><br><span class="line">import &apos;../static/UE/ueditor.all.js&apos;</span><br><span class="line">import &apos;../static/UE/lang/zh-cn/zh-cn.js&apos;</span><br><span class="line">import &apos;../static/UE/ueditor.parse.js&apos;</span><br></pre></td></tr></table></figure><hr><h3 id="配置资源文件包的路径-UEDITOR-HOME-URL"><a href="#配置资源文件包的路径-UEDITOR-HOME-URL" class="headerlink" title="配置资源文件包的路径 UEDITOR_HOME_URL"></a>配置资源文件包的路径 UEDITOR_HOME_URL</h3><blockquote><p>这里需要指定 UEditor 代码包的路径，打开static\UE\ueditor.config.js，修改 UEDITOR_HOME_URL：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.UEDITOR_HOME_URL = &apos;/static/UE/&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 编辑器资源文件根路径。它所表示的含义是：以编辑器实例化页面为当前路径，指向编辑器资源文件（即dialog等文件夹）的路径。</span><br><span class="line">     * 鉴于很多同学在使用编辑器的时候出现的种种路径问题，此处强烈建议大家使用&quot;相对于网站根目录的相对路径&quot;进行配置。</span><br><span class="line">     * &quot;相对于网站根目录的相对路径&quot;也就是以斜杠开头的形如&quot;/myProject/ueditor/&quot;这样的路径。</span><br><span class="line">     * 如果站点中有多个不在同一层级的页面需要实例化编辑器，且引用了同一UEditor的时候，此处的URL可能不适用于每个页面的编辑器。</span><br><span class="line">     * 因此，UEditor提供了针对不同页面的编辑器可单独配置的根路径，具体来说，在需要实例化编辑器的页面最顶部写上如下代码即可。当然，需要令此处的URL等于对应的配置。</span><br><span class="line">     * window.UEDITOR_HOME_URL = &quot;/xxxx/xxxx/&quot;;</span><br><span class="line">     */</span><br><span class="line">  window.UEDITOR_HOME_URL = &apos;/static/UE/&apos;</span><br></pre></td></tr></table></figure><h3 id="封装UEditor-vue组件"><a href="#封装UEditor-vue组件" class="headerlink" title="封装UEditor vue组件"></a>封装UEditor vue组件</h3><blockquote><p>直接上代码：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;script id=&quot;editor&quot; type=&quot;text/plain&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;UEditor&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      editor: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    defaultMsg: &#123;</span><br><span class="line">      type: String</span><br><span class="line">    &#125;,</span><br><span class="line">    config: &#123;</span><br><span class="line">      type: Object</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    const _this = this</span><br><span class="line">    this.editor = window.UE.getEditor(&apos;editor&apos;, this.config) // 初始化UE</span><br><span class="line">    this.editor.addListener(&apos;ready&apos;, function () &#123;</span><br><span class="line">      _this.editor.setContent(_this.defaultMsg) // 确保UE加载完成后，放入内容。</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getUEContent () &#123;</span><br><span class="line">      // 获取内容方法</span><br><span class="line">      return this.editor.getContent()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed () &#123;</span><br><span class="line">    this.editor.destroy()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="最后一步，在页面中调用"><a href="#最后一步，在页面中调用" class="headerlink" title="最后一步，在页面中调用"></a>最后一步，在页面中调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;components-container&quot;&gt;</span><br><span class="line">&lt;!-- 需要使用编辑器时，调用UE公共组件即可。可设置填充内容defaultMsg，配置信息config(宽度和高度等)，可调用组件中获取内容的方法。 --&gt;</span><br><span class="line">    &lt;button @click=&quot;getUEContent&quot;&gt;获取内容&lt;/button&gt;</span><br><span class="line">    &lt;div class=&quot;editor-container&quot;&gt;</span><br><span class="line">      &lt;UEditor :defaultMsg=defaultMsg :config=config ref=&quot;ue&quot;&gt;&lt;/UEditor&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import UE from &apos;../components/ue.vue&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;UEditor&#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      defaultMsg: &apos;富文本编辑器&apos;,</span><br><span class="line">      config: &#123;</span><br><span class="line">        initialFrameWidth: null,</span><br><span class="line">        initialFrameHeight: 350</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getUEContent () &#123;</span><br><span class="line">      let content = this.$refs.ue.getUEContent()</span><br><span class="line">      this.$notify(&#123;</span><br><span class="line">        title: &apos;获取成功，可在控制台查看！&apos;,</span><br><span class="line">        message: content,</span><br><span class="line">        type: &apos;success&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">      console.log(content)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="配置ueditor-config-js"><a href="#配置ueditor-config-js" class="headerlink" title="配置ueditor.config.js"></a>配置ueditor.config.js</h3><h4 id="上传图片设置"><a href="#上传图片设置" class="headerlink" title="上传图片设置"></a>上传图片设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//图片上传配置区</span><br><span class="line">imageUrl:&quot;/index.php/Home/uploadFile&quot;             </span><br><span class="line">//图片上传提交地址</span><br><span class="line">,imagePath:&quot;http://wecaiquestion.oss-cn-hangzhou.aliyuncs.com/&quot;                     //图片修正地址，引用了fixedImagePath,如有特殊需求，可自行配置</span><br><span class="line">,imageFieldName:&quot;upfile&quot;                   //图片数据的key,若此处修改，需要在后台对应文件修改对应参数</span><br></pre></td></tr></table></figure><p>使用编译器搜索到这几个文本，进行修改即可，其中imageUrl表示图片上传到哪里，如果不填写具体的地址，那么就会默认嵌套在window.href.host上，假设你的网页地址是<a href="http://cutiepanther.github.io，那么具体地址就是http://cutiepanther.github.io/index.php/Home/uploadFile．" target="_blank" rel="noopener">http://cutiepanther.github.io，那么具体地址就是http://cutiepanther.github.io/index.php/Home/uploadFile．</a></p><p>第二个参数是图片显示的前缀，会贴合在后台传递回来的参数前，比如这里我使用的是阿里云的OSS作为文件保存，后台仅仅返回Object的名字，所以为了使图片能正常显示，还需要加上前缀，就是在这里加的．</p><p>最后一个参数就是文件上传到服务器后的名字，也就是$_FILES[‘file_name’]，默认设置是temp_name．</p><h4 id="toolbar定制"><a href="#toolbar定制" class="headerlink" title="toolbar定制"></a>toolbar定制</h4><h5 id="简单列表"><a href="#简单列表" class="headerlink" title="简单列表"></a>简单列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">toolbars: [</span><br><span class="line">    [&apos;fullscreen&apos;, &apos;source&apos;, &apos;undo&apos;, &apos;redo&apos;, &apos;bold&apos;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="多行列表"><a href="#多行列表" class="headerlink" title="多行列表"></a>多行列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toolbars: [</span><br><span class="line">      [&apos;source&apos;, &apos;undo&apos;, &apos;redo&apos;, &apos;|&apos;, &apos;fontsize&apos;, &apos;forecolor&apos;, &apos;backcolor&apos;, &apos;insertorderedlist&apos;, &apos;insertunorderedlist&apos;],</span><br><span class="line">      [&apos;bold&apos;, &apos;italic&apos;, &apos;underline&apos;, &apos;fontborder&apos;, &apos;strikethrough&apos;, &apos;removeformat&apos;, &apos;formatmatch&apos;, &apos;autotypeset&apos;, &apos;blockquote&apos;, &apos;pasteplain&apos;, &apos;simpleupload&apos;]</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h5 id="全部配置项"><a href="#全部配置项" class="headerlink" title="全部配置项"></a>全部配置项</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">toolbars: [</span><br><span class="line">    [</span><br><span class="line">        &apos;anchor&apos;, //锚点</span><br><span class="line">        &apos;undo&apos;, //撤销</span><br><span class="line">        &apos;redo&apos;, //重做</span><br><span class="line">        &apos;bold&apos;, //加粗</span><br><span class="line">        &apos;indent&apos;, //首行缩进</span><br><span class="line">        &apos;snapscreen&apos;, //截图</span><br><span class="line">        &apos;italic&apos;, //斜体</span><br><span class="line">        &apos;underline&apos;, //下划线</span><br><span class="line">        &apos;strikethrough&apos;, //删除线</span><br><span class="line">        &apos;subscript&apos;, //下标</span><br><span class="line">        &apos;fontborder&apos;, //字符边框</span><br><span class="line">        &apos;superscript&apos;, //上标</span><br><span class="line">        &apos;formatmatch&apos;, //格式刷</span><br><span class="line">        &apos;source&apos;, //源代码</span><br><span class="line">        &apos;blockquote&apos;, //引用</span><br><span class="line">        &apos;pasteplain&apos;, //纯文本粘贴模式</span><br><span class="line">        &apos;selectall&apos;, //全选</span><br><span class="line">        &apos;print&apos;, //打印</span><br><span class="line">        &apos;preview&apos;, //预览</span><br><span class="line">        &apos;horizontal&apos;, //分隔线</span><br><span class="line">        &apos;removeformat&apos;, //清除格式</span><br><span class="line">        &apos;time&apos;, //时间</span><br><span class="line">        &apos;date&apos;, //日期</span><br><span class="line">        &apos;unlink&apos;, //取消链接</span><br><span class="line">        &apos;insertrow&apos;, //前插入行</span><br><span class="line">        &apos;insertcol&apos;, //前插入列</span><br><span class="line">        &apos;mergeright&apos;, //右合并单元格</span><br><span class="line">        &apos;mergedown&apos;, //下合并单元格</span><br><span class="line">        &apos;deleterow&apos;, //删除行</span><br><span class="line">        &apos;deletecol&apos;, //删除列</span><br><span class="line">        &apos;splittorows&apos;, //拆分成行</span><br><span class="line">        &apos;splittocols&apos;, //拆分成列</span><br><span class="line">        &apos;splittocells&apos;, //完全拆分单元格</span><br><span class="line">        &apos;deletecaption&apos;, //删除表格标题</span><br><span class="line">        &apos;inserttitle&apos;, //插入标题</span><br><span class="line">        &apos;mergecells&apos;, //合并多个单元格</span><br><span class="line">        &apos;deletetable&apos;, //删除表格</span><br><span class="line">        &apos;cleardoc&apos;, //清空文档</span><br><span class="line">        &apos;insertparagraphbeforetable&apos;, //&quot;表格前插入行&quot;</span><br><span class="line">        &apos;insertcode&apos;, //代码语言</span><br><span class="line">        &apos;fontfamily&apos;, //字体</span><br><span class="line">        &apos;fontsize&apos;, //字号</span><br><span class="line">        &apos;paragraph&apos;, //段落格式</span><br><span class="line">        &apos;simpleupload&apos;, //单图上传</span><br><span class="line">        &apos;insertimage&apos;, //多图上传</span><br><span class="line">        &apos;edittable&apos;, //表格属性</span><br><span class="line">        &apos;edittd&apos;, //单元格属性</span><br><span class="line">        &apos;link&apos;, //超链接</span><br><span class="line">        &apos;emotion&apos;, //表情</span><br><span class="line">        &apos;spechars&apos;, //特殊字符</span><br><span class="line">        &apos;searchreplace&apos;, //查询替换</span><br><span class="line">        &apos;map&apos;, //Baidu地图</span><br><span class="line">        &apos;gmap&apos;, //Google地图</span><br><span class="line">        &apos;insertvideo&apos;, //视频</span><br><span class="line">        &apos;help&apos;, //帮助</span><br><span class="line">        &apos;justifyleft&apos;, //居左对齐</span><br><span class="line">        &apos;justifyright&apos;, //居右对齐</span><br><span class="line">        &apos;justifycenter&apos;, //居中对齐</span><br><span class="line">        &apos;justifyjustify&apos;, //两端对齐</span><br><span class="line">        &apos;forecolor&apos;, //字体颜色</span><br><span class="line">        &apos;backcolor&apos;, //背景色</span><br><span class="line">        &apos;insertorderedlist&apos;, //有序列表</span><br><span class="line">        &apos;insertunorderedlist&apos;, //无序列表</span><br><span class="line">        &apos;fullscreen&apos;, //全屏</span><br><span class="line">        &apos;directionalityltr&apos;, //从左向右输入</span><br><span class="line">        &apos;directionalityrtl&apos;, //从右向左输入</span><br><span class="line">        &apos;rowspacingtop&apos;, //段前距</span><br><span class="line">        &apos;rowspacingbottom&apos;, //段后距</span><br><span class="line">        &apos;pagebreak&apos;, //分页</span><br><span class="line">        &apos;insertframe&apos;, //插入Iframe</span><br><span class="line">        &apos;imagenone&apos;, //默认</span><br><span class="line">        &apos;imageleft&apos;, //左浮动</span><br><span class="line">        &apos;imageright&apos;, //右浮动</span><br><span class="line">        &apos;attachment&apos;, //附件</span><br><span class="line">        &apos;imagecenter&apos;, //居中</span><br><span class="line">        &apos;wordimage&apos;, //图片转存</span><br><span class="line">        &apos;lineheight&apos;, //行间距</span><br><span class="line">        &apos;edittip &apos;, //编辑提示</span><br><span class="line">        &apos;customstyle&apos;, //自定义标题</span><br><span class="line">        &apos;autotypeset&apos;, //自动排版</span><br><span class="line">        &apos;webapp&apos;, //百度应用</span><br><span class="line">        &apos;touppercase&apos;, //字母大写</span><br><span class="line">        &apos;tolowercase&apos;, //字母小写</span><br><span class="line">        &apos;background&apos;, //背景</span><br><span class="line">        &apos;template&apos;, //模板</span><br><span class="line">        &apos;scrawl&apos;, //涂鸦</span><br><span class="line">        &apos;music&apos;, //音乐</span><br><span class="line">        &apos;inserttable&apos;, //插入表格</span><br><span class="line">        &apos;drafts&apos;, // 从草稿箱加载</span><br><span class="line">        &apos;charts&apos;, // 图表</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h5><blockquote><p><a href="http://fex.baidu.com/ueditor/#api-common" target="_blank" rel="noopener">http://fex.baidu.com/ueditor/#api-common</a><br><a href="http://ueditor.baidu.com/doc/" target="_blank" rel="noopener">http://ueditor.baidu.com/doc/</a></p></blockquote><hr><h3 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h3><p><a href="https://www.cnblogs.com/dmcl/p/7152711.html" target="_blank" rel="noopener">博客</a></p><h6 id="github的vue-ueditor组件-star-195"><a href="#github的vue-ueditor组件-star-195" class="headerlink" title="github的vue-ueditor组件(star 195)"></a><a href="https://github.com/SilentTiger/vue-ueditor" target="_blank" rel="noopener">github的vue-ueditor组件(<i class="fa fa-star"></i>star 195)</a></h6><h6 id="ueditor-web-star-20"><a href="#ueditor-web-star-20" class="headerlink" title="ueditor-web(star 20)"></a><a href="https://github.com/coderliguoqing/ueditor-web" target="_blank" rel="noopener">ueditor-web(<i class="fa fa-star"></i>star 20)</a></h6>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p954oc3tt.bkt.clouddn.com/8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt; 在现代网站中，对于简单发帖框和回复框，通常添加富文本编辑器来提高用户体验。基于vue开发的前端项目，也可以集成百度编辑器 UEditor 来实现。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;UEditor 对 vue 并不友好，最好的方法是写一个组件，方便项目调用。&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="进阶" scheme="http://yoursite.com/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>vue-router</title>
    <link href="http://yoursite.com/2018/05/20/vue-router/"/>
    <id>http://yoursite.com/2018/05/20/vue-router/</id>
    <published>2018-05-20T06:22:55.000Z</published>
    <updated>2018-06-11T16:54:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.mp.itc.cn/upload/20170113/539d5ba608774c0f99693f2d8c031d3a_th.jpg" alt=""></p><p>后端专注在数据上，前端专注在交互和可视化上<br>单页应用spa：在前后端分离的基础上，加一层前端路由<br><a id="more"></a></p><h4 id="main-js引入依赖"><a href="#main-js引入依赖" class="headerlink" title="main.js引入依赖"></a>main.js引入依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">/* const Index = resolve =&gt; &#123;</span><br><span class="line">  require.ensure([&apos;../components/HelloFromVux.vue&apos;], () =&gt; &#123;</span><br><span class="line">    resolve(require(&apos;../components/HelloFromVux.vue&apos;))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; */</span><br><span class="line">const Main = resolve =&gt; &#123;</span><br><span class="line">  require.ensure([&apos;../views/main.vue&apos;], () =&gt; &#123;</span><br><span class="line">    resolve(require(&apos;../views/main.vue&apos;))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">const Login = resolve =&gt; &#123;</span><br><span class="line">  require.ensure([&apos;../components/login.vue&apos;], () =&gt; &#123;</span><br><span class="line">    resolve(require(&apos;../components/login.vue&apos;))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">const routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &apos;/&apos;,</span><br><span class="line">    name: &apos;main&apos;,</span><br><span class="line">    component: Main</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &apos;/login&apos;,</span><br><span class="line">    name: &apos;login&apos;,</span><br><span class="line">    component: Login</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  mode: &apos;hash&apos;,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h4><blockquote><p>Hash: 使用URL的hash值来作为路由。支持所有浏览器。<br><br>History: 以来HTML5 History API 和服务器配置。参考官网中HTML5 History模式 <br><br>Abstract： 支持所有javascript运行模式。如果发现没有浏览器的API，路由会自动强制进入这个模式。</p></blockquote><p>vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</p><p>如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  mode: &apos;history&apos;,</span><br><span class="line">  routes: [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当你使用 history 模式时，URL 就像正常的 url，例如<br><code>http://yoursite.com/user/id</code></p><p>不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问<br><code>http://oursite.com/user/id</code><br> 就会返回 404，这就不好看了。</p><p>所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。</p><hr><h4 id="动态路由："><a href="#动态路由：" class="headerlink" title="动态路由："></a>动态路由：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">routes: [&#123;</span><br><span class="line">name: &apos;BookDetails&apos;,</span><br><span class="line">path: &apos;/books/:id&apos;,</span><br><span class="line">component: BookDetails</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&apos;BookDetails&apos;,params:&#123; id: 1 &#125;&quot;&gt;</span><br><span class="line">&lt;!--...--&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>从路由中读取:id 参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const bookID = this.$route.params.id</span><br></pre></td></tr></table></figure><h4 id="嵌套路由："><a href="#嵌套路由：" class="headerlink" title="嵌套路由："></a>嵌套路由：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/main&apos;,</span><br><span class="line">      name: &apos;Main&apos;,</span><br><span class="line">      component: Main,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;name: &apos;Myppt&apos;, path: &apos;myppt&apos;, component: MyPpt&#125;,</span><br><span class="line">        &#123;name: &apos;Myfavorite&apos;, path: &apos;myfavorite&apos;, component: MyFavorite&#125;,</span><br><span class="line">        &#123;name: &apos;Account&apos;, path: &apos;account&apos;, component: Account&#125;,</span><br><span class="line">        &#123;name: &apos;Changepwd&apos;, path: &apos;changepwd&apos;, component: ChangePwd&#125;,</span><br><span class="line">        &#123;name: &apos;Uploadppt&apos;, path: &apos;uploadppt&apos;, component: UploadPpt&#125;,</span><br><span class="line">        &#123;name: &apos;Mysubscribe&apos;, path: &apos;mysubscribe&apos;, component: MySubscribe&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#123;</span><br><span class="line">  name: &apos;BookDetails&apos;,</span><br><span class="line">  path: &apos;/books/:id&apos;,</span><br><span class="line">  component: BookDetails</span><br><span class="line">&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JSON.parse(JSON.stringify(obj))</span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(function (acct, perms) &#123;</span><br><span class="line">    // Both requests are now complete</span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.mp.itc.cn/upload/20170113/539d5ba608774c0f99693f2d8c031d3a_th.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;后端专注在数据上，前端专注在交互和可视化上&lt;br&gt;单页应用spa：在前后端分离的基础上，加一层前端路由&lt;br&gt;
    
    </summary>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vue-router" scheme="http://yoursite.com/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>javascript数组快排</title>
    <link href="http://yoursite.com/2018/05/15/javascript%E6%95%B0%E7%BB%84%E5%BF%AB%E6%8E%92/"/>
    <id>http://yoursite.com/2018/05/15/javascript数组快排/</id>
    <published>2018-05-15T14:31:19.000Z</published>
    <updated>2018-05-26T15:46:14.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="最近一则微博引发热议，阮的网站被ddos攻击"><a href="#最近一则微博引发热议，阮的网站被ddos攻击" class="headerlink" title="最近一则微博引发热议，阮的网站被ddos攻击"></a>最近一则微博引发热议，阮的网站被ddos攻击</h6><blockquote><p><a href="https://weibo.com/1967949210/GfR1K88HO?filter=hot&amp;root_comment_id=0&amp;type=comment" target="_blank" rel="noopener">微博链接</a></p></blockquote><h6 id="看评论，推测面试的很多前端都是用的这个数组快排版本"><a href="#看评论，推测面试的很多前端都是用的这个数组快排版本" class="headerlink" title="看评论，推测面试的很多前端都是用的这个数组快排版本"></a>看评论，推测面试的很多前端都是用的这个数组快排版本</h6><a id="more"></a><h4 id="先来一个热热身：-数组去重"><a href="#先来一个热热身：-数组去重" class="headerlink" title="先来一个热热身： 数组去重"></a>先来一个热热身： 数组去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=&quot;javascript&quot;&gt;</span><br><span class="line">//从一个给定的数组arr中,随机返回num个不重复项</span><br><span class="line">function getArrayItems(arr, num) &#123;</span><br><span class="line">    //新建一个数组,将传入的数组复制过来,用于运算,而不要直接操作传入的数组;</span><br><span class="line">    var temp_array = new Array();</span><br><span class="line">    for (var index in arr) &#123;</span><br><span class="line">        temp_array.push(arr[index]);</span><br><span class="line">    &#125;</span><br><span class="line">    //取出的数值项,保存在此数组</span><br><span class="line">    var return_array = new Array();</span><br><span class="line">    for (var i = 0; i&lt;num; i++) &#123;</span><br><span class="line">        //判断如果数组还有可以取出的元素,以防下标越界</span><br><span class="line">        if (temp_array.length&gt;0) &#123;</span><br><span class="line">            //在数组中产生一个随机索引</span><br><span class="line">            var arrIndex = Math.floor(Math.random()*temp_array.length);</span><br><span class="line">            //将此随机索引的对应的数组元素值复制出来</span><br><span class="line">            return_array[i] = temp_array[arrIndex];</span><br><span class="line">            //然后删掉此索引的数组元素,这时候temp_array变为新的数组</span><br><span class="line">            temp_array.splice(arrIndex, 1);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //数组中数据项取完后,退出循环,比如数组本来只有10项,但要求取出20项.</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return return_array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//测试</span><br><span class="line">var ArrList=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,</span><br><span class="line">19,20,21,22,23,24,25,26,27,28,29,30,31,32,33];</span><br><span class="line">alert(getArrayItems(ArrList,6));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="使用快速排序的思想并实现一个快排（阮的版本）"><a href="#使用快速排序的思想并实现一个快排（阮的版本）" class="headerlink" title="使用快速排序的思想并实现一个快排（阮的版本）"></a>使用快速排序的思想并实现一个快排（阮的版本）</h4><p>“快速排序”的思想很简单，整个排序过程只需要三步：</p><p>（1）在数据集之中，找一个基准点<br>（2）建立两个数组，分别存储左边和右边的数组<br>（3）利用递归进行下次比较<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function quickSort(arr)&#123;</span><br><span class="line">    if(arr.length&lt;=1)&#123;</span><br><span class="line">        return arr;//如果数组只有一个数，就直接返回；</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var num = Math.floor(arr.length/2);//找到中间数的索引值，如果是浮点数，则向下取整</span><br><span class="line"></span><br><span class="line">    var numValue = arr.splice(num,1);//找到中间数的值</span><br><span class="line">    var left = [];</span><br><span class="line">    var right = [];</span><br><span class="line"></span><br><span class="line">    for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">        if(arr[i]&lt;numValue)&#123;</span><br><span class="line">            left.push(arr[i]);//基准点的左边的数传到左边数组</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">           right.push(arr[i]);//基准点的右边的数传到右边数组</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return quickSort(left).concat([numValue],quickSort(right));//递归不断重复比较</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(quickSort([32,45,37,16,2,87]));//弹出“2,16,32,37,45,87”</span><br></pre></td></tr></table></figure></p><h5 id="相比splice开两个临时数组，增加时间空间复杂度，直接操作数组下标更有效率"><a href="#相比splice开两个临时数组，增加时间空间复杂度，直接操作数组下标更有效率" class="headerlink" title="相比splice开两个临时数组，增加时间空间复杂度，直接操作数组下标更有效率"></a>相比splice开两个临时数组，增加时间空间复杂度，直接操作数组下标更有效率</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function (array) &#123;</span><br><span class="line">    //var array = [8,4,6,2,7,9,3,5,74,5]; </span><br><span class="line">    //var array =[0,1,2,44,4,324,5,65,6,6,34,4,5,6,2,43,5,6]; </span><br><span class="line">    var i = 0;</span><br><span class="line">    var j = array.length - 1;</span><br><span class="line">    var Sort = function (i, j) &#123;</span><br><span class="line">        // 结束条件 </span><br><span class="line">        if (i == j) &#123; return &#125;; var key = array[i]; var tempi = i;</span><br><span class="line">        // 记录开始位置 var tempj = j; // 记录结束位置 </span><br><span class="line">        while (j &gt; i) &#123;</span><br><span class="line">            // j &lt;&lt;-------------- 向前查找 </span><br><span class="line">            if (array[j] &gt;= key) &#123; j--; &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                array[i] = array[j] //i++ ------------&gt;&gt;向后查找 </span><br><span class="line">                while (j &gt; ++i) &#123;</span><br><span class="line">                    if (array[i] &gt; key) &#123;</span><br><span class="line">                        array[j] = array[i]; break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; // 如果第一个取出的 key 是最小的数 </span><br><span class="line">        if (tempi == i) &#123;</span><br><span class="line">            Sort(++i, tempj); return;</span><br><span class="line">        &#125;</span><br><span class="line">        // 最后一个空位留给 </span><br><span class="line">        key array[i] = key;</span><br><span class="line">        // 递归 Sort(tempi, i); </span><br><span class="line">        Sort(j, tempj);</span><br><span class="line">    &#125; Sort(i, j);</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.nczonline.net/blog/2012/11/27/computer-science-in-javascript-quicksort/" target="_blank" rel="noopener">详细步骤及原理请参考</a></p><h4 id="想想还是冒泡排序最朴-效-实-率-无-低-华-下"><a href="#想想还是冒泡排序最朴-效-实-率-无-低-华-下" class="headerlink" title="想想还是冒泡排序最朴(效)实(率)无(低)华(下)"></a>想想还是冒泡排序最朴(效)实(率)无(低)华(下)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var array = [1,4,-8,-3,6,12,9,8];</span><br><span class="line">function sort(arr)&#123;</span><br><span class="line">    for(var j=0;j&lt;arr.length-1;j++)&#123;</span><br><span class="line">    //两两比较，如果前一个比后一个大，则交换位置。</span><br><span class="line">       for(var i=0;i&lt;arr.length-1-j;i++)&#123;</span><br><span class="line">            if(arr[i]&gt;arr[i+1])&#123;</span><br><span class="line">                var temp = arr[i];</span><br><span class="line">                arr[i] = arr[i+1];</span><br><span class="line">                arr[i+1] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(array);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;最近一则微博引发热议，阮的网站被ddos攻击&quot;&gt;&lt;a href=&quot;#最近一则微博引发热议，阮的网站被ddos攻击&quot; class=&quot;headerlink&quot; title=&quot;最近一则微博引发热议，阮的网站被ddos攻击&quot;&gt;&lt;/a&gt;最近一则微博引发热议，阮的网站被ddos攻击&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://weibo.com/1967949210/GfR1K88HO?filter=hot&amp;amp;root_comment_id=0&amp;amp;type=comment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微博链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;看评论，推测面试的很多前端都是用的这个数组快排版本&quot;&gt;&lt;a href=&quot;#看评论，推测面试的很多前端都是用的这个数组快排版本&quot; class=&quot;headerlink&quot; title=&quot;看评论，推测面试的很多前端都是用的这个数组快排版本&quot;&gt;&lt;/a&gt;看评论，推测面试的很多前端都是用的这个数组快排版本&lt;/h6&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>图片格式</title>
    <link href="http://yoursite.com/2018/05/13/%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/05/13/图片格式/</id>
    <published>2018-05-12T16:07:43.000Z</published>
    <updated>2018-05-15T12:16:04.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="项目中gif-jpg-png-到底用什么图片格式？虽然有ui给图拿来即用，那他们的区别优势都是什么呢，网上搜罗一些资料，简单记录一下"><a href="#项目中gif-jpg-png-到底用什么图片格式？虽然有ui给图拿来即用，那他们的区别优势都是什么呢，网上搜罗一些资料，简单记录一下" class="headerlink" title="项目中gif jpg png 到底用什么图片格式？虽然有ui给图拿来即用，那他们的区别优势都是什么呢，网上搜罗一些资料，简单记录一下"></a>项目中gif jpg png 到底用什么图片格式？虽然有ui给图拿来即用，那他们的区别优势都是什么呢，网上搜罗一些资料，简单记录一下</h6><a id="more"></a><h2 id="Gif格式特点"><a href="#Gif格式特点" class="headerlink" title="Gif格式特点:"></a>Gif格式特点:</h2><pre><code>透明性,Gif是一种布尔透明类型，既它可以是全透明，也可以是全不透明，但是它并没有半透明（alpha透明）。动画,Gif这种格式支持动画。无损耗性,Gif是一种无损耗的图像格式，这也意味着你可以对gif图片做任何操作也不会使得图像质量产生损耗。</code></pre><p>水平扫描,Gif是使用了一种叫作LZW的算法进行压缩的，当压缩gif的过程中，像素是由上到下水平压缩的，这也意味着同等条件下，横向的gif图片比竖向的gif图片更加小。例如500<em>10的图片比10</em>500的图片更加小<br>间隔渐进显示,Gif支持可选择性的间隔渐进显示<br>由以上特点看出只有256种颜色的gif图片不适合照片，但它适合对颜色要求不高的图形（比如说图标，图表等），它并不是最优的选择，我们会在后面中看到png是最优的选择。</p><h2 id="Jpeg（jpg）格式特点"><a href="#Jpeg（jpg）格式特点" class="headerlink" title="Jpeg（jpg）格式特点:"></a>Jpeg（jpg）格式特点:</h2><pre><code>透明性,它并不支持透明。动画,它也不支持动画。</code></pre><p>损耗性,除了一些比如说旋转（仅仅是90、180、270度旋转），裁切，从标准类型到先进类型，编辑图片的原数据之外，所有其它操作对jpeg图像的处理都会使得它的质量损失。所以我们在编辑过程一般用png作为过渡格式。<br>隔行渐进显示,它支持隔行渐进显示（但是ie浏览器并不支持这个属性，但是ie会在整个图像信息完全到达的时候显示）。<br>由上可以看出Jpeg是最适web上面的摄影图片和数字照相机中。</p><h2 id="Png格式特点"><a href="#Png格式特点" class="headerlink" title="Png格式特点:"></a>Png格式特点:</h2><p>类型,Png这种图片格式包括了许多子类，但是在实践中大致可以分为256色的png和全色的png，你完成可以用256色的png代替gif，用全色的png代替jpeg<br>透明性,Png是完全支持alpha透明的（透明，半透明，不透明），尽管有两个怪异的现象在ie6（下面详细讨论）<br>动画,它不支持动画<br>PNG图片格式现在包含三种类型：</p><p>PNG8256色PNG的别名<br>PNG24全色PNG的别名<br>PNG32全色PNG的别名<br>　　基本上PNG32就是PNG24，但是附带了全alpha通道。就是说每个像素上不仅存储了24位真色彩信息还存储了8位的alpha通道信息，就如同GIF能存储透明和不透明信息一样。当我们把图片放到不太搭配的背景上的时候，透明PNG图片的边缘会显示得更加平滑。<br>　　当然，我也知道你的想法，“但是Photoshop也能生成带透明通道的PNG图片！”我也知道，它只是表面上这么说是PNG24，让我也产生困惑了。<br>　　作为一个伤感的Fireworks倡导者，我只使用PNG32支持附带alpha通道的真色彩图片。不管怎样，如果你习惯使用Photoshop，你就应该知道，Photoshop在“存储为WEB格式”中只提供PNG8和PNG24两种PNG格式。<br>　　我敢肯定你经常会勾选“支持透明”选项，以获得带有透明度的PNG图片，但是这样你就获取了一张PNG32图片。——Photoshop只是觉得把PNG32这个名称给隐藏掉了。。。。</p><p>对png8的误解<br>Png8的在ie中的怪异表现：<br>　　半透明的png8在ie6以下的浏览器显示为全透明。<br>Alpha透明的全色PNG（png32）在ie6中会出现背景颜色（通常是灰色）。</p><h2 id="由上面可以总结："><a href="#由上面可以总结：" class="headerlink" title="　　由上面可以总结："></a>　　由上面可以总结：</h2><p>　　（a）全透明的png8可以在任一浏览器正常显示（就像gif一样）。半透明的png8在除了ie6及其以下的浏览器下错误的显示成全透明，其它浏览器都能正常显示半透明。这个bug并不需要特殊对待，因为在不支持半透明的浏览器下只是显示为全透明，对用户体验影响不大，它反而是透明gif的加强版。<br>　　（b）第二个bug没有什么好的方法解决，只能通过影响性能的方法AlphaImageLoader与需要加特殊标签（VML）。<br>　　因此得出结论就是：请使用PNG8。<br>Png8的软件问题：<br>Photoshop只能导出布尔透明的PNG8。<br>Fireworks既能导出布尔透明的PNG8，也能导出alpha透明的PNG8.</p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;项目中gif-jpg-png-到底用什么图片格式？虽然有ui给图拿来即用，那他们的区别优势都是什么呢，网上搜罗一些资料，简单记录一下&quot;&gt;&lt;a href=&quot;#项目中gif-jpg-png-到底用什么图片格式？虽然有ui给图拿来即用，那他们的区别优势都是什么呢，网上搜罗一些资料，简单记录一下&quot; class=&quot;headerlink&quot; title=&quot;项目中gif jpg png 到底用什么图片格式？虽然有ui给图拿来即用，那他们的区别优势都是什么呢，网上搜罗一些资料，简单记录一下&quot;&gt;&lt;/a&gt;项目中gif jpg png 到底用什么图片格式？虽然有ui给图拿来即用，那他们的区别优势都是什么呢，网上搜罗一些资料，简单记录一下&lt;/h6&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>proxyTable解决跨域问题</title>
    <link href="http://yoursite.com/2018/05/13/proxyTable%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/05/13/proxyTable解决跨域问题/</id>
    <published>2018-05-12T16:05:52.000Z</published>
    <updated>2018-05-22T17:18:42.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="和后端联调时总是会面对恼人的跨域问题，最近基于Vue开发项目时也遇到了这个问题，两边各自想了一堆办法，查了一堆资料，加了一堆参数，最后还得我把自己的localhost映射成上线时将要使用的域名。今天翻看代码时，突然发现vue-cli的config文件里有一个参数叫proxyTable，看这个名字就感觉能解决问题，于是我就去搜了一下，果然。在vuejs-templates，也就是vue-cli的使用的模板插件里，有关于API-proxy的说明，使用的就是这个参数。"><a href="#和后端联调时总是会面对恼人的跨域问题，最近基于Vue开发项目时也遇到了这个问题，两边各自想了一堆办法，查了一堆资料，加了一堆参数，最后还得我把自己的localhost映射成上线时将要使用的域名。今天翻看代码时，突然发现vue-cli的config文件里有一个参数叫proxyTable，看这个名字就感觉能解决问题，于是我就去搜了一下，果然。在vuejs-templates，也就是vue-cli的使用的模板插件里，有关于API-proxy的说明，使用的就是这个参数。" class="headerlink" title="和后端联调时总是会面对恼人的跨域问题，最近基于Vue开发项目时也遇到了这个问题，两边各自想了一堆办法，查了一堆资料，加了一堆参数，最后还得我把自己的localhost映射成上线时将要使用的域名。今天翻看代码时，突然发现vue-cli的config文件里有一个参数叫proxyTable，看这个名字就感觉能解决问题，于是我就去搜了一下，果然。在vuejs-templates，也就是vue-cli的使用的模板插件里，有关于API proxy的说明，使用的就是这个参数。"></a>和后端联调时总是会面对恼人的跨域问题，最近基于Vue开发项目时也遇到了这个问题，两边各自想了一堆办法，查了一堆资料，加了一堆参数，最后还得我把自己的localhost映射成上线时将要使用的域名。今天翻看代码时，突然发现vue-cli的config文件里有一个参数叫proxyTable，看这个名字就感觉能解决问题，于是我就去搜了一下，果然。在vuejs-templates，也就是vue-cli的使用的模板插件里，有关于API proxy的说明，使用的就是这个参数。</h6><a id="more"></a><blockquote><p><a href="https://vuejs-templates.github.io/webpack/proxy.html" target="_blank" rel="noopener">https://vuejs-templates.github.io/webpack/proxy.html</a></p></blockquote><p>这个参数主要是一个地址映射表，你可以通过设置将复杂的url简化，例如我们要请求的地址是</p><p>api.xxxxxxxx.com/list/1 可以按照如下设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">  &apos;/list&apos;: &#123;</span><br><span class="line">    target: &apos;http://api.xxxxxxxx.com&apos;,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      &apos;^/list&apos;: &apos;/list&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们在写url的时候，只用写成/list/1就可以代表api.xxxxxxxx.com/list/1.<br>那么又是如何解决跨域问题的呢？其实在上面的’list’的参数里有一个changeOrigin参数，接收一个布尔值，如果设置为true,那么本地会虚拟一个服务端接收你的请求并代你发送该请求，这样就不会有跨域问题了，当然这只适用于开发环境。增加的代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">  &apos;/list&apos;: &#123;</span><br><span class="line">    target: &apos;http://api.xxxxxxxx.com&apos;,</span><br><span class="line">    changeOrigin: true,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      &apos;^/list&apos;: &apos;/list&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vue-cli的这个设置来自于其使用的插件http-proxy-middleware</p><blockquote><p>github：<a href="https://github.com/chimurai/http-proxy-middleware" target="_blank" rel="noopener">https://github.com/chimurai/http-proxy-middleware</a></p></blockquote><p>深入了解的话可以看该插件配置说明，似乎还支持websocket，很强大的插件。</p><p>API Proxying During Development<br>When integrating this boilerplate with an existing backend, a common need is to access the backend API when using the dev server. To achieve that, we can run the dev server and the API backend side-by-side (or remotely), and let the dev server proxy all API requests to the actual backend.</p><p>To configure the proxy rules, edit dev.proxyTable option in config/index.js. The dev server is using http-proxy-middleware for proxying, so you should refer to its docs for detailed usage. But here’s a simple example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// config/index.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  dev: &#123;</span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">      // proxy all requests starting with /api to jsonplaceholder</span><br><span class="line">      &apos;/api&apos;: &#123;</span><br><span class="line">        target: &apos;http://jsonplaceholder.typicode.com&apos;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          &apos;^/api&apos;: &apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The above example will proxy the request /api/posts/1<br>to <a href="http://jsonplaceholder.typicode.com/posts/1" target="_blank" rel="noopener">http://jsonplaceholder.typicode.com/posts/1</a>.</p></blockquote><blockquote><p>config/index.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// see http://vuejs-templates.github.io/webpack for documentation.</span><br><span class="line">var path = require(&apos;path&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  build: &#123;</span><br><span class="line">    env: require(&apos;./prod.env&apos;),</span><br><span class="line">    index: path.resolve(__dirname, &apos;../dist/index.html&apos;),</span><br><span class="line">    assetsRoot: path.resolve(__dirname, &apos;../dist&apos;),</span><br><span class="line">    assetsSubDirectory: &apos;static&apos;,</span><br><span class="line">    assetsPublicPath: &apos;/&apos;,</span><br><span class="line">    productionSourceMap: true,</span><br><span class="line">    // Gzip off by default as many popular static hosts such as</span><br><span class="line">    // Surge or Netlify already gzip all static assets for you.</span><br><span class="line">    // Before setting to `true`, make sure to:</span><br><span class="line">    // npm install --save-dev compression-webpack-plugin</span><br><span class="line">    productionGzip: false,</span><br><span class="line">    productionGzipExtensions: [&apos;js&apos;, &apos;css&apos;],</span><br><span class="line">    // Run the build command with an extra argument to</span><br><span class="line">    // View the bundle analyzer report after build finishes:</span><br><span class="line">    // `npm run build --report`</span><br><span class="line">    // Set to `true` or `false` to always turn it on or off</span><br><span class="line">    bundleAnalyzerReport: process.env.npm_config_report</span><br><span class="line">  &#125;,</span><br><span class="line">  dev: &#123;</span><br><span class="line">    env: require(&apos;./dev.env&apos;),</span><br><span class="line">    port: 8080,</span><br><span class="line">    autoOpenBrowser: true,</span><br><span class="line">    assetsSubDirectory: &apos;static&apos;,</span><br><span class="line">    assetsPublicPath: &apos;/&apos;,</span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">      &apos;/api/v1&apos;: &#123;</span><br><span class="line">        target: &apos;http://10.88.190.5:9000&apos;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        onProxyReq (proxyReq, req, res) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // CSS Sourcemaps off by default because relative paths are &quot;buggy&quot;</span><br><span class="line">    // with this option, according to the CSS-Loader README</span><br><span class="line">    // (https://github.com/webpack/css-loader#sourcemaps)</span><br><span class="line">    // In our experience, they generally work as expected,</span><br><span class="line">    // just be aware of this issue when enabling this option.</span><br><span class="line">    cssSourceMap: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;和后端联调时总是会面对恼人的跨域问题，最近基于Vue开发项目时也遇到了这个问题，两边各自想了一堆办法，查了一堆资料，加了一堆参数，最后还得我把自己的localhost映射成上线时将要使用的域名。今天翻看代码时，突然发现vue-cli的config文件里有一个参数叫proxyTable，看这个名字就感觉能解决问题，于是我就去搜了一下，果然。在vuejs-templates，也就是vue-cli的使用的模板插件里，有关于API-proxy的说明，使用的就是这个参数。&quot;&gt;&lt;a href=&quot;#和后端联调时总是会面对恼人的跨域问题，最近基于Vue开发项目时也遇到了这个问题，两边各自想了一堆办法，查了一堆资料，加了一堆参数，最后还得我把自己的localhost映射成上线时将要使用的域名。今天翻看代码时，突然发现vue-cli的config文件里有一个参数叫proxyTable，看这个名字就感觉能解决问题，于是我就去搜了一下，果然。在vuejs-templates，也就是vue-cli的使用的模板插件里，有关于API-proxy的说明，使用的就是这个参数。&quot; class=&quot;headerlink&quot; title=&quot;和后端联调时总是会面对恼人的跨域问题，最近基于Vue开发项目时也遇到了这个问题，两边各自想了一堆办法，查了一堆资料，加了一堆参数，最后还得我把自己的localhost映射成上线时将要使用的域名。今天翻看代码时，突然发现vue-cli的config文件里有一个参数叫proxyTable，看这个名字就感觉能解决问题，于是我就去搜了一下，果然。在vuejs-templates，也就是vue-cli的使用的模板插件里，有关于API proxy的说明，使用的就是这个参数。&quot;&gt;&lt;/a&gt;和后端联调时总是会面对恼人的跨域问题，最近基于Vue开发项目时也遇到了这个问题，两边各自想了一堆办法，查了一堆资料，加了一堆参数，最后还得我把自己的localhost映射成上线时将要使用的域名。今天翻看代码时，突然发现vue-cli的config文件里有一个参数叫proxyTable，看这个名字就感觉能解决问题，于是我就去搜了一下，果然。在vuejs-templates，也就是vue-cli的使用的模板插件里，有关于API proxy的说明，使用的就是这个参数。&lt;/h6&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>git添加ssh密钥</title>
    <link href="http://yoursite.com/2018/05/13/git%E6%B7%BB%E5%8A%A0ssh%E5%AF%86%E9%92%A5/"/>
    <id>http://yoursite.com/2018/05/13/git添加ssh密钥/</id>
    <published>2018-05-12T16:03:27.000Z</published>
    <updated>2018-05-20T06:36:36.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="秉承能偷懒就偷懒的原则（不想输密码），为你的git仓库添加ssh密钥"><a href="#秉承能偷懒就偷懒的原则（不想输密码），为你的git仓库添加ssh密钥" class="headerlink" title="秉承能偷懒就偷懒的原则（不想输密码），为你的git仓库添加ssh密钥"></a>秉承能偷懒就偷懒的原则（不想输密码），为你的git仓库添加ssh密钥</h6><a id="more"></a><p>1、设置Git的user name和email：(如果是第一次的话)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    $ git config --global user.name &quot;yourname&quot;</span><br><span class="line">$ git config --global user.email &quot;youname@gmail.com&quot;</span><br></pre></td></tr></table></figure><p>2、生成密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;yourname@gmail.come&quot;</span><br></pre></td></tr></table></figure><p>连续3个回车。如果不需要密码的话。<br>最后得到了两个文件：id_rsa和id_rsa.pub。</p><p>如果不是第一次，就选择overwrite.</p><p>3、添加密钥到ssh-agent<br>确保 ssh-agent 是可用的。ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，其实ssh-agent就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。</p><pre><code># start the ssh-agent in the backgroundeval &quot;$(ssh-agent -s)&quot;Agent pid 59566</code></pre><p>添加生成的 SSH key 到 ssh-agent。</p><pre><code>$ ssh-add ~/.ssh/id_rsa</code></pre><p>4、登陆Github, 添加 ssh 。<br>把id_rsa.pub文件里的内容复制到这里</p><p>5、测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>你将会看到：</p><pre><code>The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?</code></pre><p>选择 yes</p><pre><code>Hi yourname! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p>如果看到Hi后面是你的用户名，就说明成功了。</p><p>6、修改.git文件夹下config中的url。<br>修改前</p><pre><code>[remote &quot;origin&quot;]url = https://github.com/humingx/yourname.github.io.gitfetch = +refs/heads/*:refs/remotes/origin/*</code></pre><p>修改后</p><pre><code>[remote &quot;origin&quot;]url = git@github.com:humingx/yourname.github.io.gitfetch = +refs/heads/*:refs/remotes/origin/*</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;秉承能偷懒就偷懒的原则（不想输密码），为你的git仓库添加ssh密钥&quot;&gt;&lt;a href=&quot;#秉承能偷懒就偷懒的原则（不想输密码），为你的git仓库添加ssh密钥&quot; class=&quot;headerlink&quot; title=&quot;秉承能偷懒就偷懒的原则（不想输密码），为你的git仓库添加ssh密钥&quot;&gt;&lt;/a&gt;秉承能偷懒就偷懒的原则（不想输密码），为你的git仓库添加ssh密钥&lt;/h6&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>sass语法</title>
    <link href="http://yoursite.com/2018/05/13/sass%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/13/sass语法/</id>
    <published>2018-05-12T16:02:19.000Z</published>
    <updated>2018-05-22T17:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="用过的都知道，相比css样式表，sass使用更加方便高效（还是因为懒-）"><a href="#用过的都知道，相比css样式表，sass使用更加方便高效（还是因为懒-）" class="headerlink" title="用过的都知道，相比css样式表，sass使用更加方便高效（还是因为懒..）"></a>用过的都知道，相比css样式表，sass使用更加方便高效（还是因为懒..）</h6><a id="more"></a><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>sass中可以定义变量，方便统一修改和维护。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-----------------------------------</span><br><span class="line"></span><br><span class="line">$fontStack:    Helvetica, sans-serif;</span><br><span class="line">$primaryColor: #333;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  font-family: $fontStack;</span><br><span class="line">  color: $primaryColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  font-family: Helvetica, sans-serif;</span><br><span class="line">  color: #333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><p>sass可以进行选择器的嵌套，表示层级关系，看起来很优雅整齐。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-----------------------------------</span><br><span class="line">nav &#123;</span><br><span class="line">  ul &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    list-style: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li &#123; display: inline-block; &#125;</span><br><span class="line"></span><br><span class="line">  a &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    padding: 6px 12px;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line">nav ul &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  list-style: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nav li &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nav a &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 6px 12px;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>sass中如导入其他sass文件，最后编译为一个css文件，优于纯css的@import</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-----------------------------------</span><br><span class="line">// _reset.scss</span><br><span class="line"></span><br><span class="line">html,</span><br><span class="line">body,</span><br><span class="line">ul,</span><br><span class="line">ol &#123;</span><br><span class="line">   margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">//sass style</span><br><span class="line">//-----------------------------------</span><br><span class="line">// base.scss </span><br><span class="line"></span><br><span class="line">@import &apos;reset&apos;;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  font-size: 100% Helvetica, sans-serif;</span><br><span class="line">  background-color: #efefef;</span><br><span class="line">&#125;</span><br><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line">html, body, ul, ol &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  background-color: #efefef;</span><br><span class="line">  font-size: 100% Helvetica, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h4><p>sass中可用mixin定义一些代码片段，且可传参数，方便日后根据需求调用。从此处理css3的前缀兼容轻松便捷。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-----------------------------------</span><br><span class="line">@mixin box-sizing ($sizing) &#123;</span><br><span class="line">    -webkit-box-sizing:$sizing;     </span><br><span class="line">       -moz-box-sizing:$sizing;</span><br><span class="line">            box-sizing:$sizing;</span><br><span class="line">&#125;</span><br><span class="line">.box-border&#123;</span><br><span class="line">    border:1px solid #ccc;</span><br><span class="line">    @include box-sizing(border-box);</span><br><span class="line">&#125;</span><br><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line">.box-border &#123;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  -webkit-box-sizing: border-box;</span><br><span class="line">  -moz-box-sizing: border-box;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩展-继承"><a href="#扩展-继承" class="headerlink" title="扩展/继承"></a>扩展/继承</h4><p>sass可通过@extend来实现代码组合声明，使代码更加优越简洁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-----------------------------------</span><br><span class="line">.message &#123;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  color: #333;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.success &#123;</span><br><span class="line">  @extend .message;</span><br><span class="line">  border-color: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.error &#123;</span><br><span class="line">  @extend .message;</span><br><span class="line">  border-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.warning &#123;</span><br><span class="line">  @extend .message;</span><br><span class="line">  border-color: yellow;</span><br><span class="line">&#125;</span><br><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line">.message, .success, .error, .warning &#123;</span><br><span class="line">  border: 1px solid #cccccc;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  color: #333;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.success &#123;</span><br><span class="line">  border-color: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.error &#123;</span><br><span class="line">  border-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.warning &#123;</span><br><span class="line">  border-color: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><p>sass可进行简单的加减乘除运算等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-----------------------------------</span><br><span class="line">.container &#123; width: 100%; &#125;</span><br><span class="line"></span><br><span class="line">article[role=&quot;main&quot;] &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  width: 600px / 960px * 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aside[role=&quot;complimentary&quot;] &#123;</span><br><span class="line">  float: right;</span><br><span class="line">  width: 300px / 960px * 100%;</span><br><span class="line">&#125;</span><br><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line">.container &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">article[role=&quot;main&quot;] &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  width: 62.5%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aside[role=&quot;complimentary&quot;] &#123;</span><br><span class="line">  float: right;</span><br><span class="line">  width: 31.25%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><p>sass中集成了大量的颜色函数，让变换颜色更加简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-----------------------------------</span><br><span class="line">$linkColor: #08c;</span><br><span class="line">a &#123;</span><br><span class="line">    text-decoration:none;</span><br><span class="line">    color:$linkColor;</span><br><span class="line">    &amp;:hover&#123;</span><br><span class="line">      color:darken($linkColor,10%);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line">a &#123;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  color: #0088cc;</span><br><span class="line">&#125;</span><br><span class="line">a:hover &#123;</span><br><span class="line">  color: #006699;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;用过的都知道，相比css样式表，sass使用更加方便高效（还是因为懒-）&quot;&gt;&lt;a href=&quot;#用过的都知道，相比css样式表，sass使用更加方便高效（还是因为懒-）&quot; class=&quot;headerlink&quot; title=&quot;用过的都知道，相比css样式表，sass使用更加方便高效（还是因为懒..）&quot;&gt;&lt;/a&gt;用过的都知道，相比css样式表，sass使用更加方便高效（还是因为懒..）&lt;/h6&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>第一个python程序</title>
    <link href="http://yoursite.com/2018/05/13/%E7%AC%AC%E4%B8%80%E4%B8%AApython%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/05/13/第一个python程序/</id>
    <published>2018-05-12T16:00:13.000Z</published>
    <updated>2018-05-15T12:15:52.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="Python-是一门简单易学且功能强大的编程语言。-它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。-Python-优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。"><a href="#Python-是一门简单易学且功能强大的编程语言。-它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。-Python-优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。" class="headerlink" title="Python 是一门简单易学且功能强大的编程语言。 它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。 Python 优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。"></a>Python 是一门简单易学且功能强大的编程语言。 它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。 Python 优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。</h6><a id="more"></a><h2 id="Python-快速入门"><a href="#Python-快速入门" class="headerlink" title="Python 快速入门"></a>Python 快速入门</h2><h2 id="一、实验介绍"><a href="#一、实验介绍" class="headerlink" title="一、实验介绍"></a>一、实验介绍</h2><h3 id="1-1-实验内容"><a href="#1-1-实验内容" class="headerlink" title="1.1 实验内容"></a>1.1 实验内容</h3><p>本章介绍Python的基本感概念，Python既可以在交互式解释器中运行也可以在用源代码方式运行，可以用<br><code>help()</code><br> 查看函数或模块的帮助</p><h3 id="1-2-实验知识点"><a href="#1-2-实验知识点" class="headerlink" title="1.2 实验知识点"></a>1.2 实验知识点</h3><ul><li>Python基本概念(数（包含整数、长整数、浮点数和复数），字符串和对象)<h3 id="1-3-实验环境"><a href="#1-3-实验环境" class="headerlink" title="1.3 实验环境"></a>1.3 实验环境</h3></li><li>python2.7</li><li>Xfce终端<h3 id="1-4-适合人群"><a href="#1-4-适合人群" class="headerlink" title="1.4 适合人群"></a>1.4 适合人群</h3>本课程难度为初级，适合没有编程经验的初学者。</li></ul><h2 id="二、实验步骤"><a href="#二、实验步骤" class="headerlink" title="二、实验步骤"></a>二、实验步骤</h2><h3 id="2-1-Python介绍"><a href="#2-1-Python介绍" class="headerlink" title="2.1.Python介绍"></a>2.1.Python介绍</h3><p>Python 是一门简单易学且功能强大的编程语言。 它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。 Python 优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。</p><h3 id="2-2-安装Python"><a href="#2-2-安装Python" class="headerlink" title="2.2 安装Python"></a>2.2 安装Python</h3><p>Linux操作系统已经内置了Python，如果是Windows的话，需要到<a href="https://www.python.org/" target="_blank" rel="noopener">Python官网下载</a>，基本一直点击下一步就可以安装到Win32系统。本实验在Linux下进行，所以无需再安装。现在几乎所有的Linux发行版，都会预装python2.x版本。</p><blockquote><p>请选择python2.7的版本，这个版本是官方在python3.0之前的最后一个版本，用于和最新的3.x过渡的，所以2.7不仅包含了老版本的所有属性，也含有了新版的很多特性，作为入门的话，是非常合适的。</p></blockquote><h3 id="2-3第一个Python程序"><a href="#2-3第一个Python程序" class="headerlink" title="2.3第一个Python程序"></a>2.3第一个Python程序</h3><p>Python编程中由两种方法可以运行你的程序——使用交互式的带提示符的<strong>解释器</strong>或传统的使用<strong>源文件</strong>的方式。</p><p>我们将会使用这两种方式分别输出——“hello, world”</p><h4 id="2-3-1-调用Python交互式解释器"><a href="#2-3-1-调用Python交互式解释器" class="headerlink" title="2.3.1 调用Python交互式解释器"></a>2.3.1 调用Python交互式解释器</h4><p>在Linux命令行的shell提示符下键入python，启动解释器。</p><p>然后输入<code>print ‘hello, world’</code>，然后按Enter键。你应该可以看到输出的单词hello, world。</p><p>Python解释器会在下一行立即给出你输出！你刚才键入的是一句Python 语句 。我们使用print来打印你提供给它的值。这里，我们提供的是字符串’hello, world’，它会被迅速地打印在屏幕上。</p><blockquote><p>如何退出Python提示符</p><p>如果你使用的是Linux，那么按Ctrl+d退出提示符(意思是按住Ctrl键再按d，本课程中出现的组合键都会这样表示)。</p><p>如果是在Windows命令行中，则按Ctrl+z再按Enter。</p><p>有一种更通用的方式，直接输入<code>exit()</code>这个函数，回车之后就会退出。</p></blockquote><p>当输入的程序有错误的时候，解释器将捕获到这个错误，并打印这个错误信息和栈跟踪器。</p><p>以上的错误是因为在print前面多了一个缩进，所以报错提示：<strong>意外出现的缩进</strong></p><p>这里涉及到了Python代码风格的解释，提供一下链接，按需求学习不同的代码风格：</p><p><a href="https://wiki.woodpecker.org.cn/moin/PythonCodingRule" target="_blank" rel="noopener">Python-pep8 官方代码风格指导</a></p><p><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/background/" target="_blank" rel="noopener">Google-python 代码风格指导</a></p><p>如果选择使用pep8风格的话，在linux下有个方便的工具可以对你的python源代码进行格式检查，并提示格式错误在源代码的第几行和错误的原因：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install pep8</span><br></pre></td></tr></table></figure><p>pep8可以直接使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pep8 file.py</span><br></pre></td></tr></table></figure><p>如果<code>file.py</code>有任何违背了pep8格式的地方，都会详细的错误信息都会打印出来，我们可以根据显示的信息去修改我们源代码。</p><h4 id="2-3-2-源文件运行程序"><a href="#2-3-2-源文件运行程序" class="headerlink" title="2.3.2 源文件运行程序"></a>2.3.2 源文件运行程序</h4><p>首先创建一个源文件并用vim打开:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim hello.py</span><br></pre></td></tr></table></figure><p>执行 Python 脚本： BSD 类的 Unix 系统中，Python 脚本可以像 Shell 脚本那样直接执行。只要在脚本文件第一行，指定文件和模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br></pre></td></tr></table></figure><p>源程序编码：默认情况下，Python 源文件是 UTF-8 编码。也可以在 #! 行（首行）后插入至少一行特殊的注释行来定义源文件的编码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#-*- coding: utf-8 -*-</span><br></pre></td></tr></table></figure><p>所以我们最后的源文件是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line"># Filename : hello.py</span><br><span class="line">print &apos;Hello, World&apos;</span><br></pre></td></tr></table></figure><p><code>:wq</code>保存并退出</p><p>运行效果：hello, world</p><p>如果你得到的输出与上面所示的一样，那么恭喜！——你已经成功地运行了你的第一个Python程序。</p><p>万一你得到一个错误，那么请确保你键入的程序准确无误，然后再运行一下程序。注意Python是大小写敏感的，即print与Print不一样——注意前一个是小写p而后一个是大写P。另外，确保在每一行的开始字符前没有空格或者制表符——我们将在后面讨论为什么这点是很重要的。</p><p><strong>它如何工作</strong></p><p>让我们思考一下这个程序的前3行。它们被称作注释——任何在#符号右面的内容都是<strong>注释</strong>。注释主要作为提供给程序读者的笔记。</p><p>Python至少应当有第一行那样的特殊形式的注释。它被称作<strong>组织行</strong>——源文件的头两个字符是#!，后面跟着一个程序。这行告诉你的Linux/Unix系统当你执行你的程序的时候，它应该运行哪个解释器。这会在下一节做详细解释。注意，你总是可以通过在命令行直接指定解释器，从而在任何平台上运行你的程序。就如同命令python hello.py一样。</p><h3 id="2-4-查看帮助"><a href="#2-4-查看帮助" class="headerlink" title="2.4.查看帮助"></a>2.4.查看帮助</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; help(MODULE_NAME)</span><br></pre></td></tr></table></figure><p>将MODULE_NAME替换为需要获得帮助的函数名或模块名即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; help(dir)</span><br></pre></td></tr></table></figure><p>查看dir函数帮助，点击q可以退出</p><h3 id="2-5-可执行的Python程序"><a href="#2-5-可执行的Python程序" class="headerlink" title="2.5 可执行的Python程序"></a>2.5 可执行的Python程序</h3><p>首先我们需要通过chmod命令，给程序可执行的许可，然后运行程序。</p><p>chmod命令用来改变文件的权限，给系统中所有用户对这个源文件的执行许可。然后我们可以直接通过指定源文件的位置来执行程序。我们使用<code>./</code>来指示程序位于当前目录。</p><p>为了更加有趣一些，你可以把你的文件名改成hello（去掉.py后缀），然后运行./hello。这样，这个程序仍然可以工作，因为系统知道它必须用源文件第一行指定的那个解释器来运行程序。</p><p>另外，我们可以直接使用<code>python hello.py</code>运行程序</p><h3 id="2-6-Python基本概念"><a href="#2-6-Python基本概念" class="headerlink" title="2.6 Python基本概念"></a>2.6 Python基本概念</h3><p>仅仅打印”hello, world”是不够的！我们还要做更多的事情——得到一些输入（input），然后做一些操作，再从中得到一些输出（output）。在Python中，我们可以使用常量和变量来完成这些工作。</p><p>我们将用很少的时间，来介绍Python的一些基本概念。</p><h4 id="2-6-1-字面意义上的常量"><a href="#2-6-1-字面意义上的常量" class="headerlink" title="2.6.1 字面意义上的常量"></a>2.6.1 字面意义上的常量</h4><p>一个字面意义上的常量的例子是如同5、1.23、9.25e-3这样的数，或者如同’This is a string’、”It’s a string!”这样的字符串。它们被称作字面意义上的，因为它们具备字面的意义——你按照它们的字面意义使用它们的值。数2总是代表它自己，而不会是别的什么东西——它是一个常量，因为不能改变它的值。因此，所有这些都被称为字面意义上的常量。</p><h4 id="2-6-2-数"><a href="#2-6-2-数" class="headerlink" title="2.6.2 数"></a>2.6.2 数</h4><p>在Python中有4种类型的数 —— 整数、长整数、浮点数和复数。</p><p>一些例子：</p><ol><li>2是一个整数的例子。</li><li>长整数不过是大一些的整数。(10000000000L)</li><li>3.23和52.3E-4是浮点数的例子。E标记表示10的幂。在这里，52.3E-4表示52.3 * 10^-4。(0.00012等价于1.2e-4)</li><li>带有后缀 j 或 J 就被视为虚数。带有非零实部的复数写为 (real+imagj) ，或者可以用 complex(real, imag) 函数创建。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 1j * 1J</span><br><span class="line">(-1+0j)</span><br><span class="line">&gt;&gt;&gt; 1j * complex(0, 1)</span><br><span class="line">(-1+0j)</span><br><span class="line">&gt;&gt;&gt; 3+1j*3</span><br><span class="line">(3+3j)</span><br><span class="line">&gt;&gt;&gt; (3+1j)*3</span><br><span class="line">(9+3j)</span><br><span class="line">&gt;&gt;&gt; (1+2j)/(1+1j)</span><br><span class="line">(1.5+0.5j)</span><br></pre></td></tr></table></figure><h4 id="2-6-3-字符串"><a href="#2-6-3-字符串" class="headerlink" title="2.6.3 字符串"></a>2.6.3 字符串</h4><p>字符串是字符的序列。字符串基本上就是一个个单词组成的语句。</p><p>我几乎可以保证你在每个Python程序中都要用到字符串，所以请特别留心下面这部分的内容。下面告诉你如何在Python中使用字符串。</p><p><strong>使用单引号（’）</strong></p><p>你可以用单引号指示字符串，就如同’Quote me on this’这样。所有的空白，即空格和制表符都照原样保留。</p><p><strong>使用双引号（”）</strong></p><p>在双引号中的字符串与单引号中的字符串的使用完全相同，例如”What’s your name?”。</p><p><strong>使用三引号（’’’或”””, 三个单引号或三个双引号）</strong></p><p>利用三引号，你可以指示一个多行的字符串。你可以在三引号中自由的使用单引号和双引号。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;This is a multi-line string. This is the first line.</span><br><span class="line">This is the second line.</span><br><span class="line">&quot;What&apos;s your name?,&quot; I asked.</span><br><span class="line">He said &quot;Bond, James Bond.&quot;</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><p><strong>转义符</strong></p><p>假设你想要在一个字符串中使用单引号（’），那么你该怎么指示这个字符串？例如，这个字符串是What’s your name?。你肯定不能用<code>‘What’s your name?’</code>来指示它，因为Python会弄不明白这个字符串从何处开始，何处结束。所以，你需要指明单引号而不是字符串的结尾。可以通过转义符来完成这个任务。你用\’来指示单引号——注意这个反斜杠。现在你可以把字符串表示为<code>‘What\‘s your name?’</code>。</p><p>另一个表示这个特别的字符串的方法是<code>‘What’s your name?’</code>，即用双引号。类似地，要在双引号字符串中使用双引号本身的时候，也可以借助于转义符。另外，你可以用转义符<code>\\</code>来指示反斜杠本身。</p><p>值得注意的一件事是，在一个字符串中，行末的单独一个反斜杠表示字符串在下一行继续，而不是开始一个新的行。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;This is the first sentence. \</span><br><span class="line">This is the second sentence.&quot;</span><br><span class="line">等价于&quot;This is the first sentence. This is the second sentence.&quot;</span><br></pre></td></tr></table></figure><p><strong>自然字符串</strong></p><p>如果你想要指示某些不需要如转义符那样的特别处理的字符串，那么你需要指定一个自然字符串。自然字符串通过给字符串加上前缀r或R来指定。例如r”Newlines are indicated by \n”。</p><p>一定要用自然字符串处理正则表达式。否则会需要使用很多的反斜杠。例如，后向引用符可以写成’\1’或r’\1’。</p><p><strong>Unicode字符串</strong></p><p>Unicode是国际文本的标准方法。如果你想要用中文或阿拉伯语等写文本，那么你需要有一个支持Unicode的编辑器。类似地，Python允许你处理Unicode文本——你只需要在字符串前加上前缀u或U。例如，u”This is a Unicode string.”</p><p>记住，在你处理文本文件的时候使用Unicode字符串，特别是当你知道这个文件含有用非英语的语言写的文本。</p><p><strong>按字面意义级联字符串</strong></p><p>如果你把两个字符串按字面意义相邻放着，他们会被Python自动级联。例如，’What\’s’ ‘your name?’会被自动转为”What’s your name?”。</p><p><strong>标识符的命名</strong></p><p>标识符是一个笼统的概念，包括了变量名，函数名，类名，常量名等等。 标识符是用来标识某样东西的名字。在命名标识符的时候，你要遵循这些规则：</p><p>标识符的第一个字符必须是字母表中的字母（大写或小写）或者一个下划线（’ _ ‘）。</p><p>标识符名称的其他部分可以由字母（大写或小写）、下划线（’ _ ‘）或数字（0-9）组成。</p><p>标识符名称是对大小写敏感的。例如，myname和myName不是一个标识符。注意前者中的小写n和后者中的大写N。</p><p>有效标识符名称的例子有i、__my_name、name_23和a1b2_c3。</p><p>无效标识符名称的例子有2things、this is spaced out和my-name。</p><h4 id="2-6-4-对象"><a href="#2-6-4-对象" class="headerlink" title="2.6.4 对象"></a>2.6.4 对象</h4><p>记住，Python把在程序中用到的任何东西都称为对象。这是从广义上说的。因此我们不会说“某某 东西 ”，我们说“某个 对象 ”。</p><p><strong>面向对象编程</strong></p><p>就每一个东西包括数、字符串甚至函数都是对象这一点来说，Python是极其完全地面向对象的。</p><p>我们将看一下如何使用变量和字面意义上的常量。</p><p><strong>如何编写Python程序</strong></p><p>下面是保存和运行Python程序的标准流程。</p><p>打开你最喜欢的编辑器，这里推荐使用vim。<br>输入例子中的程序代码。<br>用注释中给出的文件名把它保存为一个文件，按照惯例把所有的Python程序都以扩展名.py保存，:w var.py。<br>运行解释器命令python var.py或者使用IDLE运行程序。你也可以使用先前介绍的可执行的方法。<br>使用变量和字面意义上的常量</p><p><strong>var.py</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i = 5</span><br><span class="line">print i</span><br><span class="line">i = i + 1</span><br><span class="line">print i</span><br><span class="line"></span><br><span class="line">s = &apos;&apos;&apos;This is a multi-line string.</span><br><span class="line">This is the second line.&apos;&apos;&apos;</span><br><span class="line">print s</span><br></pre></td></tr></table></figure><p>下面来说明一下这个程序如何工作。首先我们使用赋值运算符（=）把一个字面意义上的常数5赋给变量i。这一行称为一个语句。语句声明需要做某件事情，在这个地方我们把变量名i与值5连接在一起。接下来，我们用print语句打印i的值，就是把变量的值打印在屏幕上。</p><p>然后我们对i中存储的值加1，再把它存回i。我们打印它时，得到期望的值6。</p><p>类似地，我们把一个字面意义上的字符串赋给变量s然后打印它。</p><h4 id="2-6-5-缩进"><a href="#2-6-5-缩进" class="headerlink" title="2.6.5 缩进"></a>2.6.5 缩进</h4><p>空白在Python中是重要的。事实上是行首的空白是重要的。它称为缩进。在逻辑行首的空白（空格和制表符）用来决定缩进层次，从而用来决定语句的分组。</p><p>这意味着同一层次的语句必须有相同的缩进。每一组这样的语句称为一个块。我们将在后面的章节中看到有关块的用处的例子。</p><p>你需要记住的一样东西是错误的缩进会引发错误。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = 5</span><br><span class="line"> print &apos;Value is&apos;, i # Error! Notice a single space at the start of the line</span><br><span class="line">print &apos;I repeat, the value is&apos;, i</span><br></pre></td></tr></table></figure><p>当你运行这个程序的时候，你会得到下面的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File &quot;whitespace.py&quot;, line 4</span><br><span class="line">    print &apos;Value is&apos;, i # Error! Notice a single space at the start of the line</span><br><span class="line">    ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>注意，在第二行的行首有一个空格。Python指示的这个错误告诉我们程序的语法是无效的，即程序没有正确地编写。它告诉你，你不能随意地开始新的语句块 （当然除了你一直在使用的主语句块）。何时你能够使用新语句块，将会在后面的章节，如控制流中详细介绍。</p><p>如何缩进</p><p>不要混合使用制表符和空格来缩进，因为这在跨越不同的平台的时候，无法正常工作。强烈建议你在每个缩进层次使用单个制表符或两个或四个空格。选择这三种缩进风格之一。更加重要的是，选择一种风格，然后坚持使用它，即只使用这一种风格。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>Python常用数据类型有字面意义上的常量，数（包含整数、长整数、浮点数和复数），字符串和对象，另外编码过程中要特别注意缩进。</p><p>通过本节实验，了解了python的一些基本用法以及注意事项，希望多加练习，才能更好的掌握python。</p><p>四、参考链接<br>《python官方手册》<a href="http://python.usyiyi.cn/python_278/tutorial/index.html" target="_blank" rel="noopener">http://python.usyiyi.cn/python_278/tutorial/index.html</a></p><p>《简明Python教程》<a href="http://woodpecker.org.cn/abyteofpython_cn/chinese/" target="_blank" rel="noopener">http://woodpecker.org.cn/abyteofpython_cn/chinese/</a></p><p>《Python核心编程(第二版)》</p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;Python-是一门简单易学且功能强大的编程语言。-它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。-Python-优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。&quot;&gt;&lt;a href=&quot;#Python-是一门简单易学且功能强大的编程语言。-它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。-Python-优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。&quot; class=&quot;headerlink&quot; title=&quot;Python 是一门简单易学且功能强大的编程语言。 它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。 Python 优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。&quot;&gt;&lt;/a&gt;Python 是一门简单易学且功能强大的编程语言。 它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。 Python 优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。&lt;/h6&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux操作命令</title>
    <link href="http://yoursite.com/2018/05/12/linux%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/05/12/linux操作命令/</id>
    <published>2018-05-12T15:59:00.000Z</published>
    <updated>2018-05-15T12:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="经常需要上传前端代码到服务器，秉承什么都得会一点的原则，Linux能不会吗？没有机器的小伙伴可以到实验楼自行学习…"><a href="#经常需要上传前端代码到服务器，秉承什么都得会一点的原则，Linux能不会吗？没有机器的小伙伴可以到实验楼自行学习…" class="headerlink" title="经常需要上传前端代码到服务器，秉承什么都得会一点的原则，Linux能不会吗？没有机器的小伙伴可以到实验楼自行学习…"></a>经常需要上传前端代码到服务器，秉承什么都得会一点的原则，Linux能不会吗？没有机器的小伙伴可以到实验楼自行学习…</h6><a id="more"></a><h2 id="Linux操作命令（一）"><a href="#Linux操作命令（一）" class="headerlink" title="Linux操作命令（一）"></a>Linux操作命令（一）</h2><h3 id="一、实验介绍"><a href="#一、实验介绍" class="headerlink" title="一、实验介绍"></a>一、实验介绍</h3><h4 id="1-1-实验内容"><a href="#1-1-实验内容" class="headerlink" title="1.1 实验内容"></a>1.1 实验内容</h4><p>本次实验将介绍 Linux 命令中 ls、cd、pwd 命令的用法。</p><h4 id="1-2-实验知识点"><a href="#1-2-实验知识点" class="headerlink" title="1.2 实验知识点"></a>1.2 实验知识点</h4><ul><li>ls 命令</li><li>cd 命令</li><li>pwd 命令<h4 id="1-3-实验环境"><a href="#1-3-实验环境" class="headerlink" title="1.3 实验环境"></a>1.3 实验环境</h4>课程使用的实验环境为 Ubuntu Linux 14.04 64 位版本。实验中会用到程序：</li></ul><p>Xfce终端</p><h3 id="二、实验步骤"><a href="#二、实验步骤" class="headerlink" title="二、实验步骤"></a>二、实验步骤</h3><h4 id="2-1-ls-命令"><a href="#2-1-ls-命令" class="headerlink" title="2.1 ls 命令"></a>2.1 ls 命令</h4><p>ls 命令是 linux 下最常用的命令，ls 命令就是 list 的缩写。</p><p>ls 用来打印出当前目录的清单。如果 ls 指定其他目录，那么就会显示指定目录里的文件及文件夹清单。</p><p>通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。</p><p><strong>（1）命令格式</strong></p><blockquote><p>ls [选项] [目录名]</p></blockquote><p><strong>（2）常用参数</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-a</td><td>–all 列出目录下的所有文件，包括以 . 开头的隐含文件</td></tr><tr><td>-l</td><td>除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</td></tr><tr><td>-d</td><td>–directory 将目录象文件一样显示，而不是显示其下的文件</td></tr><tr><td>-h</td><td>–human-readable 以容易理解的格式列出文件大小 (例如 1K 234M 2G)</td></tr><tr><td>-t</td><td>以文件修改时间排序</td></tr></tbody></table><p><strong>（3）常用范例</strong></p><p><strong>例一</strong>：列出/home 文件夹下的所有文件和目录的详细资料，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -a -l /home </span><br><span class="line">ls -al /home</span><br></pre></td></tr></table></figure><p>上面两个命令执行结果一样，结果如下：</p><p>注意上图，d 表示目录（directory）， - 表示文件，文件和目录显示的颜色也不同。</p><p><strong>例二</strong>：列出当前目录中所有以”i”开头的文件目录的详细内容，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l i*</span><br></pre></td></tr></table></figure><p>例三：以容易理解的格式列出 /home 目录中所有的文件目录的大小，可以使用如下命令：</p><blockquote><p>ls  -alh  /home</p></blockquote><p><strong>（4）思考题</strong></p><p>1.以容易理解的格式列出/home 目录中所有以”i”开头的文件目录的大小。</p><p>2.列出/home 目录中所有以”b”开头的目录。</p><h4 id="2-2-cd-命令"><a href="#2-2-cd-命令" class="headerlink" title="2.2 cd 命令"></a>2.2 cd 命令</h4><p>cd 命令可以说是 Linux 中最基本的命令语句，其他的命令语句要进行操作，都是建立在使用 cd 命令上的。cd 命令是 change directory 的缩写,切换当前目录至指定的目录。</p><p><strong>（1）命令格式</strong></p><blockquote><p>cd [目录名]</p></blockquote><p><strong>（2）常用范例</strong></p><p><strong>例一</strong>：从当前目录进入系统根目录，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd  /</span><br></pre></td></tr></table></figure><p><strong>例二</strong>：从当前目录进入父目录，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>..表示父目录</p><p><strong>例三</strong>：从当前目录进入当前用户主目录，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>~ 表示当前用户主目录，注意与系统根目录不是同一个概念</p><p><strong>例四</strong>：从当前目录进入上次所在目录，可以使用如下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd -</span><br></pre></td></tr></table></figure><p>表示上次进入的目录</p><h4 id="2-3-pwd-命令"><a href="#2-3-pwd-命令" class="headerlink" title="2.3 pwd 命令"></a>2.3 pwd 命令</h4><p>Linux 中用 pwd 命令来查看“当前工作目录”的完整路径。 简单得说，每当你在终端进行操作时，你都会有一个当前工作目录。 在不太确定当前位置时，就会使用 pwd 来判定当前目录在文件系统内的确切位置。</p><p>pwd 命令是 Print Working Directory 的缩写。</p><p><strong>（1）命令格式</strong></p><blockquote><p>pwd [选项]</p></blockquote><p><strong>（2）常用参数</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-P</td><td>显示实际物理路径，而非使用连接（link）路径</td></tr><tr><td>-L</td><td>当目录为连接路径时，显示连接路径</td></tr></tbody></table><p><strong>例一</strong>：显示当前目录所在路径，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><p><strong>例二</strong>：显示当前目录的物理路径，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd -P</span><br></pre></td></tr></table></figure><p><strong>例三</strong>：显示当前目录的连接路径，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd -L</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;经常需要上传前端代码到服务器，秉承什么都得会一点的原则，Linux能不会吗？没有机器的小伙伴可以到实验楼自行学习…&quot;&gt;&lt;a href=&quot;#经常需要上传前端代码到服务器，秉承什么都得会一点的原则，Linux能不会吗？没有机器的小伙伴可以到实验楼自行学习…&quot; class=&quot;headerlink&quot; title=&quot;经常需要上传前端代码到服务器，秉承什么都得会一点的原则，Linux能不会吗？没有机器的小伙伴可以到实验楼自行学习…&quot;&gt;&lt;/a&gt;经常需要上传前端代码到服务器，秉承什么都得会一点的原则，Linux能不会吗？没有机器的小伙伴可以到实验楼自行学习…&lt;/h6&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>快速起步vue-cli</title>
    <link href="http://yoursite.com/2018/05/12/%E5%BF%AB%E9%80%9F%E8%B5%B7%E6%AD%A5vue-cli/"/>
    <id>http://yoursite.com/2018/05/12/快速起步vue-cli/</id>
    <published>2018-05-12T15:57:08.000Z</published>
    <updated>2018-05-15T12:15:56.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="vue-cli-是一个官方发布-vue-js-项目脚手架，使用-vue-cli-可以快速创建-vue-项目，GitHub地址是："><a href="#vue-cli-是一个官方发布-vue-js-项目脚手架，使用-vue-cli-可以快速创建-vue-项目，GitHub地址是：" class="headerlink" title="vue-cli 是一个官方发布 vue.js 项目脚手架，使用 vue-cli 可以快速创建 vue 项目，GitHub地址是："></a>vue-cli 是一个官方发布 vue.js 项目脚手架，使用 vue-cli 可以快速创建 vue 项目，GitHub地址是：</h6><h5 id="gt-https-github-com-vuejs-vue-cli"><a href="#gt-https-github-com-vuejs-vue-cli" class="headerlink" title="&gt; https://github.com/vuejs/vue-cli"></a>&gt; <a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">https://github.com/vuejs/vue-cli</a></h5><a id="more"></a><h5 id="一、-安装-node-js"><a href="#一、-安装-node-js" class="headerlink" title="一、 安装 node.js"></a>一、 安装 node.js</h5><p>首先需要安装node环境，可以直接到中文官网</p><blockquote><p><a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a></p></blockquote><p>下载安装包。</p><p>只是这样安装的 node 是固定版本的，如果需要多版本的 node，可以使用 nvm 安装</p><blockquote><p><a href="http://blog.csdn.net/s8460049/article/details/52396399" target="_blank" rel="noopener">http://blog.csdn.net/s8460049/article/details/52396399</a></p></blockquote><p>安装完成后，可以命令行工具中输入 node -v 和 npm -v，如果能显示出版本号，就说明安装成功。</p><h5 id="二、安装-vue-cli"><a href="#二、安装-vue-cli" class="headerlink" title="二、安装 vue-cli"></a>二、安装 vue-cli</h5><p>安装好了 node，我们可以直接全局安装 vue-cli：</p><blockquote><p>npm install -g vue-cli</p></blockquote><p>但是这种安装方式比较慢，推荐使用国内镜像来安装，所以我们先设置 cnpm：</p><blockquote><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></blockquote><p>如果安装失败，可以使用 npm cache clean 清理缓存，然后再重新安装。后面的安装过程中，如有安装失败的情况，也需要先清理缓存</p><p>同样可以使用 cnpm -v 查看是否安装成功</p><p>然后使用 cnpm 安装 vue-cli 和 webpack</p><blockquote><p>cnpm install -g vue-cli</p></blockquote><p>最新的 vue 项目模板中，都带有 webpack 插件，所以这里可以不安装 webpack</p><p>安装完成后，可以使用 vue -V （注意 V 大写）查看是否安装成功。</p><blockquote><p>如果提示“无法识别 ‘vue’ ” ，有可能是 npm 版本过低，可以使用 npm install -g npm 来更新版本</p></blockquote><h5 id="三、生成项目"><a href="#三、生成项目" class="headerlink" title="三、生成项目"></a>三、生成项目</h5><p>首先需要在命令行中进入到项目目录，然后输入：</p><blockquote><p>vue init webpack Vue-Project</p></blockquote><p>其中 webpack 是模板名称，可以到 vue.js 的 GitHub 上查看更多的模板</p><blockquote><p><a href="https://github.com/vuejs-templates" target="_blank" rel="noopener">https://github.com/vuejs-templates</a></p></blockquote><p>Vue-Project 是自定义的项目名称，命令执行之后，会在当前目录生成一个以该名称命名的项目文件夹</p><p><img src="http://images2015.cnblogs.com/blog/1059788/201701/1059788-20170106133950378-145408144.png" alt="image"></p><p>配置完成后，可以看到目录下多出了一个项目文件夹，里面就是 vue-cli 创建的一个基于 webpack 的 vue.js 项目</p><p>然后进入项目目录（cd Vue-Project），使用 cnpm 安装依赖</p><blockquote><p>cnpm install</p></blockquote><p>然后启动项目</p><blockquote><p>npm run dev</p></blockquote><p>如果浏览器打开之后，没有加载出页面，有可能是本地的 8080 端口被占用，需要修改一下配置文件</p><blockquote><p>config&gt;index.js</p></blockquote><p> <img src="http://images2015.cnblogs.com/blog/1059788/201701/1059788-20170106135204409-1735535107.png" alt="image"></p><p>建议将端口号改为不常用的端口。另外我还将 build 的路径前缀修改为 ‘ ./ ‘（原本为 ‘ / ‘），是因为打包之后，外部引入 js 和 css 文件时，如果路径以 ‘ / ‘ 开头，在本地是无法找到对应文件的（服务器上没问题）。所以如果需要在本地打开打包后的文件，就得修改文件路径。</p><p>四、打包上线</p><p>自己的项目文件都需要放到 src 文件夹下</p><p>项目开发完成之后，可以输入</p><blockquote><p>npm run build</p></blockquote><p>来进行打包工作</p><p>npm run build<br>打包完成后，会生成 dist 文件夹，如果已经修改了文件路径，可以直接打开本地文件查看</p><p>项目上线时，只需要将 dist 文件夹放到服务器就行了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;vue-cli-是一个官方发布-vue-js-项目脚手架，使用-vue-cli-可以快速创建-vue-项目，GitHub地址是：&quot;&gt;&lt;a href=&quot;#vue-cli-是一个官方发布-vue-js-项目脚手架，使用-vue-cli-可以快速创建-vue-项目，GitHub地址是：&quot; class=&quot;headerlink&quot; title=&quot;vue-cli 是一个官方发布 vue.js 项目脚手架，使用 vue-cli 可以快速创建 vue 项目，GitHub地址是：&quot;&gt;&lt;/a&gt;vue-cli 是一个官方发布 vue.js 项目脚手架，使用 vue-cli 可以快速创建 vue 项目，GitHub地址是：&lt;/h6&gt;&lt;h5 id=&quot;gt-https-github-com-vuejs-vue-cli&quot;&gt;&lt;a href=&quot;#gt-https-github-com-vuejs-vue-cli&quot; class=&quot;headerlink&quot; title=&quot;&amp;gt; https://github.com/vuejs/vue-cli&quot;&gt;&lt;/a&gt;&amp;gt; &lt;a href=&quot;https://github.com/vuejs/vue-cli&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/vuejs/vue-cli&lt;/a&gt;&lt;/h5&gt;
    
    </summary>
    
    
      <category term="javascript vuejs vuecli" scheme="http://yoursite.com/tags/javascript-vuejs-vuecli/"/>
    
  </entry>
  
  <entry>
    <title>vuex</title>
    <link href="http://yoursite.com/2018/05/12/vuex/"/>
    <id>http://yoursite.com/2018/05/12/vuex/</id>
    <published>2018-05-12T15:55:05.000Z</published>
    <updated>2018-05-15T12:14:52.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="项目组件越做越多，还在为组件间传值烦恼吗-用户信息好多页面都需要绑定数据，怎么操作？用vuex实现组件间的状态管理吧。"><a href="#项目组件越做越多，还在为组件间传值烦恼吗-用户信息好多页面都需要绑定数据，怎么操作？用vuex实现组件间的状态管理吧。" class="headerlink" title="项目组件越做越多，还在为组件间传值烦恼吗? 用户信息好多页面都需要绑定数据，怎么操作？用vuex实现组件间的状态管理吧。"></a>项目组件越做越多，还在为组件间传值烦恼吗? 用户信息好多页面都需要绑定数据，怎么操作？用vuex实现组件间的状态管理吧。</h6><a id="more"></a><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><blockquote><p>Vuex 使用单一状态树——是的，用一个对象就包含了全部的应用层级状态。</p></blockquote><blockquote><p>由于 Vuex 的状态存储是响应式的，从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态</p></blockquote><p>通过在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到。让我们更新下 Counter 的实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Counter = &#123;</span><br><span class="line">  template: `&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      return this.$store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h4><p>有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; id: 1, text: &apos;...&apos;, done: true &#125;,</span><br><span class="line">      &#123; id: 2, text: &apos;...&apos;, done: false &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos: state =&gt; &#123;</span><br><span class="line">      return state.todos.filter(todo =&gt; todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们可以很容易地在任何组件中使用它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  doneTodosCount () &#123;</span><br><span class="line">    return this.$store.getters.doneTodosCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      // 变更状态</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.commit(&apos;increment&apos;)</span><br></pre></td></tr></table></figure><h5 id="对象风格的提交方式"><a href="#对象风格的提交方式" class="headerlink" title="对象风格的提交方式"></a>对象风格的提交方式</h5><p>提交 mutation 的另一种方式是直接使用包含 type 属性的对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">store.commit(&#123;</span><br><span class="line">  type: &apos;increment&apos;,</span><br><span class="line">  amount: 10</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当使用对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 handler 保持不变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>Action 类似于 mutation，不同在于：</p><ol><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ol><p>让我们来注册一个简单的 action：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit(&apos;increment&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="分发-Action"><a href="#分发-Action" class="headerlink" title="分发 Action"></a>分发 Action</h5><p>Action 通过 store.dispatch 方法触发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(&apos;increment&apos;)</span><br></pre></td></tr></table></figure><p>参考api ：<a href="https://vuex.vuejs.org/zh-cn/api.html" target="_blank" rel="noopener">https://vuex.vuejs.org/zh-cn/api.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;项目组件越做越多，还在为组件间传值烦恼吗-用户信息好多页面都需要绑定数据，怎么操作？用vuex实现组件间的状态管理吧。&quot;&gt;&lt;a href=&quot;#项目组件越做越多，还在为组件间传值烦恼吗-用户信息好多页面都需要绑定数据，怎么操作？用vuex实现组件间的状态管理吧。&quot; class=&quot;headerlink&quot; title=&quot;项目组件越做越多，还在为组件间传值烦恼吗? 用户信息好多页面都需要绑定数据，怎么操作？用vuex实现组件间的状态管理吧。&quot;&gt;&lt;/a&gt;项目组件越做越多，还在为组件间传值烦恼吗? 用户信息好多页面都需要绑定数据，怎么操作？用vuex实现组件间的状态管理吧。&lt;/h6&gt;
    
    </summary>
    
    
      <category term="javascript vuejs" scheme="http://yoursite.com/tags/javascript-vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Android控件实现透明度</title>
    <link href="http://yoursite.com/2018/05/12/Android%E6%8E%A7%E4%BB%B6%E5%AE%9E%E7%8E%B0%E9%80%8F%E6%98%8E%E5%BA%A6/"/>
    <id>http://yoursite.com/2018/05/12/Android控件实现透明度/</id>
    <published>2018-05-12T15:53:46.000Z</published>
    <updated>2018-05-15T12:14:34.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="CSS3可以通过OPCITY实现元素透明度从-0-0（完全透明）到-1-0（完全不透明），那么ANDROID控件如何实现透明效果呢？"><a href="#CSS3可以通过OPCITY实现元素透明度从-0-0（完全透明）到-1-0（完全不透明），那么ANDROID控件如何实现透明效果呢？" class="headerlink" title="CSS3可以通过OPCITY实现元素透明度从 0.0（完全透明）到 1.0（完全不透明），那么ANDROID控件如何实现透明效果呢？"></a>CSS3可以通过OPCITY实现元素透明度从 0.0（完全透明）到 1.0（完全不透明），那么ANDROID控件如何实现透明效果呢？</h6><a id="more"></a><p>（1）java代码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text = (TextView) findViewById(R.id.text);</span><br><span class="line">text.getBackground().setAlpha(12);</span><br></pre></td></tr></table></figure><h6 id="setAlpha-的括号中可以填0–255之间的数字。数字越大，越不透明。"><a href="#setAlpha-的括号中可以填0–255之间的数字。数字越大，越不透明。" class="headerlink" title="setAlpha()的括号中可以填0–255之间的数字。数字越大，越不透明。"></a>setAlpha()的括号中可以填0–255之间的数字。数字越大，越不透明。</h6><blockquote><p>注意点：在5.0以上系统时，有些机型会出现莫名其妙的颜色值不起作用，变成透明了，也就是用此方法会导致其他共用一个资源的布局（例如：@color/white）透明度也跟着改变。<br>比如text用上述方法设置成透明后，项目中，其他用到text颜色值的控件，都变成透明了。 </p></blockquote><hr><blockquote><p>原因：在布局中多个控件同时使用一个资源的时候，这些控件会共用一个状态，例如ColorState，如果你改变了一个控件的状态，其他的控件都会接收到相同的通知。这时我们可以使用mutate()方法使该控件状态不定，这样不定状态的控件就不会共享自己的状态了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text.getBackground().mutate().setAlpha(12);</span><br></pre></td></tr></table></figure><p>( 2 ) 在xml布局中进行设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:id=&quot;@+id/text&quot;</span><br><span class="line">    android:text=&quot;Hello World!&quot;</span><br><span class="line">    android:background=&quot;#987654&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:alpha=&quot;0.5&quot;</span><br><span class="line">    android:layout_height=&quot;100dp&quot; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:alpha的值为0~1之间的数。数字越大，越不透明。1表示完全不透明，0表示完全透明。</span><br></pre></td></tr></table></figure><p>(3)在xml布局中通过android:background设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">        android:id=&quot;@+id/text&quot;</span><br><span class="line">        android:text=&quot;Hello World!&quot;</span><br><span class="line">        android:background=&quot;#80987654&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;100dp&quot; /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>颜色和不透明度 (alpha) 值以十六进制表示法表示。任何一种颜色的值范围都是 0 到 255(00 到 ff)。对于 alpha，00 表示完全透明，ff 表示完全不透明。android:background的值的格式为”#AARRGGBB”。AA即透明度，R、G、B是红绿蓝三色。每一位均为0–F的十六位数。其中透明度的数值越大，越不透明。因此这里如果想设置透明度为50%的白色的话，可以如上设置。（1）java代码实现：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text = (TextView) findViewById(R.id.text);</span><br><span class="line">text.getBackground().setAlpha(12);</span><br></pre></td></tr></table></figure><h6 id="setAlpha-的括号中可以填0–255之间的数字。数字越大，越不透明。-1"><a href="#setAlpha-的括号中可以填0–255之间的数字。数字越大，越不透明。-1" class="headerlink" title="setAlpha()的括号中可以填0–255之间的数字。数字越大，越不透明。"></a>setAlpha()的括号中可以填0–255之间的数字。数字越大，越不透明。</h6><blockquote><p>注意点：在5.0以上系统时，有些机型会出现莫名其妙的颜色值不起作用，变成透明了，也就是用此方法会导致其他共用一个资源的布局（例如：@color/white）透明度也跟着改变。<br>比如text用上述方法设置成透明后，项目中，其他用到text颜色值的控件，都变成透明了。 </p></blockquote><hr><blockquote><p>原因：在布局中多个控件同时使用一个资源的时候，这些控件会共用一个状态，例如ColorState，如果你改变了一个控件的状态，其他的控件都会接收到相同的通知。这时我们可以使用mutate()方法使该控件状态不定，这样不定状态的控件就不会共享自己的状态了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text.getBackground().mutate().setAlpha(12);</span><br></pre></td></tr></table></figure><p>( 2 ) 在xml布局中进行设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:id=&quot;@+id/text&quot;</span><br><span class="line">    android:text=&quot;Hello World!&quot;</span><br><span class="line">    android:background=&quot;#987654&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:alpha=&quot;0.5&quot;</span><br><span class="line">    android:layout_height=&quot;100dp&quot; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:alpha的值为0~1之间的数。数字越大，越不透明。1表示完全不透明，0表示完全透明。</span><br></pre></td></tr></table></figure><p>(3)在xml布局中通过android:background设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">        android:id=&quot;@+id/text&quot;</span><br><span class="line">        android:text=&quot;Hello World!&quot;</span><br><span class="line">        android:background=&quot;#80987654&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;100dp&quot; /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>颜色和不透明度 (alpha) 值以十六进制表示法表示。任何一种颜色的值范围都是 0 到 255(00 到 ff)。对于 alpha，00 表示完全透明，ff 表示完全不透明。android:background的值的格式为”#AARRGGBB”。AA即透明度，R、G、B是红绿蓝三色。每一位均为0–F的十六位数。其中透明度的数值越大，越不透明。因此这里如果想设置透明度为50%的白色的话，可以如上设置。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;CSS3可以通过OPCITY实现元素透明度从-0-0（完全透明）到-1-0（完全不透明），那么ANDROID控件如何实现透明效果呢？&quot;&gt;&lt;a href=&quot;#CSS3可以通过OPCITY实现元素透明度从-0-0（完全透明）到-1-0（完全不透明），那么ANDROID控件如何实现透明效果呢？&quot; class=&quot;headerlink&quot; title=&quot;CSS3可以通过OPCITY实现元素透明度从 0.0（完全透明）到 1.0（完全不透明），那么ANDROID控件如何实现透明效果呢？&quot;&gt;&lt;/a&gt;CSS3可以通过OPCITY实现元素透明度从 0.0（完全透明）到 1.0（完全不透明），那么ANDROID控件如何实现透明效果呢？&lt;/h6&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
</feed>
